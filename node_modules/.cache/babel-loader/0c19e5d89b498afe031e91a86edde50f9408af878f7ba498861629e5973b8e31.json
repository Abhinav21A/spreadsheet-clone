{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { StatType } from \"./StatType.mjs\";\n/**\r\n * Provides tracking performance statistics to the engine\r\n */\nexport class Statistics {\n  constructor() {\n    this.stats = new Map([[StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0], [StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0]]);\n    this.startTimes = new Map();\n  }\n  incrementCriterionFunctionFullCacheUsed() {\n    var _a;\n    const newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_FULL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n    this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, newValue);\n  }\n  incrementCriterionFunctionPartialCacheUsed() {\n    var _a;\n    const newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n    this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, newValue);\n  }\n  /**\r\n   * Resets statistics\r\n   */\n  reset() {\n    this.stats.clear();\n    this.startTimes.clear();\n    this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0);\n    this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0);\n  }\n  /**\r\n   * Starts tracking particular statistic.\r\n   *\r\n   * @param name - statistic to start tracking\r\n   */\n  start(name) {\n    if (this.startTimes.get(name)) {\n      throw Error(`Statistics ${name} already started`);\n    } else {\n      this.startTimes.set(name, Date.now());\n    }\n  }\n  /**\r\n   * Stops tracking particular statistic.\r\n   * Raise error if tracking statistic wasn't started.\r\n   *\r\n   * @param name - statistic to stop tracking\r\n   */\n  end(name) {\n    var _a;\n    const now = Date.now();\n    const startTime = this.startTimes.get(name);\n    if (startTime) {\n      let values = (_a = this.stats.get(name)) !== null && _a !== void 0 ? _a : 0;\n      values += now - startTime;\n      this.stats.set(name, values);\n      this.startTimes.delete(name);\n    } else {\n      throw Error(`Statistics ${name} not started`);\n    }\n  }\n  /**\r\n   * Measure given statistic as execution of given function.\r\n   *\r\n   * @param name - statistic to track\r\n   * @param func - function to call\r\n   * @returns result of the function call\r\n   */\n  measure(name, func) {\n    this.start(name);\n    const result = func();\n    this.end(name);\n    return result;\n  }\n  /**\r\n   * Returns the snapshot of current results\r\n   */\n  snapshot() {\n    return new Map(this.stats);\n  }\n}","map":{"version":3,"names":["StatType","Statistics","constructor","stats","Map","CRITERION_FUNCTION_FULL_CACHE_USED","CRITERION_FUNCTION_PARTIAL_CACHE_USED","startTimes","incrementCriterionFunctionFullCacheUsed","_a","newValue","get","set","incrementCriterionFunctionPartialCacheUsed","reset","clear","start","name","Error","Date","now","end","startTime","values","delete","measure","func","result","snapshot"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/statistics/Statistics.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { StatType } from \"./StatType.mjs\";\n/**\r\n * Provides tracking performance statistics to the engine\r\n */\nexport class Statistics {\n  constructor() {\n    this.stats = new Map([[StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0], [StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0]]);\n    this.startTimes = new Map();\n  }\n  incrementCriterionFunctionFullCacheUsed() {\n    var _a;\n    const newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_FULL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n    this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, newValue);\n  }\n  incrementCriterionFunctionPartialCacheUsed() {\n    var _a;\n    const newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n    this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, newValue);\n  }\n  /**\r\n   * Resets statistics\r\n   */\n  reset() {\n    this.stats.clear();\n    this.startTimes.clear();\n    this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0);\n    this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0);\n  }\n  /**\r\n   * Starts tracking particular statistic.\r\n   *\r\n   * @param name - statistic to start tracking\r\n   */\n  start(name) {\n    if (this.startTimes.get(name)) {\n      throw Error(`Statistics ${name} already started`);\n    } else {\n      this.startTimes.set(name, Date.now());\n    }\n  }\n  /**\r\n   * Stops tracking particular statistic.\r\n   * Raise error if tracking statistic wasn't started.\r\n   *\r\n   * @param name - statistic to stop tracking\r\n   */\n  end(name) {\n    var _a;\n    const now = Date.now();\n    const startTime = this.startTimes.get(name);\n    if (startTime) {\n      let values = (_a = this.stats.get(name)) !== null && _a !== void 0 ? _a : 0;\n      values += now - startTime;\n      this.stats.set(name, values);\n      this.startTimes.delete(name);\n    } else {\n      throw Error(`Statistics ${name} not started`);\n    }\n  }\n  /**\r\n   * Measure given statistic as execution of given function.\r\n   *\r\n   * @param name - statistic to track\r\n   * @param func - function to call\r\n   * @returns result of the function call\r\n   */\n  measure(name, func) {\n    this.start(name);\n    const result = func();\n    this.end(name);\n    return result;\n  }\n  /**\r\n   * Returns the snapshot of current results\r\n   */\n  snapshot() {\n    return new Map(this.stats);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}