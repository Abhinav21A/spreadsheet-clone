{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { AstNodeType, collectDependencies } from \".//index.mjs\";\nconst buildCacheEntry = (ast, relativeDependencies, hasVolatileFunction, hasStructuralChangeFunction) => ({\n  ast,\n  relativeDependencies,\n  hasVolatileFunction,\n  hasStructuralChangeFunction\n});\nexport class Cache {\n  constructor(functionRegistry) {\n    this.functionRegistry = functionRegistry;\n    this.cache = new Map();\n  }\n  set(hash, ast) {\n    const astRelativeDependencies = collectDependencies(ast, this.functionRegistry);\n    const cacheEntry = buildCacheEntry(ast, astRelativeDependencies, doesContainFunctions(ast, this.functionRegistry.isFunctionVolatile), doesContainFunctions(ast, this.functionRegistry.isFunctionDependentOnSheetStructureChange));\n    this.cache.set(hash, cacheEntry);\n    return cacheEntry;\n  }\n  get(hash) {\n    return this.cache.get(hash);\n  }\n  maybeSetAndThenGet(hash, ast) {\n    const entryFromCache = this.cache.get(hash);\n    if (entryFromCache !== undefined) {\n      return entryFromCache.ast;\n    } else {\n      this.set(hash, ast);\n      return ast;\n    }\n  }\n}\nexport const doesContainFunctions = (ast, functionCriterion) => {\n  switch (ast.type) {\n    case AstNodeType.EMPTY:\n    case AstNodeType.NUMBER:\n    case AstNodeType.STRING:\n    case AstNodeType.ERROR:\n    case AstNodeType.ERROR_WITH_RAW_INPUT:\n    case AstNodeType.CELL_REFERENCE:\n    case AstNodeType.CELL_RANGE:\n    case AstNodeType.COLUMN_RANGE:\n    case AstNodeType.ROW_RANGE:\n    case AstNodeType.NAMED_EXPRESSION:\n      return false;\n    case AstNodeType.PERCENT_OP:\n    case AstNodeType.PLUS_UNARY_OP:\n    case AstNodeType.MINUS_UNARY_OP:\n      {\n        return doesContainFunctions(ast.value, functionCriterion);\n      }\n    case AstNodeType.CONCATENATE_OP:\n    case AstNodeType.EQUALS_OP:\n    case AstNodeType.NOT_EQUAL_OP:\n    case AstNodeType.LESS_THAN_OP:\n    case AstNodeType.GREATER_THAN_OP:\n    case AstNodeType.LESS_THAN_OR_EQUAL_OP:\n    case AstNodeType.GREATER_THAN_OR_EQUAL_OP:\n    case AstNodeType.MINUS_OP:\n    case AstNodeType.PLUS_OP:\n    case AstNodeType.TIMES_OP:\n    case AstNodeType.DIV_OP:\n    case AstNodeType.POWER_OP:\n      return doesContainFunctions(ast.left, functionCriterion) || doesContainFunctions(ast.right, functionCriterion);\n    case AstNodeType.PARENTHESIS:\n      return doesContainFunctions(ast.expression, functionCriterion);\n    case AstNodeType.FUNCTION_CALL:\n      {\n        if (functionCriterion(ast.procedureName)) {\n          return true;\n        }\n        return ast.args.some(arg => doesContainFunctions(arg, functionCriterion));\n      }\n    case AstNodeType.ARRAY:\n      {\n        return ast.args.some(row => row.some(arg => doesContainFunctions(arg, functionCriterion)));\n      }\n  }\n};","map":{"version":3,"names":["AstNodeType","collectDependencies","buildCacheEntry","ast","relativeDependencies","hasVolatileFunction","hasStructuralChangeFunction","Cache","constructor","functionRegistry","cache","Map","set","hash","astRelativeDependencies","cacheEntry","doesContainFunctions","isFunctionVolatile","isFunctionDependentOnSheetStructureChange","get","maybeSetAndThenGet","entryFromCache","undefined","functionCriterion","type","EMPTY","NUMBER","STRING","ERROR","ERROR_WITH_RAW_INPUT","CELL_REFERENCE","CELL_RANGE","COLUMN_RANGE","ROW_RANGE","NAMED_EXPRESSION","PERCENT_OP","PLUS_UNARY_OP","MINUS_UNARY_OP","value","CONCATENATE_OP","EQUALS_OP","NOT_EQUAL_OP","LESS_THAN_OP","GREATER_THAN_OP","LESS_THAN_OR_EQUAL_OP","GREATER_THAN_OR_EQUAL_OP","MINUS_OP","PLUS_OP","TIMES_OP","DIV_OP","POWER_OP","left","right","PARENTHESIS","expression","FUNCTION_CALL","procedureName","args","some","arg","ARRAY","row"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/parser/Cache.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { AstNodeType, collectDependencies } from \".//index.mjs\";\nconst buildCacheEntry = (ast, relativeDependencies, hasVolatileFunction, hasStructuralChangeFunction) => ({\n  ast,\n  relativeDependencies,\n  hasVolatileFunction,\n  hasStructuralChangeFunction\n});\nexport class Cache {\n  constructor(functionRegistry) {\n    this.functionRegistry = functionRegistry;\n    this.cache = new Map();\n  }\n  set(hash, ast) {\n    const astRelativeDependencies = collectDependencies(ast, this.functionRegistry);\n    const cacheEntry = buildCacheEntry(ast, astRelativeDependencies, doesContainFunctions(ast, this.functionRegistry.isFunctionVolatile), doesContainFunctions(ast, this.functionRegistry.isFunctionDependentOnSheetStructureChange));\n    this.cache.set(hash, cacheEntry);\n    return cacheEntry;\n  }\n  get(hash) {\n    return this.cache.get(hash);\n  }\n  maybeSetAndThenGet(hash, ast) {\n    const entryFromCache = this.cache.get(hash);\n    if (entryFromCache !== undefined) {\n      return entryFromCache.ast;\n    } else {\n      this.set(hash, ast);\n      return ast;\n    }\n  }\n}\nexport const doesContainFunctions = (ast, functionCriterion) => {\n  switch (ast.type) {\n    case AstNodeType.EMPTY:\n    case AstNodeType.NUMBER:\n    case AstNodeType.STRING:\n    case AstNodeType.ERROR:\n    case AstNodeType.ERROR_WITH_RAW_INPUT:\n    case AstNodeType.CELL_REFERENCE:\n    case AstNodeType.CELL_RANGE:\n    case AstNodeType.COLUMN_RANGE:\n    case AstNodeType.ROW_RANGE:\n    case AstNodeType.NAMED_EXPRESSION:\n      return false;\n    case AstNodeType.PERCENT_OP:\n    case AstNodeType.PLUS_UNARY_OP:\n    case AstNodeType.MINUS_UNARY_OP:\n      {\n        return doesContainFunctions(ast.value, functionCriterion);\n      }\n    case AstNodeType.CONCATENATE_OP:\n    case AstNodeType.EQUALS_OP:\n    case AstNodeType.NOT_EQUAL_OP:\n    case AstNodeType.LESS_THAN_OP:\n    case AstNodeType.GREATER_THAN_OP:\n    case AstNodeType.LESS_THAN_OR_EQUAL_OP:\n    case AstNodeType.GREATER_THAN_OR_EQUAL_OP:\n    case AstNodeType.MINUS_OP:\n    case AstNodeType.PLUS_OP:\n    case AstNodeType.TIMES_OP:\n    case AstNodeType.DIV_OP:\n    case AstNodeType.POWER_OP:\n      return doesContainFunctions(ast.left, functionCriterion) || doesContainFunctions(ast.right, functionCriterion);\n    case AstNodeType.PARENTHESIS:\n      return doesContainFunctions(ast.expression, functionCriterion);\n    case AstNodeType.FUNCTION_CALL:\n      {\n        if (functionCriterion(ast.procedureName)) {\n          return true;\n        }\n        return ast.args.some(arg => doesContainFunctions(arg, functionCriterion));\n      }\n    case AstNodeType.ARRAY:\n      {\n        return ast.args.some(row => row.some(arg => doesContainFunctions(arg, functionCriterion)));\n      }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}