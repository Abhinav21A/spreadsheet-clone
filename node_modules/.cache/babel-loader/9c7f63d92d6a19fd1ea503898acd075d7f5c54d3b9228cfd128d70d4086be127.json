{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { equalSimpleCellAddress, simpleCellAddress } from \"./Cell.mjs\";\nimport { AddColumnsCommand, AddRowsCommand, RemoveColumnsCommand, RemoveRowsCommand } from \"./Operations.mjs\";\nexport class BaseUndoEntry {}\nexport class RemoveRowsUndoEntry extends BaseUndoEntry {\n  constructor(command, rowsRemovals) {\n    super();\n    this.command = command;\n    this.rowsRemovals = rowsRemovals;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRemoveRows(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRemoveRows(this);\n  }\n}\nexport class MoveCellsUndoEntry extends BaseUndoEntry {\n  constructor(sourceLeftCorner, width, height, destinationLeftCorner, overwrittenCellsData, addedGlobalNamedExpressions, version) {\n    super();\n    this.sourceLeftCorner = sourceLeftCorner;\n    this.width = width;\n    this.height = height;\n    this.destinationLeftCorner = destinationLeftCorner;\n    this.overwrittenCellsData = overwrittenCellsData;\n    this.addedGlobalNamedExpressions = addedGlobalNamedExpressions;\n    this.version = version;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoMoveCells(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoMoveCells(this);\n  }\n}\nexport class AddRowsUndoEntry extends BaseUndoEntry {\n  constructor(command) {\n    super();\n    this.command = command;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoAddRows(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoAddRows(this);\n  }\n}\nexport class SetRowOrderUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, rowMapping, oldContent) {\n    super();\n    this.sheetId = sheetId;\n    this.rowMapping = rowMapping;\n    this.oldContent = oldContent;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoSetRowOrder(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoSetRowOrder(this);\n  }\n}\nexport class SetColumnOrderUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, columnMapping, oldContent) {\n    super();\n    this.sheetId = sheetId;\n    this.columnMapping = columnMapping;\n    this.oldContent = oldContent;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoSetColumnOrder(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoSetColumnOrder(this);\n  }\n}\nexport class SetSheetContentUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, oldSheetContent, newSheetContent) {\n    super();\n    this.sheetId = sheetId;\n    this.oldSheetContent = oldSheetContent;\n    this.newSheetContent = newSheetContent;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoSetSheetContent(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoSetSheetContent(this);\n  }\n}\nexport class MoveRowsUndoEntry extends BaseUndoEntry {\n  constructor(sheet, startRow, numberOfRows, targetRow, version) {\n    super();\n    this.sheet = sheet;\n    this.startRow = startRow;\n    this.numberOfRows = numberOfRows;\n    this.targetRow = targetRow;\n    this.version = version;\n    this.undoStart = this.startRow < this.targetRow ? this.targetRow - this.numberOfRows : this.targetRow;\n    this.undoEnd = this.startRow > this.targetRow ? this.startRow + this.numberOfRows : this.startRow;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoMoveRows(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoMoveRows(this);\n  }\n}\nexport class MoveColumnsUndoEntry extends BaseUndoEntry {\n  constructor(sheet, startColumn, numberOfColumns, targetColumn, version) {\n    super();\n    this.sheet = sheet;\n    this.startColumn = startColumn;\n    this.numberOfColumns = numberOfColumns;\n    this.targetColumn = targetColumn;\n    this.version = version;\n    this.undoStart = this.startColumn < this.targetColumn ? this.targetColumn - this.numberOfColumns : this.targetColumn;\n    this.undoEnd = this.startColumn > this.targetColumn ? this.startColumn + this.numberOfColumns : this.startColumn;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoMoveColumns(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoMoveColumns(this);\n  }\n}\nexport class AddColumnsUndoEntry extends BaseUndoEntry {\n  constructor(command) {\n    super();\n    this.command = command;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoAddColumns(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoAddColumns(this);\n  }\n}\nexport class RemoveColumnsUndoEntry extends BaseUndoEntry {\n  constructor(command, columnsRemovals) {\n    super();\n    this.command = command;\n    this.columnsRemovals = columnsRemovals;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRemoveColumns(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRemoveColumns(this);\n  }\n}\nexport class AddSheetUndoEntry extends BaseUndoEntry {\n  constructor(sheetName) {\n    super();\n    this.sheetName = sheetName;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoAddSheet(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoAddSheet(this);\n  }\n}\nexport class RemoveSheetUndoEntry extends BaseUndoEntry {\n  constructor(sheetName, sheetId, oldSheetContent, scopedNamedExpressions, version) {\n    super();\n    this.sheetName = sheetName;\n    this.sheetId = sheetId;\n    this.oldSheetContent = oldSheetContent;\n    this.scopedNamedExpressions = scopedNamedExpressions;\n    this.version = version;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRemoveSheet(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRemoveSheet(this);\n  }\n}\nexport class RenameSheetUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, oldName, newName) {\n    super();\n    this.sheetId = sheetId;\n    this.oldName = oldName;\n    this.newName = newName;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRenameSheet(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRenameSheet(this);\n  }\n}\nexport class ClearSheetUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, oldSheetContent) {\n    super();\n    this.sheetId = sheetId;\n    this.oldSheetContent = oldSheetContent;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoClearSheet(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoClearSheet(this);\n  }\n}\nexport class SetCellContentsUndoEntry extends BaseUndoEntry {\n  constructor(cellContents) {\n    super();\n    this.cellContents = cellContents;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoSetCellContents(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoSetCellContents(this);\n  }\n}\nexport class PasteUndoEntry extends BaseUndoEntry {\n  constructor(targetLeftCorner, oldContent, newContent, addedGlobalNamedExpressions) {\n    super();\n    this.targetLeftCorner = targetLeftCorner;\n    this.oldContent = oldContent;\n    this.newContent = newContent;\n    this.addedGlobalNamedExpressions = addedGlobalNamedExpressions;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoPaste(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoPaste(this);\n  }\n}\nexport class AddNamedExpressionUndoEntry extends BaseUndoEntry {\n  constructor(name, newContent, scope, options) {\n    super();\n    this.name = name;\n    this.newContent = newContent;\n    this.scope = scope;\n    this.options = options;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoAddNamedExpression(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoAddNamedExpression(this);\n  }\n}\nexport class RemoveNamedExpressionUndoEntry extends BaseUndoEntry {\n  constructor(namedExpression, content, scope) {\n    super();\n    this.namedExpression = namedExpression;\n    this.content = content;\n    this.scope = scope;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRemoveNamedExpression(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRemoveNamedExpression(this);\n  }\n}\nexport class ChangeNamedExpressionUndoEntry extends BaseUndoEntry {\n  constructor(namedExpression, newContent, oldContent, scope, options) {\n    super();\n    this.namedExpression = namedExpression;\n    this.newContent = newContent;\n    this.oldContent = oldContent;\n    this.scope = scope;\n    this.options = options;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoChangeNamedExpression(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoChangeNamedExpression(this);\n  }\n}\nexport class BatchUndoEntry extends BaseUndoEntry {\n  constructor() {\n    super(...arguments);\n    this.operations = [];\n  }\n  add(operation) {\n    this.operations.push(operation);\n  }\n  *reversedOperations() {\n    for (let i = this.operations.length - 1; i >= 0; i--) {\n      yield this.operations[i];\n    }\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoBatch(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoBatch(this);\n  }\n}\nexport class UndoRedo {\n  constructor(config, operations) {\n    this.operations = operations;\n    this.oldData = new Map();\n    this.undoStack = [];\n    this.redoStack = [];\n    this.undoLimit = config.undoLimit;\n  }\n  saveOperation(operation) {\n    if (this.batchUndoEntry !== undefined) {\n      this.batchUndoEntry.add(operation);\n    } else {\n      this.addUndoEntry(operation);\n    }\n  }\n  beginBatchMode() {\n    this.batchUndoEntry = new BatchUndoEntry();\n  }\n  commitBatchMode() {\n    if (this.batchUndoEntry === undefined) {\n      throw Error('Batch mode wasn\\'t started');\n    }\n    this.addUndoEntry(this.batchUndoEntry);\n    this.batchUndoEntry = undefined;\n  }\n  storeDataForVersion(version, address, astHash) {\n    if (!this.oldData.has(version)) {\n      this.oldData.set(version, []);\n    }\n    const currentOldData = this.oldData.get(version);\n    currentOldData.push([address, astHash]);\n  }\n  clearRedoStack() {\n    this.redoStack = [];\n  }\n  clearUndoStack() {\n    this.undoStack = [];\n  }\n  isUndoStackEmpty() {\n    return this.undoStack.length === 0;\n  }\n  isRedoStackEmpty() {\n    return this.redoStack.length === 0;\n  }\n  undo() {\n    const operation = this.undoStack.pop();\n    if (!operation) {\n      throw Error('Attempted to undo without operation on stack');\n    }\n    this.undoEntry(operation);\n    this.redoStack.push(operation);\n  }\n  undoBatch(batchOperation) {\n    for (const operation of batchOperation.reversedOperations()) {\n      this.undoEntry(operation);\n    }\n  }\n  undoRemoveRows(operation) {\n    this.operations.forceApplyPostponedTransformations();\n    const {\n      command: {\n        sheet\n      },\n      rowsRemovals\n    } = operation;\n    for (let i = rowsRemovals.length - 1; i >= 0; --i) {\n      const rowsRemoval = rowsRemovals[i];\n      this.operations.addRows(new AddRowsCommand(sheet, [[rowsRemoval.rowFrom, rowsRemoval.rowCount]]));\n      for (const {\n        address,\n        cellType\n      } of rowsRemoval.removedCells) {\n        this.operations.restoreCell(address, cellType);\n      }\n      this.restoreOldDataFromVersion(rowsRemoval.version - 1);\n    }\n  }\n  undoRemoveColumns(operation) {\n    this.operations.forceApplyPostponedTransformations();\n    const {\n      command: {\n        sheet\n      },\n      columnsRemovals\n    } = operation;\n    for (let i = columnsRemovals.length - 1; i >= 0; --i) {\n      const columnsRemoval = columnsRemovals[i];\n      this.operations.addColumns(new AddColumnsCommand(sheet, [[columnsRemoval.columnFrom, columnsRemoval.columnCount]]));\n      for (const {\n        address,\n        cellType\n      } of columnsRemoval.removedCells) {\n        this.operations.restoreCell(address, cellType);\n      }\n      this.restoreOldDataFromVersion(columnsRemoval.version - 1);\n    }\n  }\n  undoAddRows(operation) {\n    const addedRowsSpans = operation.command.rowsSpans();\n    for (let i = addedRowsSpans.length - 1; i >= 0; --i) {\n      const addedRows = addedRowsSpans[i];\n      this.operations.removeRows(new RemoveRowsCommand(operation.command.sheet, [[addedRows.rowStart, addedRows.numberOfRows]]));\n    }\n  }\n  undoAddColumns(operation) {\n    const addedColumnsSpans = operation.command.columnsSpans();\n    for (let i = addedColumnsSpans.length - 1; i >= 0; --i) {\n      const addedColumns = addedColumnsSpans[i];\n      this.operations.removeColumns(new RemoveColumnsCommand(operation.command.sheet, [[addedColumns.columnStart, addedColumns.numberOfColumns]]));\n    }\n  }\n  undoSetCellContents(operation) {\n    for (const cellContentData of operation.cellContents) {\n      const address = cellContentData.address;\n      const [oldContentAddress, oldContent] = cellContentData.oldContent;\n      if (!equalSimpleCellAddress(address, oldContentAddress)) {\n        this.operations.setCellEmpty(address);\n      }\n      this.operations.restoreCell(oldContentAddress, oldContent);\n    }\n  }\n  undoPaste(operation) {\n    this.restoreOperationOldContent(operation.oldContent);\n    for (const namedExpression of operation.addedGlobalNamedExpressions) {\n      this.operations.removeNamedExpression(namedExpression);\n    }\n  }\n  undoMoveRows(operation) {\n    const {\n      sheet\n    } = operation;\n    this.operations.moveRows(sheet, operation.undoStart, operation.numberOfRows, operation.undoEnd);\n    this.restoreOldDataFromVersion(operation.version - 1);\n  }\n  undoMoveColumns(operation) {\n    const {\n      sheet\n    } = operation;\n    this.operations.moveColumns(sheet, operation.undoStart, operation.numberOfColumns, operation.undoEnd);\n    this.restoreOldDataFromVersion(operation.version - 1);\n  }\n  undoMoveCells(operation) {\n    this.operations.forceApplyPostponedTransformations();\n    this.operations.moveCells(operation.destinationLeftCorner, operation.width, operation.height, operation.sourceLeftCorner);\n    this.restoreOperationOldContent(operation.overwrittenCellsData);\n    this.restoreOldDataFromVersion(operation.version - 1);\n    for (const namedExpression of operation.addedGlobalNamedExpressions) {\n      this.operations.removeNamedExpression(namedExpression);\n    }\n  }\n  undoAddSheet(operation) {\n    const {\n      sheetName\n    } = operation;\n    this.operations.removeSheetByName(sheetName);\n  }\n  undoRemoveSheet(operation) {\n    this.operations.forceApplyPostponedTransformations();\n    const {\n      oldSheetContent,\n      sheetId\n    } = operation;\n    this.operations.addSheet(operation.sheetName);\n    for (let rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {\n      const row = oldSheetContent[rowIndex];\n      for (let col = 0; col < row.length; col++) {\n        const cellType = row[col];\n        const address = simpleCellAddress(sheetId, col, rowIndex);\n        this.operations.restoreCell(address, cellType);\n      }\n    }\n    for (const [namedexpression, content] of operation.scopedNamedExpressions) {\n      this.operations.restoreNamedExpression(namedexpression, content, sheetId);\n    }\n    this.restoreOldDataFromVersion(operation.version - 1);\n  }\n  undoRenameSheet(operation) {\n    this.operations.renameSheet(operation.sheetId, operation.oldName);\n  }\n  undoClearSheet(operation) {\n    const {\n      oldSheetContent,\n      sheetId\n    } = operation;\n    for (let rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {\n      const row = oldSheetContent[rowIndex];\n      for (let col = 0; col < row.length; col++) {\n        const cellType = row[col];\n        const address = simpleCellAddress(sheetId, col, rowIndex);\n        this.operations.restoreCell(address, cellType);\n      }\n    }\n  }\n  undoSetSheetContent(operation) {\n    const {\n      oldSheetContent,\n      sheetId\n    } = operation;\n    this.operations.clearSheet(sheetId);\n    for (let rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {\n      const row = oldSheetContent[rowIndex];\n      for (let col = 0; col < row.length; col++) {\n        const cellType = row[col];\n        const address = simpleCellAddress(sheetId, col, rowIndex);\n        this.operations.restoreCell(address, cellType);\n      }\n    }\n  }\n  undoAddNamedExpression(operation) {\n    this.operations.removeNamedExpression(operation.name, operation.scope);\n  }\n  undoRemoveNamedExpression(operation) {\n    this.operations.restoreNamedExpression(operation.namedExpression, operation.content, operation.scope);\n  }\n  undoChangeNamedExpression(operation) {\n    this.operations.restoreNamedExpression(operation.namedExpression, operation.oldContent, operation.scope);\n  }\n  undoSetRowOrder(operation) {\n    this.restoreOperationOldContent(operation.oldContent);\n  }\n  undoSetColumnOrder(operation) {\n    this.restoreOperationOldContent(operation.oldContent);\n  }\n  redo() {\n    const operation = this.redoStack.pop();\n    if (!operation) {\n      throw Error('Attempted to redo without operation on stack');\n    }\n    this.redoEntry(operation);\n    this.undoStack.push(operation);\n  }\n  redoBatch(batchOperation) {\n    for (const operation of batchOperation.operations) {\n      this.redoEntry(operation);\n    }\n  }\n  redoRemoveRows(operation) {\n    this.operations.removeRows(operation.command);\n  }\n  redoMoveCells(operation) {\n    this.operations.moveCells(operation.sourceLeftCorner, operation.width, operation.height, operation.destinationLeftCorner);\n  }\n  redoRemoveColumns(operation) {\n    this.operations.removeColumns(operation.command);\n  }\n  redoPaste(operation) {\n    const {\n      targetLeftCorner,\n      newContent\n    } = operation;\n    const height = newContent.length;\n    const width = newContent[0].length;\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        const address = simpleCellAddress(targetLeftCorner.sheet, targetLeftCorner.col + x, targetLeftCorner.row + y);\n        this.operations.restoreCell(address, newContent[y][x]);\n      }\n    }\n  }\n  redoSetCellContents(operation) {\n    for (const cellContentData of operation.cellContents) {\n      this.operations.setCellContent(cellContentData.address, cellContentData.newContent);\n    }\n  }\n  redoAddRows(operation) {\n    this.operations.addRows(operation.command);\n  }\n  redoAddColumns(operation) {\n    this.operations.addColumns(operation.command);\n  }\n  redoRemoveSheet(operation) {\n    this.operations.removeSheetByName(operation.sheetName);\n  }\n  redoAddSheet(operation) {\n    this.operations.addSheet(operation.sheetName);\n  }\n  redoRenameSheet(operation) {\n    this.operations.renameSheet(operation.sheetId, operation.newName);\n  }\n  redoMoveRows(operation) {\n    this.operations.moveRows(operation.sheet, operation.startRow, operation.numberOfRows, operation.targetRow);\n  }\n  redoMoveColumns(operation) {\n    this.operations.moveColumns(operation.sheet, operation.startColumn, operation.numberOfColumns, operation.targetColumn);\n  }\n  redoClearSheet(operation) {\n    this.operations.clearSheet(operation.sheetId);\n  }\n  redoSetSheetContent(operation) {\n    const {\n      sheetId,\n      newSheetContent\n    } = operation;\n    this.operations.setSheetContent(sheetId, newSheetContent);\n  }\n  redoAddNamedExpression(operation) {\n    this.operations.addNamedExpression(operation.name, operation.newContent, operation.scope, operation.options);\n  }\n  redoRemoveNamedExpression(operation) {\n    this.operations.removeNamedExpression(operation.namedExpression.displayName, operation.scope);\n  }\n  redoChangeNamedExpression(operation) {\n    this.operations.changeNamedExpressionExpression(operation.namedExpression.displayName, operation.newContent, operation.scope, operation.options);\n  }\n  redoSetRowOrder(operation) {\n    this.operations.setRowOrder(operation.sheetId, operation.rowMapping);\n  }\n  redoSetColumnOrder(operation) {\n    this.operations.setColumnOrder(operation.sheetId, operation.columnMapping);\n  }\n  addUndoEntry(operation) {\n    this.undoStack.push(operation);\n    this.undoStack.splice(0, Math.max(0, this.undoStack.length - this.undoLimit));\n  }\n  undoEntry(operation) {\n    operation.doUndo(this);\n  }\n  restoreOperationOldContent(oldContent) {\n    for (const [address, clipboardCell] of oldContent) {\n      this.operations.restoreCell(address, clipboardCell);\n    }\n  }\n  redoEntry(operation) {\n    operation.doRedo(this);\n  }\n  restoreOldDataFromVersion(version) {\n    const oldDataToRestore = this.oldData.get(version) || [];\n    for (const entryToRestore of oldDataToRestore) {\n      const [address, hash] = entryToRestore;\n      this.operations.setFormulaToCellFromCache(hash, address);\n    }\n  }\n}","map":{"version":3,"names":["equalSimpleCellAddress","simpleCellAddress","AddColumnsCommand","AddRowsCommand","RemoveColumnsCommand","RemoveRowsCommand","BaseUndoEntry","RemoveRowsUndoEntry","constructor","command","rowsRemovals","doUndo","undoRedo","undoRemoveRows","doRedo","redoRemoveRows","MoveCellsUndoEntry","sourceLeftCorner","width","height","destinationLeftCorner","overwrittenCellsData","addedGlobalNamedExpressions","version","undoMoveCells","redoMoveCells","AddRowsUndoEntry","undoAddRows","redoAddRows","SetRowOrderUndoEntry","sheetId","rowMapping","oldContent","undoSetRowOrder","redoSetRowOrder","SetColumnOrderUndoEntry","columnMapping","undoSetColumnOrder","redoSetColumnOrder","SetSheetContentUndoEntry","oldSheetContent","newSheetContent","undoSetSheetContent","redoSetSheetContent","MoveRowsUndoEntry","sheet","startRow","numberOfRows","targetRow","undoStart","undoEnd","undoMoveRows","redoMoveRows","MoveColumnsUndoEntry","startColumn","numberOfColumns","targetColumn","undoMoveColumns","redoMoveColumns","AddColumnsUndoEntry","undoAddColumns","redoAddColumns","RemoveColumnsUndoEntry","columnsRemovals","undoRemoveColumns","redoRemoveColumns","AddSheetUndoEntry","sheetName","undoAddSheet","redoAddSheet","RemoveSheetUndoEntry","scopedNamedExpressions","undoRemoveSheet","redoRemoveSheet","RenameSheetUndoEntry","oldName","newName","undoRenameSheet","redoRenameSheet","ClearSheetUndoEntry","undoClearSheet","redoClearSheet","SetCellContentsUndoEntry","cellContents","undoSetCellContents","redoSetCellContents","PasteUndoEntry","targetLeftCorner","newContent","undoPaste","redoPaste","AddNamedExpressionUndoEntry","name","scope","options","undoAddNamedExpression","redoAddNamedExpression","RemoveNamedExpressionUndoEntry","namedExpression","content","undoRemoveNamedExpression","redoRemoveNamedExpression","ChangeNamedExpressionUndoEntry","undoChangeNamedExpression","redoChangeNamedExpression","BatchUndoEntry","arguments","operations","add","operation","push","reversedOperations","i","length","undoBatch","redoBatch","UndoRedo","config","oldData","Map","undoStack","redoStack","undoLimit","saveOperation","batchUndoEntry","undefined","addUndoEntry","beginBatchMode","commitBatchMode","Error","storeDataForVersion","address","astHash","has","set","currentOldData","get","clearRedoStack","clearUndoStack","isUndoStackEmpty","isRedoStackEmpty","undo","pop","undoEntry","batchOperation","forceApplyPostponedTransformations","rowsRemoval","addRows","rowFrom","rowCount","cellType","removedCells","restoreCell","restoreOldDataFromVersion","columnsRemoval","addColumns","columnFrom","columnCount","addedRowsSpans","rowsSpans","addedRows","removeRows","rowStart","addedColumnsSpans","columnsSpans","addedColumns","removeColumns","columnStart","cellContentData","oldContentAddress","setCellEmpty","restoreOperationOldContent","removeNamedExpression","moveRows","moveColumns","moveCells","removeSheetByName","addSheet","rowIndex","row","col","namedexpression","restoreNamedExpression","renameSheet","clearSheet","redo","redoEntry","y","x","setCellContent","setSheetContent","addNamedExpression","displayName","changeNamedExpressionExpression","setRowOrder","setColumnOrder","splice","Math","max","clipboardCell","oldDataToRestore","entryToRestore","hash","setFormulaToCellFromCache"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/UndoRedo.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { equalSimpleCellAddress, simpleCellAddress } from \"./Cell.mjs\";\nimport { AddColumnsCommand, AddRowsCommand, RemoveColumnsCommand, RemoveRowsCommand } from \"./Operations.mjs\";\nexport class BaseUndoEntry {}\nexport class RemoveRowsUndoEntry extends BaseUndoEntry {\n  constructor(command, rowsRemovals) {\n    super();\n    this.command = command;\n    this.rowsRemovals = rowsRemovals;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRemoveRows(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRemoveRows(this);\n  }\n}\nexport class MoveCellsUndoEntry extends BaseUndoEntry {\n  constructor(sourceLeftCorner, width, height, destinationLeftCorner, overwrittenCellsData, addedGlobalNamedExpressions, version) {\n    super();\n    this.sourceLeftCorner = sourceLeftCorner;\n    this.width = width;\n    this.height = height;\n    this.destinationLeftCorner = destinationLeftCorner;\n    this.overwrittenCellsData = overwrittenCellsData;\n    this.addedGlobalNamedExpressions = addedGlobalNamedExpressions;\n    this.version = version;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoMoveCells(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoMoveCells(this);\n  }\n}\nexport class AddRowsUndoEntry extends BaseUndoEntry {\n  constructor(command) {\n    super();\n    this.command = command;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoAddRows(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoAddRows(this);\n  }\n}\nexport class SetRowOrderUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, rowMapping, oldContent) {\n    super();\n    this.sheetId = sheetId;\n    this.rowMapping = rowMapping;\n    this.oldContent = oldContent;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoSetRowOrder(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoSetRowOrder(this);\n  }\n}\nexport class SetColumnOrderUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, columnMapping, oldContent) {\n    super();\n    this.sheetId = sheetId;\n    this.columnMapping = columnMapping;\n    this.oldContent = oldContent;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoSetColumnOrder(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoSetColumnOrder(this);\n  }\n}\nexport class SetSheetContentUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, oldSheetContent, newSheetContent) {\n    super();\n    this.sheetId = sheetId;\n    this.oldSheetContent = oldSheetContent;\n    this.newSheetContent = newSheetContent;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoSetSheetContent(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoSetSheetContent(this);\n  }\n}\nexport class MoveRowsUndoEntry extends BaseUndoEntry {\n  constructor(sheet, startRow, numberOfRows, targetRow, version) {\n    super();\n    this.sheet = sheet;\n    this.startRow = startRow;\n    this.numberOfRows = numberOfRows;\n    this.targetRow = targetRow;\n    this.version = version;\n    this.undoStart = this.startRow < this.targetRow ? this.targetRow - this.numberOfRows : this.targetRow;\n    this.undoEnd = this.startRow > this.targetRow ? this.startRow + this.numberOfRows : this.startRow;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoMoveRows(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoMoveRows(this);\n  }\n}\nexport class MoveColumnsUndoEntry extends BaseUndoEntry {\n  constructor(sheet, startColumn, numberOfColumns, targetColumn, version) {\n    super();\n    this.sheet = sheet;\n    this.startColumn = startColumn;\n    this.numberOfColumns = numberOfColumns;\n    this.targetColumn = targetColumn;\n    this.version = version;\n    this.undoStart = this.startColumn < this.targetColumn ? this.targetColumn - this.numberOfColumns : this.targetColumn;\n    this.undoEnd = this.startColumn > this.targetColumn ? this.startColumn + this.numberOfColumns : this.startColumn;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoMoveColumns(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoMoveColumns(this);\n  }\n}\nexport class AddColumnsUndoEntry extends BaseUndoEntry {\n  constructor(command) {\n    super();\n    this.command = command;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoAddColumns(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoAddColumns(this);\n  }\n}\nexport class RemoveColumnsUndoEntry extends BaseUndoEntry {\n  constructor(command, columnsRemovals) {\n    super();\n    this.command = command;\n    this.columnsRemovals = columnsRemovals;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRemoveColumns(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRemoveColumns(this);\n  }\n}\nexport class AddSheetUndoEntry extends BaseUndoEntry {\n  constructor(sheetName) {\n    super();\n    this.sheetName = sheetName;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoAddSheet(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoAddSheet(this);\n  }\n}\nexport class RemoveSheetUndoEntry extends BaseUndoEntry {\n  constructor(sheetName, sheetId, oldSheetContent, scopedNamedExpressions, version) {\n    super();\n    this.sheetName = sheetName;\n    this.sheetId = sheetId;\n    this.oldSheetContent = oldSheetContent;\n    this.scopedNamedExpressions = scopedNamedExpressions;\n    this.version = version;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRemoveSheet(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRemoveSheet(this);\n  }\n}\nexport class RenameSheetUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, oldName, newName) {\n    super();\n    this.sheetId = sheetId;\n    this.oldName = oldName;\n    this.newName = newName;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRenameSheet(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRenameSheet(this);\n  }\n}\nexport class ClearSheetUndoEntry extends BaseUndoEntry {\n  constructor(sheetId, oldSheetContent) {\n    super();\n    this.sheetId = sheetId;\n    this.oldSheetContent = oldSheetContent;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoClearSheet(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoClearSheet(this);\n  }\n}\nexport class SetCellContentsUndoEntry extends BaseUndoEntry {\n  constructor(cellContents) {\n    super();\n    this.cellContents = cellContents;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoSetCellContents(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoSetCellContents(this);\n  }\n}\nexport class PasteUndoEntry extends BaseUndoEntry {\n  constructor(targetLeftCorner, oldContent, newContent, addedGlobalNamedExpressions) {\n    super();\n    this.targetLeftCorner = targetLeftCorner;\n    this.oldContent = oldContent;\n    this.newContent = newContent;\n    this.addedGlobalNamedExpressions = addedGlobalNamedExpressions;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoPaste(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoPaste(this);\n  }\n}\nexport class AddNamedExpressionUndoEntry extends BaseUndoEntry {\n  constructor(name, newContent, scope, options) {\n    super();\n    this.name = name;\n    this.newContent = newContent;\n    this.scope = scope;\n    this.options = options;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoAddNamedExpression(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoAddNamedExpression(this);\n  }\n}\nexport class RemoveNamedExpressionUndoEntry extends BaseUndoEntry {\n  constructor(namedExpression, content, scope) {\n    super();\n    this.namedExpression = namedExpression;\n    this.content = content;\n    this.scope = scope;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoRemoveNamedExpression(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoRemoveNamedExpression(this);\n  }\n}\nexport class ChangeNamedExpressionUndoEntry extends BaseUndoEntry {\n  constructor(namedExpression, newContent, oldContent, scope, options) {\n    super();\n    this.namedExpression = namedExpression;\n    this.newContent = newContent;\n    this.oldContent = oldContent;\n    this.scope = scope;\n    this.options = options;\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoChangeNamedExpression(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoChangeNamedExpression(this);\n  }\n}\nexport class BatchUndoEntry extends BaseUndoEntry {\n  constructor() {\n    super(...arguments);\n    this.operations = [];\n  }\n  add(operation) {\n    this.operations.push(operation);\n  }\n  *reversedOperations() {\n    for (let i = this.operations.length - 1; i >= 0; i--) {\n      yield this.operations[i];\n    }\n  }\n  doUndo(undoRedo) {\n    undoRedo.undoBatch(this);\n  }\n  doRedo(undoRedo) {\n    undoRedo.redoBatch(this);\n  }\n}\nexport class UndoRedo {\n  constructor(config, operations) {\n    this.operations = operations;\n    this.oldData = new Map();\n    this.undoStack = [];\n    this.redoStack = [];\n    this.undoLimit = config.undoLimit;\n  }\n  saveOperation(operation) {\n    if (this.batchUndoEntry !== undefined) {\n      this.batchUndoEntry.add(operation);\n    } else {\n      this.addUndoEntry(operation);\n    }\n  }\n  beginBatchMode() {\n    this.batchUndoEntry = new BatchUndoEntry();\n  }\n  commitBatchMode() {\n    if (this.batchUndoEntry === undefined) {\n      throw Error('Batch mode wasn\\'t started');\n    }\n    this.addUndoEntry(this.batchUndoEntry);\n    this.batchUndoEntry = undefined;\n  }\n  storeDataForVersion(version, address, astHash) {\n    if (!this.oldData.has(version)) {\n      this.oldData.set(version, []);\n    }\n    const currentOldData = this.oldData.get(version);\n    currentOldData.push([address, astHash]);\n  }\n  clearRedoStack() {\n    this.redoStack = [];\n  }\n  clearUndoStack() {\n    this.undoStack = [];\n  }\n  isUndoStackEmpty() {\n    return this.undoStack.length === 0;\n  }\n  isRedoStackEmpty() {\n    return this.redoStack.length === 0;\n  }\n  undo() {\n    const operation = this.undoStack.pop();\n    if (!operation) {\n      throw Error('Attempted to undo without operation on stack');\n    }\n    this.undoEntry(operation);\n    this.redoStack.push(operation);\n  }\n  undoBatch(batchOperation) {\n    for (const operation of batchOperation.reversedOperations()) {\n      this.undoEntry(operation);\n    }\n  }\n  undoRemoveRows(operation) {\n    this.operations.forceApplyPostponedTransformations();\n    const {\n      command: {\n        sheet\n      },\n      rowsRemovals\n    } = operation;\n    for (let i = rowsRemovals.length - 1; i >= 0; --i) {\n      const rowsRemoval = rowsRemovals[i];\n      this.operations.addRows(new AddRowsCommand(sheet, [[rowsRemoval.rowFrom, rowsRemoval.rowCount]]));\n      for (const {\n        address,\n        cellType\n      } of rowsRemoval.removedCells) {\n        this.operations.restoreCell(address, cellType);\n      }\n      this.restoreOldDataFromVersion(rowsRemoval.version - 1);\n    }\n  }\n  undoRemoveColumns(operation) {\n    this.operations.forceApplyPostponedTransformations();\n    const {\n      command: {\n        sheet\n      },\n      columnsRemovals\n    } = operation;\n    for (let i = columnsRemovals.length - 1; i >= 0; --i) {\n      const columnsRemoval = columnsRemovals[i];\n      this.operations.addColumns(new AddColumnsCommand(sheet, [[columnsRemoval.columnFrom, columnsRemoval.columnCount]]));\n      for (const {\n        address,\n        cellType\n      } of columnsRemoval.removedCells) {\n        this.operations.restoreCell(address, cellType);\n      }\n      this.restoreOldDataFromVersion(columnsRemoval.version - 1);\n    }\n  }\n  undoAddRows(operation) {\n    const addedRowsSpans = operation.command.rowsSpans();\n    for (let i = addedRowsSpans.length - 1; i >= 0; --i) {\n      const addedRows = addedRowsSpans[i];\n      this.operations.removeRows(new RemoveRowsCommand(operation.command.sheet, [[addedRows.rowStart, addedRows.numberOfRows]]));\n    }\n  }\n  undoAddColumns(operation) {\n    const addedColumnsSpans = operation.command.columnsSpans();\n    for (let i = addedColumnsSpans.length - 1; i >= 0; --i) {\n      const addedColumns = addedColumnsSpans[i];\n      this.operations.removeColumns(new RemoveColumnsCommand(operation.command.sheet, [[addedColumns.columnStart, addedColumns.numberOfColumns]]));\n    }\n  }\n  undoSetCellContents(operation) {\n    for (const cellContentData of operation.cellContents) {\n      const address = cellContentData.address;\n      const [oldContentAddress, oldContent] = cellContentData.oldContent;\n      if (!equalSimpleCellAddress(address, oldContentAddress)) {\n        this.operations.setCellEmpty(address);\n      }\n      this.operations.restoreCell(oldContentAddress, oldContent);\n    }\n  }\n  undoPaste(operation) {\n    this.restoreOperationOldContent(operation.oldContent);\n    for (const namedExpression of operation.addedGlobalNamedExpressions) {\n      this.operations.removeNamedExpression(namedExpression);\n    }\n  }\n  undoMoveRows(operation) {\n    const {\n      sheet\n    } = operation;\n    this.operations.moveRows(sheet, operation.undoStart, operation.numberOfRows, operation.undoEnd);\n    this.restoreOldDataFromVersion(operation.version - 1);\n  }\n  undoMoveColumns(operation) {\n    const {\n      sheet\n    } = operation;\n    this.operations.moveColumns(sheet, operation.undoStart, operation.numberOfColumns, operation.undoEnd);\n    this.restoreOldDataFromVersion(operation.version - 1);\n  }\n  undoMoveCells(operation) {\n    this.operations.forceApplyPostponedTransformations();\n    this.operations.moveCells(operation.destinationLeftCorner, operation.width, operation.height, operation.sourceLeftCorner);\n    this.restoreOperationOldContent(operation.overwrittenCellsData);\n    this.restoreOldDataFromVersion(operation.version - 1);\n    for (const namedExpression of operation.addedGlobalNamedExpressions) {\n      this.operations.removeNamedExpression(namedExpression);\n    }\n  }\n  undoAddSheet(operation) {\n    const {\n      sheetName\n    } = operation;\n    this.operations.removeSheetByName(sheetName);\n  }\n  undoRemoveSheet(operation) {\n    this.operations.forceApplyPostponedTransformations();\n    const {\n      oldSheetContent,\n      sheetId\n    } = operation;\n    this.operations.addSheet(operation.sheetName);\n    for (let rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {\n      const row = oldSheetContent[rowIndex];\n      for (let col = 0; col < row.length; col++) {\n        const cellType = row[col];\n        const address = simpleCellAddress(sheetId, col, rowIndex);\n        this.operations.restoreCell(address, cellType);\n      }\n    }\n    for (const [namedexpression, content] of operation.scopedNamedExpressions) {\n      this.operations.restoreNamedExpression(namedexpression, content, sheetId);\n    }\n    this.restoreOldDataFromVersion(operation.version - 1);\n  }\n  undoRenameSheet(operation) {\n    this.operations.renameSheet(operation.sheetId, operation.oldName);\n  }\n  undoClearSheet(operation) {\n    const {\n      oldSheetContent,\n      sheetId\n    } = operation;\n    for (let rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {\n      const row = oldSheetContent[rowIndex];\n      for (let col = 0; col < row.length; col++) {\n        const cellType = row[col];\n        const address = simpleCellAddress(sheetId, col, rowIndex);\n        this.operations.restoreCell(address, cellType);\n      }\n    }\n  }\n  undoSetSheetContent(operation) {\n    const {\n      oldSheetContent,\n      sheetId\n    } = operation;\n    this.operations.clearSheet(sheetId);\n    for (let rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {\n      const row = oldSheetContent[rowIndex];\n      for (let col = 0; col < row.length; col++) {\n        const cellType = row[col];\n        const address = simpleCellAddress(sheetId, col, rowIndex);\n        this.operations.restoreCell(address, cellType);\n      }\n    }\n  }\n  undoAddNamedExpression(operation) {\n    this.operations.removeNamedExpression(operation.name, operation.scope);\n  }\n  undoRemoveNamedExpression(operation) {\n    this.operations.restoreNamedExpression(operation.namedExpression, operation.content, operation.scope);\n  }\n  undoChangeNamedExpression(operation) {\n    this.operations.restoreNamedExpression(operation.namedExpression, operation.oldContent, operation.scope);\n  }\n  undoSetRowOrder(operation) {\n    this.restoreOperationOldContent(operation.oldContent);\n  }\n  undoSetColumnOrder(operation) {\n    this.restoreOperationOldContent(operation.oldContent);\n  }\n  redo() {\n    const operation = this.redoStack.pop();\n    if (!operation) {\n      throw Error('Attempted to redo without operation on stack');\n    }\n    this.redoEntry(operation);\n    this.undoStack.push(operation);\n  }\n  redoBatch(batchOperation) {\n    for (const operation of batchOperation.operations) {\n      this.redoEntry(operation);\n    }\n  }\n  redoRemoveRows(operation) {\n    this.operations.removeRows(operation.command);\n  }\n  redoMoveCells(operation) {\n    this.operations.moveCells(operation.sourceLeftCorner, operation.width, operation.height, operation.destinationLeftCorner);\n  }\n  redoRemoveColumns(operation) {\n    this.operations.removeColumns(operation.command);\n  }\n  redoPaste(operation) {\n    const {\n      targetLeftCorner,\n      newContent\n    } = operation;\n    const height = newContent.length;\n    const width = newContent[0].length;\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        const address = simpleCellAddress(targetLeftCorner.sheet, targetLeftCorner.col + x, targetLeftCorner.row + y);\n        this.operations.restoreCell(address, newContent[y][x]);\n      }\n    }\n  }\n  redoSetCellContents(operation) {\n    for (const cellContentData of operation.cellContents) {\n      this.operations.setCellContent(cellContentData.address, cellContentData.newContent);\n    }\n  }\n  redoAddRows(operation) {\n    this.operations.addRows(operation.command);\n  }\n  redoAddColumns(operation) {\n    this.operations.addColumns(operation.command);\n  }\n  redoRemoveSheet(operation) {\n    this.operations.removeSheetByName(operation.sheetName);\n  }\n  redoAddSheet(operation) {\n    this.operations.addSheet(operation.sheetName);\n  }\n  redoRenameSheet(operation) {\n    this.operations.renameSheet(operation.sheetId, operation.newName);\n  }\n  redoMoveRows(operation) {\n    this.operations.moveRows(operation.sheet, operation.startRow, operation.numberOfRows, operation.targetRow);\n  }\n  redoMoveColumns(operation) {\n    this.operations.moveColumns(operation.sheet, operation.startColumn, operation.numberOfColumns, operation.targetColumn);\n  }\n  redoClearSheet(operation) {\n    this.operations.clearSheet(operation.sheetId);\n  }\n  redoSetSheetContent(operation) {\n    const {\n      sheetId,\n      newSheetContent\n    } = operation;\n    this.operations.setSheetContent(sheetId, newSheetContent);\n  }\n  redoAddNamedExpression(operation) {\n    this.operations.addNamedExpression(operation.name, operation.newContent, operation.scope, operation.options);\n  }\n  redoRemoveNamedExpression(operation) {\n    this.operations.removeNamedExpression(operation.namedExpression.displayName, operation.scope);\n  }\n  redoChangeNamedExpression(operation) {\n    this.operations.changeNamedExpressionExpression(operation.namedExpression.displayName, operation.newContent, operation.scope, operation.options);\n  }\n  redoSetRowOrder(operation) {\n    this.operations.setRowOrder(operation.sheetId, operation.rowMapping);\n  }\n  redoSetColumnOrder(operation) {\n    this.operations.setColumnOrder(operation.sheetId, operation.columnMapping);\n  }\n  addUndoEntry(operation) {\n    this.undoStack.push(operation);\n    this.undoStack.splice(0, Math.max(0, this.undoStack.length - this.undoLimit));\n  }\n  undoEntry(operation) {\n    operation.doUndo(this);\n  }\n  restoreOperationOldContent(oldContent) {\n    for (const [address, clipboardCell] of oldContent) {\n      this.operations.restoreCell(address, clipboardCell);\n    }\n  }\n  redoEntry(operation) {\n    operation.doRedo(this);\n  }\n  restoreOldDataFromVersion(version) {\n    const oldDataToRestore = this.oldData.get(version) || [];\n    for (const entryToRestore of oldDataToRestore) {\n      const [address, hash] = entryToRestore;\n      this.operations.setFormulaToCellFromCache(hash, address);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}