{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { Config } from \"./Config.mjs\";\nimport { ConfigValueTooBigError, ConfigValueTooSmallError, ExpectedOneOfValuesError, ExpectedValueOfTypeError } from \"./errors.mjs\"; // eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function configValueFromParam(inputValue, expectedType, paramName) {\n  if (typeof inputValue === 'undefined') {\n    return Config.defaultConfig[paramName];\n  } else if (typeof expectedType === 'string') {\n    if (typeof inputValue === expectedType) {\n      return inputValue;\n    } else {\n      throw new ExpectedValueOfTypeError(expectedType, paramName);\n    }\n  } else {\n    if (expectedType.includes(inputValue)) {\n      return inputValue;\n    } else {\n      throw new ExpectedOneOfValuesError(expectedType.map(val => `'${val}'`).join(' '), paramName);\n    }\n  }\n}\nexport function validateNumberToBeAtLeast(value, paramName, minimum) {\n  if (value < minimum) {\n    throw new ConfigValueTooSmallError(paramName, minimum);\n  }\n}\nexport function validateNumberToBeAtMost(value, paramName, maximum) {\n  if (value > maximum) {\n    throw new ConfigValueTooBigError(paramName, maximum);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function configValueFromParamCheck(inputValue, typeCheck, expectedType, paramName) {\n  if (typeCheck(inputValue)) {\n    return inputValue;\n  } else if (typeof inputValue === 'undefined') {\n    return Config.defaultConfig[paramName];\n  } else {\n    throw new ExpectedValueOfTypeError(expectedType, paramName);\n  }\n}\nexport function configCheckIfParametersNotInConflict(...params) {\n  const valuesMap = new Map();\n  params.forEach(param => {\n    const names = valuesMap.get(param.value) || [];\n    names.push(param.name);\n    valuesMap.set(param.value, names);\n  });\n  const duplicates = [];\n  for (const entry of valuesMap.values()) {\n    if (entry.length > 1) {\n      duplicates.push(entry);\n    }\n  }\n  if (duplicates.length > 0) {\n    duplicates.forEach(entry => entry.sort());\n    const paramNames = duplicates.map(entry => `[${entry}]`).join('; ');\n    throw new Error(`Config initialization failed. Parameters in conflict: ${paramNames}`);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function validateArgToType(inputValue, expectedType, paramName) {\n  if (typeof inputValue !== expectedType) {\n    throw new ExpectedValueOfTypeError(expectedType, paramName);\n  }\n}","map":{"version":3,"names":["Config","ConfigValueTooBigError","ConfigValueTooSmallError","ExpectedOneOfValuesError","ExpectedValueOfTypeError","configValueFromParam","inputValue","expectedType","paramName","defaultConfig","includes","map","val","join","validateNumberToBeAtLeast","value","minimum","validateNumberToBeAtMost","maximum","configValueFromParamCheck","typeCheck","configCheckIfParametersNotInConflict","params","valuesMap","Map","forEach","param","names","get","push","name","set","duplicates","entry","values","length","sort","paramNames","Error","validateArgToType"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/ArgumentSanitization.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { Config } from \"./Config.mjs\";\nimport { ConfigValueTooBigError, ConfigValueTooSmallError, ExpectedOneOfValuesError, ExpectedValueOfTypeError } from \"./errors.mjs\"; // eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function configValueFromParam(inputValue, expectedType, paramName) {\n  if (typeof inputValue === 'undefined') {\n    return Config.defaultConfig[paramName];\n  } else if (typeof expectedType === 'string') {\n    if (typeof inputValue === expectedType) {\n      return inputValue;\n    } else {\n      throw new ExpectedValueOfTypeError(expectedType, paramName);\n    }\n  } else {\n    if (expectedType.includes(inputValue)) {\n      return inputValue;\n    } else {\n      throw new ExpectedOneOfValuesError(expectedType.map(val => `'${val}'`).join(' '), paramName);\n    }\n  }\n}\nexport function validateNumberToBeAtLeast(value, paramName, minimum) {\n  if (value < minimum) {\n    throw new ConfigValueTooSmallError(paramName, minimum);\n  }\n}\nexport function validateNumberToBeAtMost(value, paramName, maximum) {\n  if (value > maximum) {\n    throw new ConfigValueTooBigError(paramName, maximum);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function configValueFromParamCheck(inputValue, typeCheck, expectedType, paramName) {\n  if (typeCheck(inputValue)) {\n    return inputValue;\n  } else if (typeof inputValue === 'undefined') {\n    return Config.defaultConfig[paramName];\n  } else {\n    throw new ExpectedValueOfTypeError(expectedType, paramName);\n  }\n}\nexport function configCheckIfParametersNotInConflict(...params) {\n  const valuesMap = new Map();\n  params.forEach(param => {\n    const names = valuesMap.get(param.value) || [];\n    names.push(param.name);\n    valuesMap.set(param.value, names);\n  });\n  const duplicates = [];\n  for (const entry of valuesMap.values()) {\n    if (entry.length > 1) {\n      duplicates.push(entry);\n    }\n  }\n  if (duplicates.length > 0) {\n    duplicates.forEach(entry => entry.sort());\n    const paramNames = duplicates.map(entry => `[${entry}]`).join('; ');\n    throw new Error(`Config initialization failed. Parameters in conflict: ${paramNames}`);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function validateArgToType(inputValue, expectedType, paramName) {\n  if (typeof inputValue !== expectedType) {\n    throw new ExpectedValueOfTypeError(expectedType, paramName);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}