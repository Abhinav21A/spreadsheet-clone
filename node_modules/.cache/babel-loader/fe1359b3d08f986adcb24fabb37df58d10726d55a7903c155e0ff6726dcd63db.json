{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { getRawValue, isExtendedNumber } from \"../InterpreterValue.mjs\";\nimport { centralF, chisquare, corrcoeff, covariance, geomean, mean, normal, stdev, studentt, sumsqerr, variance } from \"./3rdparty/jstat/jstat.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class StatisticalAggregationPlugin extends FunctionPlugin {\n  avedev(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('AVEDEV'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const avg = mean(coerced);\n      return coerced.reduce((a, b) => a + Math.abs(b - avg), 0) / coerced.length;\n    });\n  }\n  devsq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEVSQ'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return 0;\n      }\n      return sumsqerr(coerced);\n    });\n  }\n  geomean(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GEOMEAN'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.OneValue);\n      }\n      for (const val of coerced) {\n        if (val <= 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n      }\n      return geomean(coerced);\n    });\n  }\n  harmean(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HARMEAN'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.OneValue);\n      }\n      for (const val of coerced) {\n        if (val <= 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n      }\n      return coerced.length / coerced.reduce((a, b) => a + 1 / b, 0);\n    });\n  }\n  correl(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CORREL'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return corrcoeff(ret[0], ret[1]);\n    });\n  }\n  rsq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RSQ'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return Math.pow(corrcoeff(ret[0], ret[1]), 2);\n    });\n  }\n  covariancep(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COVARIANCE.P'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n < 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.OneValue);\n      }\n      if (n === 1) {\n        return 0;\n      }\n      return covariance(ret[0], ret[1]) * (n - 1) / n;\n    });\n  }\n  covariances(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COVARIANCE.S'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return covariance(ret[0], ret[1]);\n    });\n  }\n  ztest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('Z.TEST'), (range, x, sigma) => {\n      const vals = this.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());\n      if (vals instanceof CellError) {\n        return vals;\n      }\n      const n = vals.length;\n      if (sigma === undefined) {\n        if (n < 2) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        sigma = stdev(vals, true);\n      }\n      if (n < 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.OneValue);\n      }\n      if (sigma === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return 1 - normal.cdf((mean(vals) - x) / (sigma / Math.sqrt(n)), 0, 1);\n    });\n  }\n  ftest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.TEST'), (dataX, dataY) => {\n      const arrX = this.arithmeticHelper.manyToExactNumbers(dataX.valuesFromTopLeftCorner());\n      const arrY = this.arithmeticHelper.manyToExactNumbers(dataY.valuesFromTopLeftCorner());\n      if (arrX instanceof CellError) {\n        return arrX;\n      }\n      if (arrY instanceof CellError) {\n        return arrY;\n      }\n      if (arrX.length <= 1 || arrY.length <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const vx = variance(arrX, true);\n      const vy = variance(arrY, true);\n      if (vx === 0 || vy === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const r = vx / vy;\n      const v = centralF.cdf(r, arrX.length - 1, arrY.length - 1);\n      return 2 * Math.min(v, 1 - v);\n    });\n  }\n  steyx(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('STEYX'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 2) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      return Math.sqrt((sumsqerr(ret[0]) - Math.pow(covariance(ret[0], ret[1]) * (n - 1), 2) / sumsqerr(ret[1])) / (n - 2));\n    });\n  }\n  slope(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SLOPE'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return covariance(ret[0], ret[1]) * (n - 1) / sumsqerr(ret[1]);\n    });\n  }\n  chisqtest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.TEST'), (dataX, dataY) => {\n      const r = dataX.height();\n      const c = dataX.width();\n      if (dataY.height() !== r || dataY.width() !== c) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      if (ret[0].length <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      let sum = 0;\n      for (let i = 0; i < ret[0].length; i++) {\n        if (ret[1][i] === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        sum += Math.pow(ret[0][i] - ret[1][i], 2) / ret[1][i];\n      }\n      if (sum < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NaN);\n      }\n      return 1 - chisquare.cdf(sum, r > 1 && c > 1 ? (r - 1) * (c - 1) : r * c - 1);\n    });\n  }\n  ttest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.TEST'), (dataX, dataY, tails, type) => {\n      const arrX = this.arithmeticHelper.manyToExactNumbers(dataX.valuesFromTopLeftCorner());\n      const arrY = this.arithmeticHelper.manyToExactNumbers(dataY.valuesFromTopLeftCorner());\n      if (arrX instanceof CellError) {\n        return arrX;\n      }\n      if (arrY instanceof CellError) {\n        return arrY;\n      }\n      const n = arrX.length;\n      const m = arrY.length;\n      if (type === 1) {\n        if (m !== n) {\n          return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n        }\n        if (n <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const sub = Array(n);\n        for (let i = 0; i < n; i++) {\n          sub[i] = arrX[i] - arrY[i];\n        }\n        const s = stdev(sub, true);\n        if (s === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs(Math.sqrt(n) * mean(sub) / s);\n        return tails * (1 - studentt.cdf(t, n - 1));\n      } else if (type === 2) {\n        if (n <= 1 || m <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const s = (sumsqerr(arrX) + sumsqerr(arrY)) / (n + m - 2);\n        if (s === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs((mean(arrX) - mean(arrY)) / Math.sqrt(s * (1 / n + 1 / m)));\n        return tails * (1 - studentt.cdf(t, n + m - 2));\n      } else {\n        //type === 3\n        if (n <= 1 || m <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const sx = variance(arrX, true);\n        const sy = variance(arrY, true);\n        if (sx === 0 && sy === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs((mean(arrX) - mean(arrY)) / Math.sqrt(sx / n + sy / m));\n        const v = Math.pow(sx / n + sy / m, 2) / (Math.pow(sx / n, 2) / (n - 1) + Math.pow(sy / m, 2) / (m - 1));\n        return tails * (1 - studentt.cdf(t, v));\n      }\n    });\n  }\n  skew(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SKEW'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      const n = coerced.length;\n      if (n < 3) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      const avg = mean(coerced);\n      const s = stdev(coerced, true);\n      if (s === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return coerced.reduce((a, b) => a + Math.pow((b - avg) / s, 3), 0) * n / (n - 1) / (n - 2);\n    });\n  }\n  skewp(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SKEW.P'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      const n = coerced.length;\n      if (n < 3) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      const avg = mean(coerced);\n      const s = stdev(coerced, false);\n      if (s === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return coerced.reduce((a, b) => a + Math.pow((b - avg) / s, 3), 0) / n;\n    });\n  }\n}\nStatisticalAggregationPlugin.implementedFunctions = {\n  'AVEDEV': {\n    method: 'avedev',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'DEVSQ': {\n    method: 'devsq',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'GEOMEAN': {\n    method: 'geomean',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'HARMEAN': {\n    method: 'harmean',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'CORREL': {\n    method: 'correl',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'RSQ': {\n    method: 'rsq',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'COVARIANCE.P': {\n    method: 'covariancep',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'COVARIANCE.S': {\n    method: 'covariances',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'Z.TEST': {\n    method: 'ztest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true\n    }]\n  },\n  'F.TEST': {\n    method: 'ftest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'STEYX': {\n    method: 'steyx',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SLOPE': {\n    method: 'slope',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'CHISQ.TEST': {\n    method: 'chisqtest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'T.TEST': {\n    method: 'ttest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 2\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 3\n    }]\n  },\n  'SKEW': {\n    method: 'skew',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'SKEW.P': {\n    method: 'skewp',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  }\n};\nStatisticalAggregationPlugin.aliases = {\n  COVAR: 'COVARIANCE.P',\n  FTEST: 'F.TEST',\n  PEARSON: 'CORREL',\n  ZTEST: 'Z.TEST',\n  CHITEST: 'CHISQ.TEST',\n  TTEST: 'T.TEST',\n  COVARIANCEP: 'COVARIANCE.P',\n  COVARIANCES: 'COVARIANCE.S',\n  SKEWP: 'SKEW.P'\n};\nfunction parseTwoArrays(dataX, dataY) {\n  const xit = dataX.iterateValuesFromTopLeftCorner();\n  const yit = dataY.iterateValuesFromTopLeftCorner();\n  let x, y;\n  const arrX = [];\n  const arrY = [];\n  while (x = xit.next(), y = yit.next(), !x.done && !y.done) {\n    const xval = x.value;\n    const yval = y.value;\n    if (xval instanceof CellError) {\n      return xval;\n    } else if (yval instanceof CellError) {\n      return yval;\n    } else if (isExtendedNumber(xval) && isExtendedNumber(yval)) {\n      arrX.push(getRawValue(xval));\n      arrY.push(getRawValue(yval));\n    }\n  }\n  return [arrX, arrY];\n}","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","getRawValue","isExtendedNumber","centralF","chisquare","corrcoeff","covariance","geomean","mean","normal","stdev","studentt","sumsqerr","variance","FunctionArgumentType","FunctionPlugin","StatisticalAggregationPlugin","avedev","ast","state","runFunction","args","metadata","coerced","arithmeticHelper","coerceNumbersExactRanges","length","DIV_BY_ZERO","avg","reduce","a","b","Math","abs","devsq","NUM","OneValue","val","ValueSmall","harmean","correl","dataX","dataY","numberOfElements","NA","EqualLength","ret","parseTwoArrays","n","TwoValues","rsq","pow","covariancep","covariances","ztest","range","x","sigma","vals","manyToExactNumbers","valuesFromTopLeftCorner","undefined","cdf","sqrt","ftest","arrX","arrY","vx","vy","r","v","min","steyx","ThreeValues","slope","chisqtest","height","c","width","sum","i","NaN","ttest","tails","type","m","sub","Array","s","t","sx","sy","skew","skewp","implementedFunctions","method","parameters","argumentType","ANY","repeatLastArgs","RANGE","NUMBER","optionalArg","INTEGER","minValue","maxValue","aliases","COVAR","FTEST","PEARSON","ZTEST","CHITEST","TTEST","COVARIANCEP","COVARIANCES","SKEWP","xit","iterateValuesFromTopLeftCorner","yit","y","next","done","xval","value","yval","push"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/StatisticalAggregationPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { getRawValue, isExtendedNumber } from \"../InterpreterValue.mjs\";\nimport { centralF, chisquare, corrcoeff, covariance, geomean, mean, normal, stdev, studentt, sumsqerr, variance } from \"./3rdparty/jstat/jstat.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class StatisticalAggregationPlugin extends FunctionPlugin {\n  avedev(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('AVEDEV'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const avg = mean(coerced);\n      return coerced.reduce((a, b) => a + Math.abs(b - avg), 0) / coerced.length;\n    });\n  }\n  devsq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEVSQ'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return 0;\n      }\n      return sumsqerr(coerced);\n    });\n  }\n  geomean(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GEOMEAN'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.OneValue);\n      }\n      for (const val of coerced) {\n        if (val <= 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n      }\n      return geomean(coerced);\n    });\n  }\n  harmean(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HARMEAN'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.OneValue);\n      }\n      for (const val of coerced) {\n        if (val <= 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n      }\n      return coerced.length / coerced.reduce((a, b) => a + 1 / b, 0);\n    });\n  }\n  correl(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CORREL'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return corrcoeff(ret[0], ret[1]);\n    });\n  }\n  rsq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RSQ'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return Math.pow(corrcoeff(ret[0], ret[1]), 2);\n    });\n  }\n  covariancep(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COVARIANCE.P'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n < 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.OneValue);\n      }\n      if (n === 1) {\n        return 0;\n      }\n      return covariance(ret[0], ret[1]) * (n - 1) / n;\n    });\n  }\n  covariances(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COVARIANCE.S'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return covariance(ret[0], ret[1]);\n    });\n  }\n  ztest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('Z.TEST'), (range, x, sigma) => {\n      const vals = this.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());\n      if (vals instanceof CellError) {\n        return vals;\n      }\n      const n = vals.length;\n      if (sigma === undefined) {\n        if (n < 2) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        sigma = stdev(vals, true);\n      }\n      if (n < 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.OneValue);\n      }\n      if (sigma === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return 1 - normal.cdf((mean(vals) - x) / (sigma / Math.sqrt(n)), 0, 1);\n    });\n  }\n  ftest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.TEST'), (dataX, dataY) => {\n      const arrX = this.arithmeticHelper.manyToExactNumbers(dataX.valuesFromTopLeftCorner());\n      const arrY = this.arithmeticHelper.manyToExactNumbers(dataY.valuesFromTopLeftCorner());\n      if (arrX instanceof CellError) {\n        return arrX;\n      }\n      if (arrY instanceof CellError) {\n        return arrY;\n      }\n      if (arrX.length <= 1 || arrY.length <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const vx = variance(arrX, true);\n      const vy = variance(arrY, true);\n      if (vx === 0 || vy === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const r = vx / vy;\n      const v = centralF.cdf(r, arrX.length - 1, arrY.length - 1);\n      return 2 * Math.min(v, 1 - v);\n    });\n  }\n  steyx(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('STEYX'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 2) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      return Math.sqrt((sumsqerr(ret[0]) - Math.pow(covariance(ret[0], ret[1]) * (n - 1), 2) / sumsqerr(ret[1])) / (n - 2));\n    });\n  }\n  slope(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SLOPE'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return covariance(ret[0], ret[1]) * (n - 1) / sumsqerr(ret[1]);\n    });\n  }\n  chisqtest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.TEST'), (dataX, dataY) => {\n      const r = dataX.height();\n      const c = dataX.width();\n      if (dataY.height() !== r || dataY.width() !== c) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      if (ret[0].length <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      let sum = 0;\n      for (let i = 0; i < ret[0].length; i++) {\n        if (ret[1][i] === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        sum += Math.pow(ret[0][i] - ret[1][i], 2) / ret[1][i];\n      }\n      if (sum < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NaN);\n      }\n      return 1 - chisquare.cdf(sum, r > 1 && c > 1 ? (r - 1) * (c - 1) : r * c - 1);\n    });\n  }\n  ttest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.TEST'), (dataX, dataY, tails, type) => {\n      const arrX = this.arithmeticHelper.manyToExactNumbers(dataX.valuesFromTopLeftCorner());\n      const arrY = this.arithmeticHelper.manyToExactNumbers(dataY.valuesFromTopLeftCorner());\n      if (arrX instanceof CellError) {\n        return arrX;\n      }\n      if (arrY instanceof CellError) {\n        return arrY;\n      }\n      const n = arrX.length;\n      const m = arrY.length;\n      if (type === 1) {\n        if (m !== n) {\n          return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n        }\n        if (n <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const sub = Array(n);\n        for (let i = 0; i < n; i++) {\n          sub[i] = arrX[i] - arrY[i];\n        }\n        const s = stdev(sub, true);\n        if (s === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs(Math.sqrt(n) * mean(sub) / s);\n        return tails * (1 - studentt.cdf(t, n - 1));\n      } else if (type === 2) {\n        if (n <= 1 || m <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const s = (sumsqerr(arrX) + sumsqerr(arrY)) / (n + m - 2);\n        if (s === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs((mean(arrX) - mean(arrY)) / Math.sqrt(s * (1 / n + 1 / m)));\n        return tails * (1 - studentt.cdf(t, n + m - 2));\n      } else {\n        //type === 3\n        if (n <= 1 || m <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const sx = variance(arrX, true);\n        const sy = variance(arrY, true);\n        if (sx === 0 && sy === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs((mean(arrX) - mean(arrY)) / Math.sqrt(sx / n + sy / m));\n        const v = Math.pow(sx / n + sy / m, 2) / (Math.pow(sx / n, 2) / (n - 1) + Math.pow(sy / m, 2) / (m - 1));\n        return tails * (1 - studentt.cdf(t, v));\n      }\n    });\n  }\n  skew(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SKEW'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      const n = coerced.length;\n      if (n < 3) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      const avg = mean(coerced);\n      const s = stdev(coerced, true);\n      if (s === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return coerced.reduce((a, b) => a + Math.pow((b - avg) / s, 3), 0) * n / (n - 1) / (n - 2);\n    });\n  }\n  skewp(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SKEW.P'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      const n = coerced.length;\n      if (n < 3) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      const avg = mean(coerced);\n      const s = stdev(coerced, false);\n      if (s === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return coerced.reduce((a, b) => a + Math.pow((b - avg) / s, 3), 0) / n;\n    });\n  }\n}\nStatisticalAggregationPlugin.implementedFunctions = {\n  'AVEDEV': {\n    method: 'avedev',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'DEVSQ': {\n    method: 'devsq',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'GEOMEAN': {\n    method: 'geomean',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'HARMEAN': {\n    method: 'harmean',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'CORREL': {\n    method: 'correl',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'RSQ': {\n    method: 'rsq',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'COVARIANCE.P': {\n    method: 'covariancep',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'COVARIANCE.S': {\n    method: 'covariances',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'Z.TEST': {\n    method: 'ztest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true\n    }]\n  },\n  'F.TEST': {\n    method: 'ftest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'STEYX': {\n    method: 'steyx',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SLOPE': {\n    method: 'slope',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'CHISQ.TEST': {\n    method: 'chisqtest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'T.TEST': {\n    method: 'ttest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 2\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 3\n    }]\n  },\n  'SKEW': {\n    method: 'skew',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'SKEW.P': {\n    method: 'skewp',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  }\n};\nStatisticalAggregationPlugin.aliases = {\n  COVAR: 'COVARIANCE.P',\n  FTEST: 'F.TEST',\n  PEARSON: 'CORREL',\n  ZTEST: 'Z.TEST',\n  CHITEST: 'CHISQ.TEST',\n  TTEST: 'T.TEST',\n  COVARIANCEP: 'COVARIANCE.P',\n  COVARIANCES: 'COVARIANCE.S',\n  SKEWP: 'SKEW.P'\n};\nfunction parseTwoArrays(dataX, dataY) {\n  const xit = dataX.iterateValuesFromTopLeftCorner();\n  const yit = dataY.iterateValuesFromTopLeftCorner();\n  let x, y;\n  const arrX = [];\n  const arrY = [];\n  while (x = xit.next(), y = yit.next(), !x.done && !y.done) {\n    const xval = x.value;\n    const yval = y.value;\n    if (xval instanceof CellError) {\n      return xval;\n    } else if (yval instanceof CellError) {\n      return yval;\n    } else if (isExtendedNumber(xval) && isExtendedNumber(yval)) {\n      arrX.push(getRawValue(xval));\n      arrY.push(getRawValue(yval));\n    }\n  }\n  return [arrX, arrY];\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AACrD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,yBAAyB;AACvE,SAASC,QAAQ,EAAEC,SAAS,EAAEC,SAAS,EAAEC,UAAU,EAAEC,OAAO,EAAEC,IAAI,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,4BAA4B;AACnJ,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,sBAAsB;AAC3E,OAAO,MAAMC,4BAA4B,SAASD,cAAc,CAAC;EAC/DE,MAAMA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACjB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAGD,IAAI,KAAK;MAC7E,MAAME,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACC,wBAAwB,CAACJ,IAAI,CAAC;MACpE,IAAIE,OAAO,YAAYzB,SAAS,EAAE;QAChC,OAAOyB,OAAO;MAChB;MACA,IAAIA,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;QACxB,OAAO,IAAI5B,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;MAC7C;MACA,MAAMC,GAAG,GAAGpB,IAAI,CAACe,OAAO,CAAC;MACzB,OAAOA,OAAO,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACF,CAAC,GAAGH,GAAG,CAAC,EAAE,CAAC,CAAC,GAAGL,OAAO,CAACG,MAAM;IAC5E,CAAC,CAAC;EACJ;EACAQ,KAAKA,CAAChB,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,GAAGD,IAAI,KAAK;MAC5E,MAAME,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACC,wBAAwB,CAACJ,IAAI,CAAC;MACpE,IAAIE,OAAO,YAAYzB,SAAS,EAAE;QAChC,OAAOyB,OAAO;MAChB;MACA,IAAIA,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;QACxB,OAAO,CAAC;MACV;MACA,OAAOd,QAAQ,CAACW,OAAO,CAAC;IAC1B,CAAC,CAAC;EACJ;EACAhB,OAAOA,CAACW,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,GAAGD,IAAI,KAAK;MAC9E,MAAME,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACC,wBAAwB,CAACJ,IAAI,CAAC;MACpE,IAAIE,OAAO,YAAYzB,SAAS,EAAE;QAChC,OAAOyB,OAAO;MAChB;MACA,IAAIA,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;QACxB,OAAO,IAAI5B,SAAS,CAACC,SAAS,CAACoC,GAAG,EAAEnC,YAAY,CAACoC,QAAQ,CAAC;MAC5D;MACA,KAAK,MAAMC,GAAG,IAAId,OAAO,EAAE;QACzB,IAAIc,GAAG,IAAI,CAAC,EAAE;UACZ,OAAO,IAAIvC,SAAS,CAACC,SAAS,CAACoC,GAAG,EAAEnC,YAAY,CAACsC,UAAU,CAAC;QAC9D;MACF;MACA,OAAO/B,OAAO,CAACgB,OAAO,CAAC;IACzB,CAAC,CAAC;EACJ;EACAgB,OAAOA,CAACrB,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,GAAGD,IAAI,KAAK;MAC9E,MAAME,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACC,wBAAwB,CAACJ,IAAI,CAAC;MACpE,IAAIE,OAAO,YAAYzB,SAAS,EAAE;QAChC,OAAOyB,OAAO;MAChB;MACA,IAAIA,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;QACxB,OAAO,IAAI5B,SAAS,CAACC,SAAS,CAACoC,GAAG,EAAEnC,YAAY,CAACoC,QAAQ,CAAC;MAC5D;MACA,KAAK,MAAMC,GAAG,IAAId,OAAO,EAAE;QACzB,IAAIc,GAAG,IAAI,CAAC,EAAE;UACZ,OAAO,IAAIvC,SAAS,CAACC,SAAS,CAACoC,GAAG,EAAEnC,YAAY,CAACsC,UAAU,CAAC;QAC9D;MACF;MACA,OAAOf,OAAO,CAACG,MAAM,GAAGH,OAAO,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAG,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC;EACJ;EACAS,MAAMA,CAACtB,GAAG,EAAEC,KAAK,EAAE;IACjB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,KAAK;MAClF,IAAID,KAAK,CAACE,gBAAgB,CAAC,CAAC,KAAKD,KAAK,CAACC,gBAAgB,CAAC,CAAC,EAAE;QACzD,OAAO,IAAI7C,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAAC6C,WAAW,CAAC;MAC9D;MACA,MAAMC,GAAG,GAAGC,cAAc,CAACN,KAAK,EAAEC,KAAK,CAAC;MACxC,IAAII,GAAG,YAAYhD,SAAS,EAAE;QAC5B,OAAOgD,GAAG;MACZ;MACA,MAAME,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,CAACpB,MAAM;MACvB,IAAIsB,CAAC,IAAI,CAAC,EAAE;QACV,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;MACrE;MACA,OAAO5C,SAAS,CAACyC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;EACAI,GAAGA,CAAChC,GAAG,EAAEC,KAAK,EAAE;IACd,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,KAAK;MAC/E,IAAID,KAAK,CAACE,gBAAgB,CAAC,CAAC,KAAKD,KAAK,CAACC,gBAAgB,CAAC,CAAC,EAAE;QACzD,OAAO,IAAI7C,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAAC6C,WAAW,CAAC;MAC9D;MACA,MAAMC,GAAG,GAAGC,cAAc,CAACN,KAAK,EAAEC,KAAK,CAAC;MACxC,IAAII,GAAG,YAAYhD,SAAS,EAAE;QAC5B,OAAOgD,GAAG;MACZ;MACA,MAAME,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,CAACpB,MAAM;MACvB,IAAIsB,CAAC,IAAI,CAAC,EAAE;QACV,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;MACrE;MACA,OAAOjB,IAAI,CAACmB,GAAG,CAAC9C,SAAS,CAACyC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC;EACJ;EACAM,WAAWA,CAAClC,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,KAAK;MACxF,IAAID,KAAK,CAACE,gBAAgB,CAAC,CAAC,KAAKD,KAAK,CAACC,gBAAgB,CAAC,CAAC,EAAE;QACzD,OAAO,IAAI7C,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAAC6C,WAAW,CAAC;MAC9D;MACA,MAAMC,GAAG,GAAGC,cAAc,CAACN,KAAK,EAAEC,KAAK,CAAC;MACxC,IAAII,GAAG,YAAYhD,SAAS,EAAE;QAC5B,OAAOgD,GAAG;MACZ;MACA,MAAME,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,CAACpB,MAAM;MACvB,IAAIsB,CAAC,GAAG,CAAC,EAAE;QACT,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACoC,QAAQ,CAAC;MACpE;MACA,IAAIY,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,CAAC;MACV;MACA,OAAO1C,UAAU,CAACwC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIE,CAAC,GAAG,CAAC,CAAC,GAAGA,CAAC;IACjD,CAAC,CAAC;EACJ;EACAK,WAAWA,CAACnC,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,KAAK;MACxF,IAAID,KAAK,CAACE,gBAAgB,CAAC,CAAC,KAAKD,KAAK,CAACC,gBAAgB,CAAC,CAAC,EAAE;QACzD,OAAO,IAAI7C,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAAC6C,WAAW,CAAC;MAC9D;MACA,MAAMC,GAAG,GAAGC,cAAc,CAACN,KAAK,EAAEC,KAAK,CAAC;MACxC,IAAII,GAAG,YAAYhD,SAAS,EAAE;QAC5B,OAAOgD,GAAG;MACZ;MACA,MAAME,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,CAACpB,MAAM;MACvB,IAAIsB,CAAC,IAAI,CAAC,EAAE;QACV,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;MACrE;MACA,OAAO3C,UAAU,CAACwC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;EACJ;EACAQ,KAAKA,CAACpC,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAACiC,KAAK,EAAEC,CAAC,EAAEC,KAAK,KAAK;MACrF,MAAMC,IAAI,GAAG,IAAI,CAAClC,gBAAgB,CAACmC,kBAAkB,CAACJ,KAAK,CAACK,uBAAuB,CAAC,CAAC,CAAC;MACtF,IAAIF,IAAI,YAAY5D,SAAS,EAAE;QAC7B,OAAO4D,IAAI;MACb;MACA,MAAMV,CAAC,GAAGU,IAAI,CAAChC,MAAM;MACrB,IAAI+B,KAAK,KAAKI,SAAS,EAAE;QACvB,IAAIb,CAAC,GAAG,CAAC,EAAE;UACT,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;QACrE;QACAQ,KAAK,GAAG/C,KAAK,CAACgD,IAAI,EAAE,IAAI,CAAC;MAC3B;MACA,IAAIV,CAAC,GAAG,CAAC,EAAE;QACT,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAACoC,QAAQ,CAAC;MAC3D;MACA,IAAIqB,KAAK,KAAK,CAAC,EAAE;QACf,OAAO,IAAI3D,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;MAC7C;MACA,OAAO,CAAC,GAAGlB,MAAM,CAACqD,GAAG,CAAC,CAACtD,IAAI,CAACkD,IAAI,CAAC,GAAGF,CAAC,KAAKC,KAAK,GAAGzB,IAAI,CAAC+B,IAAI,CAACf,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACxE,CAAC,CAAC;EACJ;EACAgB,KAAKA,CAAC9C,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,KAAK;MAClF,MAAMuB,IAAI,GAAG,IAAI,CAACzC,gBAAgB,CAACmC,kBAAkB,CAAClB,KAAK,CAACmB,uBAAuB,CAAC,CAAC,CAAC;MACtF,MAAMM,IAAI,GAAG,IAAI,CAAC1C,gBAAgB,CAACmC,kBAAkB,CAACjB,KAAK,CAACkB,uBAAuB,CAAC,CAAC,CAAC;MACtF,IAAIK,IAAI,YAAYnE,SAAS,EAAE;QAC7B,OAAOmE,IAAI;MACb;MACA,IAAIC,IAAI,YAAYpE,SAAS,EAAE;QAC7B,OAAOoE,IAAI;MACb;MACA,IAAID,IAAI,CAACvC,MAAM,IAAI,CAAC,IAAIwC,IAAI,CAACxC,MAAM,IAAI,CAAC,EAAE;QACxC,OAAO,IAAI5B,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;MAC7C;MACA,MAAMwC,EAAE,GAAGtD,QAAQ,CAACoD,IAAI,EAAE,IAAI,CAAC;MAC/B,MAAMG,EAAE,GAAGvD,QAAQ,CAACqD,IAAI,EAAE,IAAI,CAAC;MAC/B,IAAIC,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAK,CAAC,EAAE;QACxB,OAAO,IAAItE,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;MAC7C;MACA,MAAM0C,CAAC,GAAGF,EAAE,GAAGC,EAAE;MACjB,MAAME,CAAC,GAAGnE,QAAQ,CAAC2D,GAAG,CAACO,CAAC,EAAEJ,IAAI,CAACvC,MAAM,GAAG,CAAC,EAAEwC,IAAI,CAACxC,MAAM,GAAG,CAAC,CAAC;MAC3D,OAAO,CAAC,GAAGM,IAAI,CAACuC,GAAG,CAACD,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC;IAC/B,CAAC,CAAC;EACJ;EACAE,KAAKA,CAACtD,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,KAAK;MACjF,IAAID,KAAK,CAACE,gBAAgB,CAAC,CAAC,KAAKD,KAAK,CAACC,gBAAgB,CAAC,CAAC,EAAE;QACzD,OAAO,IAAI7C,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAAC6C,WAAW,CAAC;MAC9D;MACA,MAAMC,GAAG,GAAGC,cAAc,CAACN,KAAK,EAAEC,KAAK,CAAC;MACxC,IAAII,GAAG,YAAYhD,SAAS,EAAE;QAC5B,OAAOgD,GAAG;MACZ;MACA,MAAME,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,CAACpB,MAAM;MACvB,IAAIsB,CAAC,IAAI,CAAC,EAAE;QACV,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACyE,WAAW,CAAC;MACvE;MACA,OAAOzC,IAAI,CAAC+B,IAAI,CAAC,CAACnD,QAAQ,CAACkC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGd,IAAI,CAACmB,GAAG,CAAC7C,UAAU,CAACwC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGpC,QAAQ,CAACkC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKE,CAAC,GAAG,CAAC,CAAC,CAAC;IACvH,CAAC,CAAC;EACJ;EACA0B,KAAKA,CAACxD,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,KAAK;MACjF,IAAID,KAAK,CAACE,gBAAgB,CAAC,CAAC,KAAKD,KAAK,CAACC,gBAAgB,CAAC,CAAC,EAAE;QACzD,OAAO,IAAI7C,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAAC6C,WAAW,CAAC;MAC9D;MACA,MAAMC,GAAG,GAAGC,cAAc,CAACN,KAAK,EAAEC,KAAK,CAAC;MACxC,IAAII,GAAG,YAAYhD,SAAS,EAAE;QAC5B,OAAOgD,GAAG;MACZ;MACA,MAAME,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,CAACpB,MAAM;MACvB,IAAIsB,CAAC,IAAI,CAAC,EAAE;QACV,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;MACrE;MACA,OAAO3C,UAAU,CAACwC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIE,CAAC,GAAG,CAAC,CAAC,GAAGpC,QAAQ,CAACkC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC;EACJ;EACA6B,SAASA,CAACzD,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,KAAK;MACtF,MAAM2B,CAAC,GAAG5B,KAAK,CAACmC,MAAM,CAAC,CAAC;MACxB,MAAMC,CAAC,GAAGpC,KAAK,CAACqC,KAAK,CAAC,CAAC;MACvB,IAAIpC,KAAK,CAACkC,MAAM,CAAC,CAAC,KAAKP,CAAC,IAAI3B,KAAK,CAACoC,KAAK,CAAC,CAAC,KAAKD,CAAC,EAAE;QAC/C,OAAO,IAAI/E,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAAC6C,WAAW,CAAC;MAC9D;MACA,MAAMC,GAAG,GAAGC,cAAc,CAACN,KAAK,EAAEC,KAAK,CAAC;MACxC,IAAII,GAAG,YAAYhD,SAAS,EAAE;QAC5B,OAAOgD,GAAG;MACZ;MACA,IAAIA,GAAG,CAAC,CAAC,CAAC,CAACpB,MAAM,IAAI,CAAC,EAAE;QACtB,OAAO,IAAI5B,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;MACrE;MACA,IAAI8B,GAAG,GAAG,CAAC;MACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,GAAG,CAAC,CAAC,CAAC,CAACpB,MAAM,EAAEsD,CAAC,EAAE,EAAE;QACtC,IAAIlC,GAAG,CAAC,CAAC,CAAC,CAACkC,CAAC,CAAC,KAAK,CAAC,EAAE;UACnB,OAAO,IAAIlF,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;QAC7C;QACAoD,GAAG,IAAI/C,IAAI,CAACmB,GAAG,CAACL,GAAG,CAAC,CAAC,CAAC,CAACkC,CAAC,CAAC,GAAGlC,GAAG,CAAC,CAAC,CAAC,CAACkC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGlC,GAAG,CAAC,CAAC,CAAC,CAACkC,CAAC,CAAC;MACvD;MACA,IAAID,GAAG,GAAG,CAAC,EAAE;QACX,OAAO,IAAIjF,SAAS,CAACC,SAAS,CAACoC,GAAG,EAAEnC,YAAY,CAACiF,GAAG,CAAC;MACvD;MACA,OAAO,CAAC,GAAG7E,SAAS,CAAC0D,GAAG,CAACiB,GAAG,EAAEV,CAAC,GAAG,CAAC,IAAIQ,CAAC,GAAG,CAAC,GAAG,CAACR,CAAC,GAAG,CAAC,KAAKQ,CAAC,GAAG,CAAC,CAAC,GAAGR,CAAC,GAAGQ,CAAC,GAAG,CAAC,CAAC;IAC/E,CAAC,CAAC;EACJ;EACAK,KAAKA,CAAChE,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAACmB,KAAK,EAAEC,KAAK,EAAEyC,KAAK,EAAEC,IAAI,KAAK;MAC/F,MAAMnB,IAAI,GAAG,IAAI,CAACzC,gBAAgB,CAACmC,kBAAkB,CAAClB,KAAK,CAACmB,uBAAuB,CAAC,CAAC,CAAC;MACtF,MAAMM,IAAI,GAAG,IAAI,CAAC1C,gBAAgB,CAACmC,kBAAkB,CAACjB,KAAK,CAACkB,uBAAuB,CAAC,CAAC,CAAC;MACtF,IAAIK,IAAI,YAAYnE,SAAS,EAAE;QAC7B,OAAOmE,IAAI;MACb;MACA,IAAIC,IAAI,YAAYpE,SAAS,EAAE;QAC7B,OAAOoE,IAAI;MACb;MACA,MAAMlB,CAAC,GAAGiB,IAAI,CAACvC,MAAM;MACrB,MAAM2D,CAAC,GAAGnB,IAAI,CAACxC,MAAM;MACrB,IAAI0D,IAAI,KAAK,CAAC,EAAE;QACd,IAAIC,CAAC,KAAKrC,CAAC,EAAE;UACX,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC6C,EAAE,EAAE5C,YAAY,CAAC6C,WAAW,CAAC;QAC9D;QACA,IAAIG,CAAC,IAAI,CAAC,EAAE;UACV,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;QACrE;QACA,MAAMqC,GAAG,GAAGC,KAAK,CAACvC,CAAC,CAAC;QACpB,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,CAAC,EAAEgC,CAAC,EAAE,EAAE;UAC1BM,GAAG,CAACN,CAAC,CAAC,GAAGf,IAAI,CAACe,CAAC,CAAC,GAAGd,IAAI,CAACc,CAAC,CAAC;QAC5B;QACA,MAAMQ,CAAC,GAAG9E,KAAK,CAAC4E,GAAG,EAAE,IAAI,CAAC;QAC1B,IAAIE,CAAC,KAAK,CAAC,EAAE;UACX,OAAO,IAAI1F,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;QAC7C;QACA,MAAM8D,CAAC,GAAGzD,IAAI,CAACC,GAAG,CAACD,IAAI,CAAC+B,IAAI,CAACf,CAAC,CAAC,GAAGxC,IAAI,CAAC8E,GAAG,CAAC,GAAGE,CAAC,CAAC;QAChD,OAAOL,KAAK,IAAI,CAAC,GAAGxE,QAAQ,CAACmD,GAAG,CAAC2B,CAAC,EAAEzC,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAAC,MAAM,IAAIoC,IAAI,KAAK,CAAC,EAAE;QACrB,IAAIpC,CAAC,IAAI,CAAC,IAAIqC,CAAC,IAAI,CAAC,EAAE;UACpB,OAAO,IAAIvF,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;QACrE;QACA,MAAMuC,CAAC,GAAG,CAAC5E,QAAQ,CAACqD,IAAI,CAAC,GAAGrD,QAAQ,CAACsD,IAAI,CAAC,KAAKlB,CAAC,GAAGqC,CAAC,GAAG,CAAC,CAAC;QACzD,IAAIG,CAAC,KAAK,CAAC,EAAE;UACX,OAAO,IAAI1F,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;QAC7C;QACA,MAAM8D,CAAC,GAAGzD,IAAI,CAACC,GAAG,CAAC,CAACzB,IAAI,CAACyD,IAAI,CAAC,GAAGzD,IAAI,CAAC0D,IAAI,CAAC,IAAIlC,IAAI,CAAC+B,IAAI,CAACyB,CAAC,IAAI,CAAC,GAAGxC,CAAC,GAAG,CAAC,GAAGqC,CAAC,CAAC,CAAC,CAAC;QAC9E,OAAOF,KAAK,IAAI,CAAC,GAAGxE,QAAQ,CAACmD,GAAG,CAAC2B,CAAC,EAAEzC,CAAC,GAAGqC,CAAC,GAAG,CAAC,CAAC,CAAC;MACjD,CAAC,MAAM;QACL;QACA,IAAIrC,CAAC,IAAI,CAAC,IAAIqC,CAAC,IAAI,CAAC,EAAE;UACpB,OAAO,IAAIvF,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACiD,SAAS,CAAC;QACrE;QACA,MAAMyC,EAAE,GAAG7E,QAAQ,CAACoD,IAAI,EAAE,IAAI,CAAC;QAC/B,MAAM0B,EAAE,GAAG9E,QAAQ,CAACqD,IAAI,EAAE,IAAI,CAAC;QAC/B,IAAIwB,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAK,CAAC,EAAE;UACxB,OAAO,IAAI7F,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;QAC7C;QACA,MAAM8D,CAAC,GAAGzD,IAAI,CAACC,GAAG,CAAC,CAACzB,IAAI,CAACyD,IAAI,CAAC,GAAGzD,IAAI,CAAC0D,IAAI,CAAC,IAAIlC,IAAI,CAAC+B,IAAI,CAAC2B,EAAE,GAAG1C,CAAC,GAAG2C,EAAE,GAAGN,CAAC,CAAC,CAAC;QAC1E,MAAMf,CAAC,GAAGtC,IAAI,CAACmB,GAAG,CAACuC,EAAE,GAAG1C,CAAC,GAAG2C,EAAE,GAAGN,CAAC,EAAE,CAAC,CAAC,IAAIrD,IAAI,CAACmB,GAAG,CAACuC,EAAE,GAAG1C,CAAC,EAAE,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,GAAGhB,IAAI,CAACmB,GAAG,CAACwC,EAAE,GAAGN,CAAC,EAAE,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,CAAC;QACxG,OAAOF,KAAK,IAAI,CAAC,GAAGxE,QAAQ,CAACmD,GAAG,CAAC2B,CAAC,EAAEnB,CAAC,CAAC,CAAC;MACzC;IACF,CAAC,CAAC;EACJ;EACAsB,IAAIA,CAAC1E,GAAG,EAAEC,KAAK,EAAE;IACf,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,GAAGD,IAAI,KAAK;MAC3E,MAAME,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACC,wBAAwB,CAACJ,IAAI,CAAC;MACpE,IAAIE,OAAO,YAAYzB,SAAS,EAAE;QAChC,OAAOyB,OAAO;MAChB;MACA,MAAMyB,CAAC,GAAGzB,OAAO,CAACG,MAAM;MACxB,IAAIsB,CAAC,GAAG,CAAC,EAAE;QACT,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACyE,WAAW,CAAC;MACvE;MACA,MAAM7C,GAAG,GAAGpB,IAAI,CAACe,OAAO,CAAC;MACzB,MAAMiE,CAAC,GAAG9E,KAAK,CAACa,OAAO,EAAE,IAAI,CAAC;MAC9B,IAAIiE,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,IAAI1F,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;MAC7C;MACA,OAAOJ,OAAO,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGE,IAAI,CAACmB,GAAG,CAAC,CAACpB,CAAC,GAAGH,GAAG,IAAI4D,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGxC,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC;IAC5F,CAAC,CAAC;EACJ;EACA6C,KAAKA,CAAC3E,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAGD,IAAI,KAAK;MAC7E,MAAME,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACC,wBAAwB,CAACJ,IAAI,CAAC;MACpE,IAAIE,OAAO,YAAYzB,SAAS,EAAE;QAChC,OAAOyB,OAAO;MAChB;MACA,MAAMyB,CAAC,GAAGzB,OAAO,CAACG,MAAM;MACxB,IAAIsB,CAAC,GAAG,CAAC,EAAE;QACT,OAAO,IAAIlD,SAAS,CAACC,SAAS,CAAC4B,WAAW,EAAE3B,YAAY,CAACyE,WAAW,CAAC;MACvE;MACA,MAAM7C,GAAG,GAAGpB,IAAI,CAACe,OAAO,CAAC;MACzB,MAAMiE,CAAC,GAAG9E,KAAK,CAACa,OAAO,EAAE,KAAK,CAAC;MAC/B,IAAIiE,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,IAAI1F,SAAS,CAACC,SAAS,CAAC4B,WAAW,CAAC;MAC7C;MACA,OAAOJ,OAAO,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGE,IAAI,CAACmB,GAAG,CAAC,CAACpB,CAAC,GAAGH,GAAG,IAAI4D,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGxC,CAAC;IACxE,CAAC,CAAC;EACJ;AACF;AACAhC,4BAA4B,CAAC8E,oBAAoB,GAAG;EAClD,QAAQ,EAAE;IACRC,MAAM,EAAE,QAAQ;IAChBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACoF;IACrC,CAAC,CAAC;IACFC,cAAc,EAAE;EAClB,CAAC;EACD,OAAO,EAAE;IACPJ,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACoF;IACrC,CAAC,CAAC;IACFC,cAAc,EAAE;EAClB,CAAC;EACD,SAAS,EAAE;IACTJ,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACoF;IACrC,CAAC,CAAC;IACFC,cAAc,EAAE;EAClB,CAAC;EACD,SAAS,EAAE;IACTJ,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACoF;IACrC,CAAC,CAAC;IACFC,cAAc,EAAE;EAClB,CAAC;EACD,QAAQ,EAAE;IACRJ,MAAM,EAAE,QAAQ;IAChBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC;EACH,CAAC;EACD,KAAK,EAAE;IACLL,MAAM,EAAE,KAAK;IACbC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC;EACH,CAAC;EACD,cAAc,EAAE;IACdL,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC;EACH,CAAC;EACD,cAAc,EAAE;IACdL,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC;EACH,CAAC;EACD,QAAQ,EAAE;IACRL,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACuF;IACrC,CAAC,EAAE;MACDJ,YAAY,EAAEnF,oBAAoB,CAACuF,MAAM;MACzCC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACD,QAAQ,EAAE;IACRP,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACPL,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACPL,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC;EACH,CAAC;EACD,YAAY,EAAE;IACZL,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC;EACH,CAAC;EACD,QAAQ,EAAE;IACRL,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACsF;IACrC,CAAC,EAAE;MACDH,YAAY,EAAEnF,oBAAoB,CAACyF,OAAO;MAC1CC,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEnF,oBAAoB,CAACyF,OAAO;MAC1CC,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,MAAM,EAAE;IACNV,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACoF;IACrC,CAAC,CAAC;IACFC,cAAc,EAAE;EAClB,CAAC;EACD,QAAQ,EAAE;IACRJ,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnF,oBAAoB,CAACoF;IACrC,CAAC,CAAC;IACFC,cAAc,EAAE;EAClB;AACF,CAAC;AACDnF,4BAA4B,CAAC0F,OAAO,GAAG;EACrCC,KAAK,EAAE,cAAc;EACrBC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,QAAQ;EACjBC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,YAAY;EACrBC,KAAK,EAAE,QAAQ;EACfC,WAAW,EAAE,cAAc;EAC3BC,WAAW,EAAE,cAAc;EAC3BC,KAAK,EAAE;AACT,CAAC;AACD,SAASpE,cAAcA,CAACN,KAAK,EAAEC,KAAK,EAAE;EACpC,MAAM0E,GAAG,GAAG3E,KAAK,CAAC4E,8BAA8B,CAAC,CAAC;EAClD,MAAMC,GAAG,GAAG5E,KAAK,CAAC2E,8BAA8B,CAAC,CAAC;EAClD,IAAI7D,CAAC,EAAE+D,CAAC;EACR,MAAMtD,IAAI,GAAG,EAAE;EACf,MAAMC,IAAI,GAAG,EAAE;EACf,OAAOV,CAAC,GAAG4D,GAAG,CAACI,IAAI,CAAC,CAAC,EAAED,CAAC,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,EAAE,CAAChE,CAAC,CAACiE,IAAI,IAAI,CAACF,CAAC,CAACE,IAAI,EAAE;IACzD,MAAMC,IAAI,GAAGlE,CAAC,CAACmE,KAAK;IACpB,MAAMC,IAAI,GAAGL,CAAC,CAACI,KAAK;IACpB,IAAID,IAAI,YAAY5H,SAAS,EAAE;MAC7B,OAAO4H,IAAI;IACb,CAAC,MAAM,IAAIE,IAAI,YAAY9H,SAAS,EAAE;MACpC,OAAO8H,IAAI;IACb,CAAC,MAAM,IAAI1H,gBAAgB,CAACwH,IAAI,CAAC,IAAIxH,gBAAgB,CAAC0H,IAAI,CAAC,EAAE;MAC3D3D,IAAI,CAAC4D,IAAI,CAAC5H,WAAW,CAACyH,IAAI,CAAC,CAAC;MAC5BxD,IAAI,CAAC2D,IAAI,CAAC5H,WAAW,CAAC2H,IAAI,CAAC,CAAC;IAC9B;EACF;EACA,OAAO,CAAC3D,IAAI,EAAEC,IAAI,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}