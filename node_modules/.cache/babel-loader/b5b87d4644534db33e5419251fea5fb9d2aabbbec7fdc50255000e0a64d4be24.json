{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { InvalidArgumentsError } from \"./errors.mjs\";\nexport function validateAsSheet(sheet) {\n  if (!Array.isArray(sheet)) {\n    throw new InvalidArgumentsError('an array of arrays.');\n  }\n  for (let i = 0; i < sheet.length; i++) {\n    if (!Array.isArray(sheet[i])) {\n      throw new InvalidArgumentsError('an array of arrays.');\n    }\n  }\n}\n/**\r\n * Returns actual width, height and fill ratio of a sheet\r\n *\r\n * @param sheet - two-dimmensional array sheet representation\r\n */\nexport function findBoundaries(sheet) {\n  let width = 0;\n  let height = 0;\n  let cellsCount = 0;\n  for (let currentRow = 0; currentRow < sheet.length; currentRow++) {\n    let currentRowWidth = 0;\n    for (let currentCol = 0; currentCol < sheet[currentRow].length; currentCol++) {\n      const currentValue = sheet[currentRow][currentCol];\n      if (currentValue === undefined || currentValue === null) {\n        continue;\n      }\n      currentRowWidth = currentCol + 1;\n      ++cellsCount;\n    }\n    width = Math.max(width, currentRowWidth);\n    if (currentRowWidth > 0) {\n      height = currentRow + 1;\n    }\n  }\n  const sheetSize = width * height;\n  return {\n    height: height,\n    width: width,\n    fill: sheetSize === 0 ? 0 : cellsCount / sheetSize\n  };\n}","map":{"version":3,"names":["InvalidArgumentsError","validateAsSheet","sheet","Array","isArray","i","length","findBoundaries","width","height","cellsCount","currentRow","currentRowWidth","currentCol","currentValue","undefined","Math","max","sheetSize","fill"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/Sheet.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { InvalidArgumentsError } from \"./errors.mjs\";\nexport function validateAsSheet(sheet) {\n  if (!Array.isArray(sheet)) {\n    throw new InvalidArgumentsError('an array of arrays.');\n  }\n  for (let i = 0; i < sheet.length; i++) {\n    if (!Array.isArray(sheet[i])) {\n      throw new InvalidArgumentsError('an array of arrays.');\n    }\n  }\n}\n/**\r\n * Returns actual width, height and fill ratio of a sheet\r\n *\r\n * @param sheet - two-dimmensional array sheet representation\r\n */\nexport function findBoundaries(sheet) {\n  let width = 0;\n  let height = 0;\n  let cellsCount = 0;\n  for (let currentRow = 0; currentRow < sheet.length; currentRow++) {\n    let currentRowWidth = 0;\n    for (let currentCol = 0; currentCol < sheet[currentRow].length; currentCol++) {\n      const currentValue = sheet[currentRow][currentCol];\n      if (currentValue === undefined || currentValue === null) {\n        continue;\n      }\n      currentRowWidth = currentCol + 1;\n      ++cellsCount;\n    }\n    width = Math.max(width, currentRowWidth);\n    if (currentRowWidth > 0) {\n      height = currentRow + 1;\n    }\n  }\n  const sheetSize = width * height;\n  return {\n    height: height,\n    width: width,\n    fill: sheetSize === 0 ? 0 : cellsCount / sheetSize\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,qBAAqB,QAAQ,cAAc;AACpD,OAAO,SAASC,eAAeA,CAACC,KAAK,EAAE;EACrC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIF,qBAAqB,CAAC,qBAAqB,CAAC;EACxD;EACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAI,CAACF,KAAK,CAACC,OAAO,CAACF,KAAK,CAACG,CAAC,CAAC,CAAC,EAAE;MAC5B,MAAM,IAAIL,qBAAqB,CAAC,qBAAqB,CAAC;IACxD;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,cAAcA,CAACL,KAAK,EAAE;EACpC,IAAIM,KAAK,GAAG,CAAC;EACb,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,UAAU,GAAG,CAAC;EAClB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAGT,KAAK,CAACI,MAAM,EAAEK,UAAU,EAAE,EAAE;IAChE,IAAIC,eAAe,GAAG,CAAC;IACvB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAGX,KAAK,CAACS,UAAU,CAAC,CAACL,MAAM,EAAEO,UAAU,EAAE,EAAE;MAC5E,MAAMC,YAAY,GAAGZ,KAAK,CAACS,UAAU,CAAC,CAACE,UAAU,CAAC;MAClD,IAAIC,YAAY,KAAKC,SAAS,IAAID,YAAY,KAAK,IAAI,EAAE;QACvD;MACF;MACAF,eAAe,GAAGC,UAAU,GAAG,CAAC;MAChC,EAAEH,UAAU;IACd;IACAF,KAAK,GAAGQ,IAAI,CAACC,GAAG,CAACT,KAAK,EAAEI,eAAe,CAAC;IACxC,IAAIA,eAAe,GAAG,CAAC,EAAE;MACvBH,MAAM,GAAGE,UAAU,GAAG,CAAC;IACzB;EACF;EACA,MAAMO,SAAS,GAAGV,KAAK,GAAGC,MAAM;EAChC,OAAO;IACLA,MAAM,EAAEA,MAAM;IACdD,KAAK,EAAEA,KAAK;IACZW,IAAI,EAAED,SAAS,KAAK,CAAC,GAAG,CAAC,GAAGR,UAAU,GAAGQ;EAC3C,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}