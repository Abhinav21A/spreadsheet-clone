{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { ArraySize } from \"./ArraySize.mjs\";\nimport { EmptyValue } from \"./interpreter/InterpreterValue.mjs\";\nimport { SimpleRangeValue } from \"./SimpleRangeValue.mjs\";\nexport class NotComputedArray {\n  constructor(size) {\n    this.size = size;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  get(col, row) {\n    throw Error('Array not computed yet.');\n  }\n  simpleRangeValue() {\n    throw Error('Array not computed yet.');\n  }\n}\nexport class ArrayValue {\n  constructor(array) {\n    this.size = new ArraySize(array.length > 0 ? array[0].length : 0, array.length);\n    this.array = array;\n    if (this.size.width <= 0 || this.size.height <= 0) {\n      throw Error('Incorrect array size');\n    }\n  }\n  static fromInterpreterValue(value) {\n    if (value instanceof SimpleRangeValue) {\n      return new ArrayValue(value.data);\n    } else {\n      return new ArrayValue([[value]]);\n    }\n  }\n  simpleRangeValue() {\n    return SimpleRangeValue.onlyValues(this.array);\n  }\n  addRows(aboveRow, numberOfRows) {\n    this.array.splice(aboveRow, 0, ...this.nullArrays(numberOfRows, this.width()));\n    this.size.height += numberOfRows;\n  }\n  addColumns(aboveColumn, numberOfColumns) {\n    for (let i = 0; i < this.height(); i++) {\n      this.array[i].splice(aboveColumn, 0, ...new Array(numberOfColumns).fill(EmptyValue));\n    }\n    this.size.width += numberOfColumns;\n  }\n  removeRows(startRow, endRow) {\n    if (this.outOfBound(0, startRow) || this.outOfBound(0, endRow)) {\n      throw Error('Array index out of bound');\n    }\n    const numberOfRows = endRow - startRow + 1;\n    this.array.splice(startRow, numberOfRows);\n    this.size.height -= numberOfRows;\n  }\n  removeColumns(leftmostColumn, rightmostColumn) {\n    if (this.outOfBound(leftmostColumn, 0) || this.outOfBound(rightmostColumn, 0)) {\n      throw Error('Array index out of bound');\n    }\n    const numberOfColumns = rightmostColumn - leftmostColumn + 1;\n    for (const row of this.array) {\n      row.splice(leftmostColumn, numberOfColumns);\n    }\n    this.size.width -= numberOfColumns;\n  }\n  nullArrays(count, size) {\n    const result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(new Array(size).fill(EmptyValue));\n    }\n    return result;\n  }\n  get(col, row) {\n    if (this.outOfBound(col, row)) {\n      throw Error('Array index out of bound');\n    }\n    return this.array[row][col];\n  }\n  set(col, row, value) {\n    if (this.outOfBound(col, row)) {\n      throw Error('Array index out of bound');\n    }\n    this.array[row][col] = value;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  raw() {\n    return this.array;\n  }\n  resize(newSize) {\n    if (this.height() < newSize.height && isFinite(newSize.height)) {\n      this.addRows(this.height(), newSize.height - this.height());\n    }\n    if (this.height() > newSize.height) {\n      throw Error('Resizing to smaller array');\n    }\n    if (this.width() < newSize.width && isFinite(newSize.width)) {\n      this.addColumns(this.width(), newSize.width - this.width());\n    }\n    if (this.width() > newSize.width) {\n      throw Error('Resizing to smaller array');\n    }\n  }\n  outOfBound(col, row) {\n    return col < 0 || row < 0 || row > this.size.height - 1 || col > this.size.width - 1;\n  }\n}\nexport class ErroredArray {\n  constructor(error, size) {\n    this.error = error;\n    this.size = size;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  get(col, row) {\n    return this.error;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  simpleRangeValue() {\n    return this.error;\n  }\n}","map":{"version":3,"names":["ArraySize","EmptyValue","SimpleRangeValue","NotComputedArray","constructor","size","width","height","get","col","row","Error","simpleRangeValue","ArrayValue","array","length","fromInterpreterValue","value","data","onlyValues","addRows","aboveRow","numberOfRows","splice","nullArrays","addColumns","aboveColumn","numberOfColumns","i","Array","fill","removeRows","startRow","endRow","outOfBound","removeColumns","leftmostColumn","rightmostColumn","count","result","push","set","raw","resize","newSize","isFinite","ErroredArray","error"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/ArrayValue.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { ArraySize } from \"./ArraySize.mjs\";\nimport { EmptyValue } from \"./interpreter/InterpreterValue.mjs\";\nimport { SimpleRangeValue } from \"./SimpleRangeValue.mjs\";\nexport class NotComputedArray {\n  constructor(size) {\n    this.size = size;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  get(col, row) {\n    throw Error('Array not computed yet.');\n  }\n  simpleRangeValue() {\n    throw Error('Array not computed yet.');\n  }\n}\nexport class ArrayValue {\n  constructor(array) {\n    this.size = new ArraySize(array.length > 0 ? array[0].length : 0, array.length);\n    this.array = array;\n    if (this.size.width <= 0 || this.size.height <= 0) {\n      throw Error('Incorrect array size');\n    }\n  }\n  static fromInterpreterValue(value) {\n    if (value instanceof SimpleRangeValue) {\n      return new ArrayValue(value.data);\n    } else {\n      return new ArrayValue([[value]]);\n    }\n  }\n  simpleRangeValue() {\n    return SimpleRangeValue.onlyValues(this.array);\n  }\n  addRows(aboveRow, numberOfRows) {\n    this.array.splice(aboveRow, 0, ...this.nullArrays(numberOfRows, this.width()));\n    this.size.height += numberOfRows;\n  }\n  addColumns(aboveColumn, numberOfColumns) {\n    for (let i = 0; i < this.height(); i++) {\n      this.array[i].splice(aboveColumn, 0, ...new Array(numberOfColumns).fill(EmptyValue));\n    }\n    this.size.width += numberOfColumns;\n  }\n  removeRows(startRow, endRow) {\n    if (this.outOfBound(0, startRow) || this.outOfBound(0, endRow)) {\n      throw Error('Array index out of bound');\n    }\n    const numberOfRows = endRow - startRow + 1;\n    this.array.splice(startRow, numberOfRows);\n    this.size.height -= numberOfRows;\n  }\n  removeColumns(leftmostColumn, rightmostColumn) {\n    if (this.outOfBound(leftmostColumn, 0) || this.outOfBound(rightmostColumn, 0)) {\n      throw Error('Array index out of bound');\n    }\n    const numberOfColumns = rightmostColumn - leftmostColumn + 1;\n    for (const row of this.array) {\n      row.splice(leftmostColumn, numberOfColumns);\n    }\n    this.size.width -= numberOfColumns;\n  }\n  nullArrays(count, size) {\n    const result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(new Array(size).fill(EmptyValue));\n    }\n    return result;\n  }\n  get(col, row) {\n    if (this.outOfBound(col, row)) {\n      throw Error('Array index out of bound');\n    }\n    return this.array[row][col];\n  }\n  set(col, row, value) {\n    if (this.outOfBound(col, row)) {\n      throw Error('Array index out of bound');\n    }\n    this.array[row][col] = value;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  raw() {\n    return this.array;\n  }\n  resize(newSize) {\n    if (this.height() < newSize.height && isFinite(newSize.height)) {\n      this.addRows(this.height(), newSize.height - this.height());\n    }\n    if (this.height() > newSize.height) {\n      throw Error('Resizing to smaller array');\n    }\n    if (this.width() < newSize.width && isFinite(newSize.width)) {\n      this.addColumns(this.width(), newSize.width - this.width());\n    }\n    if (this.width() > newSize.width) {\n      throw Error('Resizing to smaller array');\n    }\n  }\n  outOfBound(col, row) {\n    return col < 0 || row < 0 || row > this.size.height - 1 || col > this.size.width - 1;\n  }\n}\nexport class ErroredArray {\n  constructor(error, size) {\n    this.error = error;\n    this.size = size;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  get(col, row) {\n    return this.error;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  simpleRangeValue() {\n    return this.error;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}