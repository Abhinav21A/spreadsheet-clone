{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nexport class NumberLiteralHelper {\n  constructor(config) {\n    this.config = config;\n    const thousandSeparator = this.config.thousandSeparator === '.' ? `\\\\${this.config.thousandSeparator}` : this.config.thousandSeparator;\n    const decimalSeparator = this.config.decimalSeparator === '.' ? `\\\\${this.config.decimalSeparator}` : this.config.decimalSeparator;\n    this.numberPattern = new RegExp(`^([+-]?((${decimalSeparator}\\\\d+)|(\\\\d+(${thousandSeparator}\\\\d{3,})*(${decimalSeparator}\\\\d*)?)))(e[+-]?\\\\d+)?$`);\n    this.allThousandSeparatorsRegex = new RegExp(`${thousandSeparator}`, 'g');\n  }\n  numericStringToMaybeNumber(input) {\n    if (this.numberPattern.test(input)) {\n      const num = this.numericStringToNumber(input);\n      if (isNaN(num)) {\n        return undefined;\n      }\n      return num;\n    }\n    return undefined;\n  }\n  numericStringToNumber(input) {\n    const normalized = input.replace(this.allThousandSeparatorsRegex, '').replace(this.config.decimalSeparator, '.');\n    return Number(normalized);\n  }\n}","map":{"version":3,"names":["NumberLiteralHelper","constructor","config","thousandSeparator","decimalSeparator","numberPattern","RegExp","allThousandSeparatorsRegex","numericStringToMaybeNumber","input","test","num","numericStringToNumber","isNaN","undefined","normalized","replace","Number"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/NumberLiteralHelper.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nexport class NumberLiteralHelper {\n  constructor(config) {\n    this.config = config;\n    const thousandSeparator = this.config.thousandSeparator === '.' ? `\\\\${this.config.thousandSeparator}` : this.config.thousandSeparator;\n    const decimalSeparator = this.config.decimalSeparator === '.' ? `\\\\${this.config.decimalSeparator}` : this.config.decimalSeparator;\n    this.numberPattern = new RegExp(`^([+-]?((${decimalSeparator}\\\\d+)|(\\\\d+(${thousandSeparator}\\\\d{3,})*(${decimalSeparator}\\\\d*)?)))(e[+-]?\\\\d+)?$`);\n    this.allThousandSeparatorsRegex = new RegExp(`${thousandSeparator}`, 'g');\n  }\n  numericStringToMaybeNumber(input) {\n    if (this.numberPattern.test(input)) {\n      const num = this.numericStringToNumber(input);\n      if (isNaN(num)) {\n        return undefined;\n      }\n      return num;\n    }\n    return undefined;\n  }\n  numericStringToNumber(input) {\n    const normalized = input.replace(this.allThousandSeparatorsRegex, '').replace(this.config.decimalSeparator, '.');\n    return Number(normalized);\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mBAAmB,CAAC;EAC/BC,WAAWA,CAACC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,MAAMC,iBAAiB,GAAG,IAAI,CAACD,MAAM,CAACC,iBAAiB,KAAK,GAAG,GAAG,KAAK,IAAI,CAACD,MAAM,CAACC,iBAAiB,EAAE,GAAG,IAAI,CAACD,MAAM,CAACC,iBAAiB;IACtI,MAAMC,gBAAgB,GAAG,IAAI,CAACF,MAAM,CAACE,gBAAgB,KAAK,GAAG,GAAG,KAAK,IAAI,CAACF,MAAM,CAACE,gBAAgB,EAAE,GAAG,IAAI,CAACF,MAAM,CAACE,gBAAgB;IAClI,IAAI,CAACC,aAAa,GAAG,IAAIC,MAAM,CAAC,YAAYF,gBAAgB,eAAeD,iBAAiB,aAAaC,gBAAgB,yBAAyB,CAAC;IACnJ,IAAI,CAACG,0BAA0B,GAAG,IAAID,MAAM,CAAC,GAAGH,iBAAiB,EAAE,EAAE,GAAG,CAAC;EAC3E;EACAK,0BAA0BA,CAACC,KAAK,EAAE;IAChC,IAAI,IAAI,CAACJ,aAAa,CAACK,IAAI,CAACD,KAAK,CAAC,EAAE;MAClC,MAAME,GAAG,GAAG,IAAI,CAACC,qBAAqB,CAACH,KAAK,CAAC;MAC7C,IAAII,KAAK,CAACF,GAAG,CAAC,EAAE;QACd,OAAOG,SAAS;MAClB;MACA,OAAOH,GAAG;IACZ;IACA,OAAOG,SAAS;EAClB;EACAF,qBAAqBA,CAACH,KAAK,EAAE;IAC3B,MAAMM,UAAU,GAAGN,KAAK,CAACO,OAAO,CAAC,IAAI,CAACT,0BAA0B,EAAE,EAAE,CAAC,CAACS,OAAO,CAAC,IAAI,CAACd,MAAM,CAACE,gBAAgB,EAAE,GAAG,CAAC;IAChH,OAAOa,MAAM,CAACF,UAAU,CAAC;EAC3B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}