{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { NoSheetWithIdError } from \"../../errors.mjs\";\nimport { EmptyValue } from \"../../interpreter/InterpreterValue.mjs\";\nimport { ArrayVertex, ValueCellVertex } from \"../index.mjs\";\nexport class AddressMapping {\n  constructor(policy) {\n    this.policy = policy;\n    this.mapping = new Map();\n  }\n  /** @inheritDoc */\n  getCell(address) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(address.sheet);\n    }\n    return sheetMapping.getCell(address);\n  }\n  fetchCell(address) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(address.sheet);\n    }\n    const vertex = sheetMapping.getCell(address);\n    if (!vertex) {\n      throw Error('Vertex for address missing in AddressMapping');\n    }\n    return vertex;\n  }\n  strategyFor(sheetId) {\n    const strategy = this.mapping.get(sheetId);\n    if (strategy === undefined) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return strategy;\n  }\n  addSheet(sheetId, strategy) {\n    if (this.mapping.has(sheetId)) {\n      throw Error('Sheet already added');\n    }\n    this.mapping.set(sheetId, strategy);\n  }\n  autoAddSheet(sheetId, sheetBoundaries) {\n    const {\n      height,\n      width,\n      fill\n    } = sheetBoundaries;\n    const strategyConstructor = this.policy.call(fill);\n    this.addSheet(sheetId, new strategyConstructor(width, height));\n  }\n  getCellValue(address) {\n    const vertex = this.getCell(address);\n    if (vertex === undefined) {\n      return EmptyValue;\n    } else if (vertex instanceof ArrayVertex) {\n      return vertex.getArrayCellValue(address);\n    } else {\n      return vertex.getCellValue();\n    }\n  }\n  getRawValue(address) {\n    const vertex = this.getCell(address);\n    if (vertex instanceof ValueCellVertex) {\n      return vertex.getValues().rawValue;\n    } else if (vertex instanceof ArrayVertex) {\n      return vertex.getArrayCellRawValue(address);\n    } else {\n      return null;\n    }\n  }\n  /** @inheritDoc */\n  setCell(address, newVertex) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (!sheetMapping) {\n      throw Error('Sheet not initialized');\n    }\n    sheetMapping.setCell(address, newVertex);\n  }\n  moveCell(source, destination) {\n    const sheetMapping = this.mapping.get(source.sheet);\n    if (!sheetMapping) {\n      throw Error('Sheet not initialized.');\n    }\n    if (source.sheet !== destination.sheet) {\n      throw Error('Cannot move cells between sheets.');\n    }\n    if (sheetMapping.has(destination)) {\n      throw new Error('Cannot move cell. Destination already occupied.');\n    }\n    const vertex = sheetMapping.getCell(source);\n    if (vertex === undefined) {\n      throw new Error('Cannot move cell. No cell with such address.');\n    }\n    this.setCell(destination, vertex);\n    this.removeCell(source);\n  }\n  removeCell(address) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (!sheetMapping) {\n      throw Error('Sheet not initialized');\n    }\n    sheetMapping.removeCell(address);\n  }\n  /** @inheritDoc */\n  has(address) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (sheetMapping === undefined) {\n      return false;\n    }\n    return sheetMapping.has(address);\n  }\n  /** @inheritDoc */\n  getHeight(sheetId) {\n    const sheetMapping = this.mapping.get(sheetId);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return sheetMapping.getHeight();\n  }\n  /** @inheritDoc */\n  getWidth(sheetId) {\n    const sheetMapping = this.mapping.get(sheetId);\n    if (!sheetMapping) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return sheetMapping.getWidth();\n  }\n  addRows(sheet, row, numberOfRows) {\n    const sheetMapping = this.mapping.get(sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(sheet);\n    }\n    sheetMapping.addRows(row, numberOfRows);\n  }\n  removeRows(removedRows) {\n    const sheetMapping = this.mapping.get(removedRows.sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(removedRows.sheet);\n    }\n    sheetMapping.removeRows(removedRows);\n  }\n  removeSheet(sheetId) {\n    this.mapping.delete(sheetId);\n  }\n  addColumns(sheet, column, numberOfColumns) {\n    const sheetMapping = this.mapping.get(sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(sheet);\n    }\n    sheetMapping.addColumns(column, numberOfColumns);\n  }\n  removeColumns(removedColumns) {\n    const sheetMapping = this.mapping.get(removedColumns.sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(removedColumns.sheet);\n    }\n    sheetMapping.removeColumns(removedColumns);\n  }\n  *verticesFromRowsSpan(rowsSpan) {\n    yield* this.mapping.get(rowsSpan.sheet).verticesFromRowsSpan(rowsSpan); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  }\n  *verticesFromColumnsSpan(columnsSpan) {\n    yield* this.mapping.get(columnsSpan.sheet).verticesFromColumnsSpan(columnsSpan); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  }\n  *entriesFromRowsSpan(rowsSpan) {\n    yield* this.mapping.get(rowsSpan.sheet).entriesFromRowsSpan(rowsSpan);\n  }\n  *entriesFromColumnsSpan(columnsSpan) {\n    yield* this.mapping.get(columnsSpan.sheet).entriesFromColumnsSpan(columnsSpan);\n  }\n  *entries() {\n    for (const [sheet, mapping] of this.mapping.entries()) {\n      yield* mapping.getEntries(sheet);\n    }\n  }\n  *sheetEntries(sheet) {\n    const sheetMapping = this.mapping.get(sheet);\n    if (sheetMapping !== undefined) {\n      yield* sheetMapping.getEntries(sheet);\n    } else {\n      throw new NoSheetWithIdError(sheet);\n    }\n  }\n}","map":{"version":3,"names":["NoSheetWithIdError","EmptyValue","ArrayVertex","ValueCellVertex","AddressMapping","constructor","policy","mapping","Map","getCell","address","sheetMapping","get","sheet","undefined","fetchCell","vertex","Error","strategyFor","sheetId","strategy","addSheet","has","set","autoAddSheet","sheetBoundaries","height","width","fill","strategyConstructor","call","getCellValue","getArrayCellValue","getRawValue","getValues","rawValue","getArrayCellRawValue","setCell","newVertex","moveCell","source","destination","removeCell","getHeight","getWidth","addRows","row","numberOfRows","removeRows","removedRows","removeSheet","delete","addColumns","column","numberOfColumns","removeColumns","removedColumns","verticesFromRowsSpan","rowsSpan","verticesFromColumnsSpan","columnsSpan","entriesFromRowsSpan","entriesFromColumnsSpan","entries","getEntries","sheetEntries"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/DependencyGraph/AddressMapping/AddressMapping.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { NoSheetWithIdError } from \"../../errors.mjs\";\nimport { EmptyValue } from \"../../interpreter/InterpreterValue.mjs\";\nimport { ArrayVertex, ValueCellVertex } from \"../index.mjs\";\nexport class AddressMapping {\n  constructor(policy) {\n    this.policy = policy;\n    this.mapping = new Map();\n  }\n  /** @inheritDoc */\n  getCell(address) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(address.sheet);\n    }\n    return sheetMapping.getCell(address);\n  }\n  fetchCell(address) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(address.sheet);\n    }\n    const vertex = sheetMapping.getCell(address);\n    if (!vertex) {\n      throw Error('Vertex for address missing in AddressMapping');\n    }\n    return vertex;\n  }\n  strategyFor(sheetId) {\n    const strategy = this.mapping.get(sheetId);\n    if (strategy === undefined) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return strategy;\n  }\n  addSheet(sheetId, strategy) {\n    if (this.mapping.has(sheetId)) {\n      throw Error('Sheet already added');\n    }\n    this.mapping.set(sheetId, strategy);\n  }\n  autoAddSheet(sheetId, sheetBoundaries) {\n    const {\n      height,\n      width,\n      fill\n    } = sheetBoundaries;\n    const strategyConstructor = this.policy.call(fill);\n    this.addSheet(sheetId, new strategyConstructor(width, height));\n  }\n  getCellValue(address) {\n    const vertex = this.getCell(address);\n    if (vertex === undefined) {\n      return EmptyValue;\n    } else if (vertex instanceof ArrayVertex) {\n      return vertex.getArrayCellValue(address);\n    } else {\n      return vertex.getCellValue();\n    }\n  }\n  getRawValue(address) {\n    const vertex = this.getCell(address);\n    if (vertex instanceof ValueCellVertex) {\n      return vertex.getValues().rawValue;\n    } else if (vertex instanceof ArrayVertex) {\n      return vertex.getArrayCellRawValue(address);\n    } else {\n      return null;\n    }\n  }\n  /** @inheritDoc */\n  setCell(address, newVertex) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (!sheetMapping) {\n      throw Error('Sheet not initialized');\n    }\n    sheetMapping.setCell(address, newVertex);\n  }\n  moveCell(source, destination) {\n    const sheetMapping = this.mapping.get(source.sheet);\n    if (!sheetMapping) {\n      throw Error('Sheet not initialized.');\n    }\n    if (source.sheet !== destination.sheet) {\n      throw Error('Cannot move cells between sheets.');\n    }\n    if (sheetMapping.has(destination)) {\n      throw new Error('Cannot move cell. Destination already occupied.');\n    }\n    const vertex = sheetMapping.getCell(source);\n    if (vertex === undefined) {\n      throw new Error('Cannot move cell. No cell with such address.');\n    }\n    this.setCell(destination, vertex);\n    this.removeCell(source);\n  }\n  removeCell(address) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (!sheetMapping) {\n      throw Error('Sheet not initialized');\n    }\n    sheetMapping.removeCell(address);\n  }\n  /** @inheritDoc */\n  has(address) {\n    const sheetMapping = this.mapping.get(address.sheet);\n    if (sheetMapping === undefined) {\n      return false;\n    }\n    return sheetMapping.has(address);\n  }\n  /** @inheritDoc */\n  getHeight(sheetId) {\n    const sheetMapping = this.mapping.get(sheetId);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return sheetMapping.getHeight();\n  }\n  /** @inheritDoc */\n  getWidth(sheetId) {\n    const sheetMapping = this.mapping.get(sheetId);\n    if (!sheetMapping) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return sheetMapping.getWidth();\n  }\n  addRows(sheet, row, numberOfRows) {\n    const sheetMapping = this.mapping.get(sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(sheet);\n    }\n    sheetMapping.addRows(row, numberOfRows);\n  }\n  removeRows(removedRows) {\n    const sheetMapping = this.mapping.get(removedRows.sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(removedRows.sheet);\n    }\n    sheetMapping.removeRows(removedRows);\n  }\n  removeSheet(sheetId) {\n    this.mapping.delete(sheetId);\n  }\n  addColumns(sheet, column, numberOfColumns) {\n    const sheetMapping = this.mapping.get(sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(sheet);\n    }\n    sheetMapping.addColumns(column, numberOfColumns);\n  }\n  removeColumns(removedColumns) {\n    const sheetMapping = this.mapping.get(removedColumns.sheet);\n    if (sheetMapping === undefined) {\n      throw new NoSheetWithIdError(removedColumns.sheet);\n    }\n    sheetMapping.removeColumns(removedColumns);\n  }\n  *verticesFromRowsSpan(rowsSpan) {\n    yield* this.mapping.get(rowsSpan.sheet).verticesFromRowsSpan(rowsSpan); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  }\n  *verticesFromColumnsSpan(columnsSpan) {\n    yield* this.mapping.get(columnsSpan.sheet).verticesFromColumnsSpan(columnsSpan); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  }\n  *entriesFromRowsSpan(rowsSpan) {\n    yield* this.mapping.get(rowsSpan.sheet).entriesFromRowsSpan(rowsSpan);\n  }\n  *entriesFromColumnsSpan(columnsSpan) {\n    yield* this.mapping.get(columnsSpan.sheet).entriesFromColumnsSpan(columnsSpan);\n  }\n  *entries() {\n    for (const [sheet, mapping] of this.mapping.entries()) {\n      yield* mapping.getEntries(sheet);\n    }\n  }\n  *sheetEntries(sheet) {\n    const sheetMapping = this.mapping.get(sheet);\n    if (sheetMapping !== undefined) {\n      yield* sheetMapping.getEntries(sheet);\n    } else {\n      throw new NoSheetWithIdError(sheet);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}