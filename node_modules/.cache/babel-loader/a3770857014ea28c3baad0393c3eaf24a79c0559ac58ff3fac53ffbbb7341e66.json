{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { padLeft } from \"../../format/format.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nconst MAX_LENGTH = 10;\nconst DECIMAL_NUMBER_OF_BITS = 255;\nconst MIN_BASE = 2;\nconst MAX_BASE = 36;\nconst ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport class RadixConversionPlugin extends FunctionPlugin {\n  dec2bin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEC2BIN'), (value, places) => decimalToBaseWithExactPadding(value, 2, places));\n  }\n  dec2oct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEC2OCT'), (value, places) => decimalToBaseWithExactPadding(value, 8, places));\n  }\n  dec2hex(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEC2HEX'), (value, places) => decimalToBaseWithExactPadding(value, 16, places));\n  }\n  bin2dec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BIN2DEC'), binary => {\n      const binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);\n      if (binaryWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotBinary);\n      }\n      return twoComplementToDecimal(binaryWithSign, 2);\n    });\n  }\n  bin2oct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BIN2OCT'), (binary, places) => {\n      const binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);\n      if (binaryWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotBinary);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(binaryWithSign, 2), 8, places);\n    });\n  }\n  bin2hex(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BIN2HEX'), (binary, places) => {\n      const binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);\n      if (binaryWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotBinary);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(binaryWithSign, 2), 16, places);\n    });\n  }\n  oct2dec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('OCT2DEC'), octal => {\n      const octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);\n      if (octalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotOctal);\n      }\n      return twoComplementToDecimal(octalWithSign, 8);\n    });\n  }\n  oct2bin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('OCT2BIN'), (octal, places) => {\n      const octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);\n      if (octalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotOctal);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(octalWithSign, 8), 2, places);\n    });\n  }\n  oct2hex(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('OCT2HEX'), (octal, places) => {\n      const octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);\n      if (octalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotOctal);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(octalWithSign, 8), 16, places);\n    });\n  }\n  hex2dec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HEX2DEC'), hexadecimal => {\n      const hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);\n      if (hexadecimalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotHex);\n      }\n      return twoComplementToDecimal(hexadecimalWithSign, 16);\n    });\n  }\n  hex2bin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HEX2BIN'), (hexadecimal, places) => {\n      const hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);\n      if (hexadecimalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotHex);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(hexadecimalWithSign, 16), 2, places);\n    });\n  }\n  hex2oct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HEX2OCT'), (hexadecimal, places) => {\n      const hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);\n      if (hexadecimalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotHex);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(hexadecimalWithSign, 16), 8, places);\n    });\n  }\n  base(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BASE'), decimalToBaseWithMinimumPadding);\n  }\n  decimal(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DECIMAL'), (arg, base) => {\n      const input = coerceStringToBase(arg, base, DECIMAL_NUMBER_OF_BITS);\n      if (input === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotHex);\n      }\n      return parseInt(input, base);\n    });\n  }\n}\nRadixConversionPlugin.implementedFunctions = {\n  'DEC2BIN': {\n    method: 'dec2bin',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 1,\n      maxValue: 10\n    }]\n  },\n  'DEC2OCT': {\n    method: 'dec2oct',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 1,\n      maxValue: 10\n    }]\n  },\n  'DEC2HEX': {\n    method: 'dec2hex',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 1,\n      maxValue: 10\n    }]\n  },\n  'BIN2DEC': {\n    method: 'bin2dec',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'BIN2OCT': {\n    method: 'bin2oct',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'BIN2HEX': {\n    method: 'bin2hex',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'OCT2DEC': {\n    method: 'oct2dec',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'OCT2BIN': {\n    method: 'oct2bin',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'OCT2HEX': {\n    method: 'oct2hex',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'HEX2DEC': {\n    method: 'hex2dec',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'HEX2BIN': {\n    method: 'hex2bin',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'HEX2OCT': {\n    method: 'hex2oct',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'DECIMAL': {\n    method: 'decimal',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: MIN_BASE,\n      maxValue: MAX_BASE\n    }]\n  },\n  'BASE': {\n    method: 'base',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: MIN_BASE,\n      maxValue: MAX_BASE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: DECIMAL_NUMBER_OF_BITS\n    }]\n  }\n};\nfunction coerceStringToBase(value, base, maxLength) {\n  const baseAlphabet = ALPHABET.substr(0, base);\n  const regex = new RegExp(`^[${baseAlphabet}]+$`);\n  if (value.length > maxLength || !regex.test(value)) {\n    return undefined;\n  }\n  return value;\n}\nfunction decimalToBaseWithExactPadding(value, base, places) {\n  if (value > maxValFromBase(base)) {\n    return new CellError(ErrorType.NUM, ErrorMessage.ValueBaseLarge);\n  }\n  if (value < minValFromBase(base)) {\n    return new CellError(ErrorType.NUM, ErrorMessage.ValueBaseSmall);\n  }\n  const result = decimalToRadixComplement(value, base);\n  if (places === undefined || value < 0) {\n    return result;\n  } else if (result.length > places) {\n    return new CellError(ErrorType.NUM, ErrorMessage.ValueBaseLong);\n  } else {\n    return padLeft(result, places);\n  }\n}\nfunction minValFromBase(base) {\n  return -Math.pow(base, MAX_LENGTH) / 2;\n}\nfunction maxValFromBase(base) {\n  return -minValFromBase(base) - 1;\n}\nfunction decimalToBaseWithMinimumPadding(value, base, places) {\n  const result = decimalToRadixComplement(value, base);\n  if (places !== undefined && places > result.length) {\n    return padLeft(result, places);\n  } else {\n    return result;\n  }\n}\nfunction decimalToRadixComplement(value, base) {\n  const offset = value < 0 ? Math.pow(base, MAX_LENGTH) : 0;\n  return (value + offset).toString(base).toUpperCase();\n}\nfunction twoComplementToDecimal(value, base) {\n  const parsed = parseInt(value, base);\n  const offset = Math.pow(base, MAX_LENGTH);\n  return parsed >= offset / 2 ? parsed - offset : parsed;\n}","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","padLeft","FunctionArgumentType","FunctionPlugin","MAX_LENGTH","DECIMAL_NUMBER_OF_BITS","MIN_BASE","MAX_BASE","ALPHABET","RadixConversionPlugin","dec2bin","ast","state","runFunction","args","metadata","value","places","decimalToBaseWithExactPadding","dec2oct","dec2hex","bin2dec","binary","binaryWithSign","coerceStringToBase","undefined","NUM","NotBinary","twoComplementToDecimal","bin2oct","bin2hex","oct2dec","octal","octalWithSign","NotOctal","oct2bin","oct2hex","hex2dec","hexadecimal","hexadecimalWithSign","NotHex","hex2bin","hex2oct","base","decimalToBaseWithMinimumPadding","decimal","arg","input","parseInt","implementedFunctions","method","parameters","argumentType","NUMBER","optionalArg","minValue","maxValue","STRING","maxLength","baseAlphabet","substr","regex","RegExp","length","test","maxValFromBase","ValueBaseLarge","minValFromBase","ValueBaseSmall","result","decimalToRadixComplement","ValueBaseLong","Math","pow","offset","toString","toUpperCase","parsed"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/RadixConversionPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { padLeft } from \"../../format/format.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nconst MAX_LENGTH = 10;\nconst DECIMAL_NUMBER_OF_BITS = 255;\nconst MIN_BASE = 2;\nconst MAX_BASE = 36;\nconst ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport class RadixConversionPlugin extends FunctionPlugin {\n  dec2bin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEC2BIN'), (value, places) => decimalToBaseWithExactPadding(value, 2, places));\n  }\n  dec2oct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEC2OCT'), (value, places) => decimalToBaseWithExactPadding(value, 8, places));\n  }\n  dec2hex(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEC2HEX'), (value, places) => decimalToBaseWithExactPadding(value, 16, places));\n  }\n  bin2dec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BIN2DEC'), binary => {\n      const binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);\n      if (binaryWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotBinary);\n      }\n      return twoComplementToDecimal(binaryWithSign, 2);\n    });\n  }\n  bin2oct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BIN2OCT'), (binary, places) => {\n      const binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);\n      if (binaryWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotBinary);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(binaryWithSign, 2), 8, places);\n    });\n  }\n  bin2hex(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BIN2HEX'), (binary, places) => {\n      const binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);\n      if (binaryWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotBinary);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(binaryWithSign, 2), 16, places);\n    });\n  }\n  oct2dec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('OCT2DEC'), octal => {\n      const octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);\n      if (octalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotOctal);\n      }\n      return twoComplementToDecimal(octalWithSign, 8);\n    });\n  }\n  oct2bin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('OCT2BIN'), (octal, places) => {\n      const octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);\n      if (octalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotOctal);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(octalWithSign, 8), 2, places);\n    });\n  }\n  oct2hex(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('OCT2HEX'), (octal, places) => {\n      const octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);\n      if (octalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotOctal);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(octalWithSign, 8), 16, places);\n    });\n  }\n  hex2dec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HEX2DEC'), hexadecimal => {\n      const hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);\n      if (hexadecimalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotHex);\n      }\n      return twoComplementToDecimal(hexadecimalWithSign, 16);\n    });\n  }\n  hex2bin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HEX2BIN'), (hexadecimal, places) => {\n      const hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);\n      if (hexadecimalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotHex);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(hexadecimalWithSign, 16), 2, places);\n    });\n  }\n  hex2oct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HEX2OCT'), (hexadecimal, places) => {\n      const hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);\n      if (hexadecimalWithSign === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotHex);\n      }\n      return decimalToBaseWithExactPadding(twoComplementToDecimal(hexadecimalWithSign, 16), 8, places);\n    });\n  }\n  base(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BASE'), decimalToBaseWithMinimumPadding);\n  }\n  decimal(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DECIMAL'), (arg, base) => {\n      const input = coerceStringToBase(arg, base, DECIMAL_NUMBER_OF_BITS);\n      if (input === undefined) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NotHex);\n      }\n      return parseInt(input, base);\n    });\n  }\n}\nRadixConversionPlugin.implementedFunctions = {\n  'DEC2BIN': {\n    method: 'dec2bin',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 1,\n      maxValue: 10\n    }]\n  },\n  'DEC2OCT': {\n    method: 'dec2oct',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 1,\n      maxValue: 10\n    }]\n  },\n  'DEC2HEX': {\n    method: 'dec2hex',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 1,\n      maxValue: 10\n    }]\n  },\n  'BIN2DEC': {\n    method: 'bin2dec',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'BIN2OCT': {\n    method: 'bin2oct',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'BIN2HEX': {\n    method: 'bin2hex',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'OCT2DEC': {\n    method: 'oct2dec',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'OCT2BIN': {\n    method: 'oct2bin',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'OCT2HEX': {\n    method: 'oct2hex',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'HEX2DEC': {\n    method: 'hex2dec',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'HEX2BIN': {\n    method: 'hex2bin',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'HEX2OCT': {\n    method: 'hex2oct',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: MAX_LENGTH\n    }]\n  },\n  'DECIMAL': {\n    method: 'decimal',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: MIN_BASE,\n      maxValue: MAX_BASE\n    }]\n  },\n  'BASE': {\n    method: 'base',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: MIN_BASE,\n      maxValue: MAX_BASE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      minValue: 0,\n      maxValue: DECIMAL_NUMBER_OF_BITS\n    }]\n  }\n};\nfunction coerceStringToBase(value, base, maxLength) {\n  const baseAlphabet = ALPHABET.substr(0, base);\n  const regex = new RegExp(`^[${baseAlphabet}]+$`);\n  if (value.length > maxLength || !regex.test(value)) {\n    return undefined;\n  }\n  return value;\n}\nfunction decimalToBaseWithExactPadding(value, base, places) {\n  if (value > maxValFromBase(base)) {\n    return new CellError(ErrorType.NUM, ErrorMessage.ValueBaseLarge);\n  }\n  if (value < minValFromBase(base)) {\n    return new CellError(ErrorType.NUM, ErrorMessage.ValueBaseSmall);\n  }\n  const result = decimalToRadixComplement(value, base);\n  if (places === undefined || value < 0) {\n    return result;\n  } else if (result.length > places) {\n    return new CellError(ErrorType.NUM, ErrorMessage.ValueBaseLong);\n  } else {\n    return padLeft(result, places);\n  }\n}\nfunction minValFromBase(base) {\n  return -Math.pow(base, MAX_LENGTH) / 2;\n}\nfunction maxValFromBase(base) {\n  return -minValFromBase(base) - 1;\n}\nfunction decimalToBaseWithMinimumPadding(value, base, places) {\n  const result = decimalToRadixComplement(value, base);\n  if (places !== undefined && places > result.length) {\n    return padLeft(result, places);\n  } else {\n    return result;\n  }\n}\nfunction decimalToRadixComplement(value, base) {\n  const offset = value < 0 ? Math.pow(base, MAX_LENGTH) : 0;\n  return (value + offset).toString(base).toUpperCase();\n}\nfunction twoComplementToDecimal(value, base) {\n  const parsed = parseInt(value, base);\n  const offset = Math.pow(base, MAX_LENGTH);\n  return parsed >= offset / 2 ? parsed - offset : parsed;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}