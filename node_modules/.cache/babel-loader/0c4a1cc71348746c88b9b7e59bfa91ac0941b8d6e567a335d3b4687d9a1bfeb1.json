{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { coerceComplexToString } from \"../ArithmeticHelper.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class ComplexPlugin extends FunctionPlugin {\n  complex(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COMPLEX'), (re, im, unit) => {\n      if (unit !== 'i' && unit !== 'j') {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ShouldBeIorJ);\n      }\n      return coerceComplexToString([re, im], unit);\n    });\n  }\n  imabs(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMABS'), abs);\n  }\n  imaginary(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMAGINARY'), ([_re, im]) => im);\n  }\n  imreal(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMREAL'), ([re, _im]) => re);\n  }\n  imargument(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMARGUMENT'), ([re, im]) => {\n      if (re === 0 && im === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return Math.atan2(im, re);\n    });\n  }\n  imconjugate(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCONJUGATE'), ([re, im]) => coerceComplexToString([re, -im]));\n  }\n  imcos(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCOS'), arg => coerceComplexToString(cos(arg)));\n  }\n  imcosh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCOSH'), arg => coerceComplexToString(cosh(arg)));\n  }\n  imcot(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCOT'), arg => coerceComplexToString(div(cos(arg), sin(arg))));\n  }\n  imcsc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCSC'), arg => coerceComplexToString(div([1, 0], sin(arg))));\n  }\n  imcsch(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCSCH'), arg => coerceComplexToString(div([1, 0], sinh(arg))));\n  }\n  imsec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSEC'), arg => coerceComplexToString(div([1, 0], cos(arg))));\n  }\n  imsech(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSECH'), arg => coerceComplexToString(div([1, 0], cosh(arg))));\n  }\n  imsin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSIN'), arg => coerceComplexToString(sin(arg)));\n  }\n  imsinh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSINH'), arg => coerceComplexToString(sinh(arg)));\n  }\n  imtan(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMTAN'), arg => coerceComplexToString(div(sin(arg), cos(arg))));\n  }\n  imdiv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMDIV'), (arg1, arg2) => coerceComplexToString(div(arg1, arg2)));\n  }\n  improduct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMPRODUCT'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceComplexExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      let prod = [1, 0];\n      for (const val of coerced) {\n        prod = mul(prod, val);\n      }\n      return coerceComplexToString(prod);\n    });\n  }\n  imsum(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSUM'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceComplexExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      let sum = [0, 0];\n      for (const val of coerced) {\n        sum = add(sum, val);\n      }\n      return coerceComplexToString(sum);\n    });\n  }\n  imsub(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSUB'), (arg1, arg2) => coerceComplexToString(sub(arg1, arg2)));\n  }\n  imexp(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMEXP'), arg => coerceComplexToString(exp(arg)));\n  }\n  imln(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMLN'), arg => coerceComplexToString(ln(arg)));\n  }\n  imlog10(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMLOG10'), arg => {\n      const [re, im] = ln(arg);\n      const c = Math.log(10);\n      return coerceComplexToString([re / c, im / c]);\n    });\n  }\n  imlog2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMLOG2'), arg => {\n      const [re, im] = ln(arg);\n      const c = Math.log(2);\n      return coerceComplexToString([re / c, im / c]);\n    });\n  }\n  impower(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMPOWER'), (arg, n) => coerceComplexToString(power(arg, n)));\n  }\n  imsqrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSQRT'), arg => coerceComplexToString(power(arg, 0.5)));\n  }\n}\nComplexPlugin.implementedFunctions = {\n  'COMPLEX': {\n    method: 'complex',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.STRING,\n      defaultValue: 'i'\n    }]\n  },\n  'IMABS': {\n    method: 'imabs',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMAGINARY': {\n    method: 'imaginary',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMREAL': {\n    method: 'imreal',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMARGUMENT': {\n    method: 'imargument',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCONJUGATE': {\n    method: 'imconjugate',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCOS': {\n    method: 'imcos',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCOSH': {\n    method: 'imcosh',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCOT': {\n    method: 'imcot',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCSC': {\n    method: 'imcsc',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCSCH': {\n    method: 'imcsch',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMSEC': {\n    method: 'imsec',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMSECH': {\n    method: 'imsech',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMSIN': {\n    method: 'imsin',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMSINH': {\n    method: 'imsinh',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMTAN': {\n    method: 'imtan',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMDIV': {\n    method: 'imdiv',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }, {\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMPRODUCT': {\n    method: 'improduct',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'IMSUM': {\n    method: 'imsum',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'IMSUB': {\n    method: 'imsub',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }, {\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMEXP': {\n    method: 'imexp',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMLN': {\n    method: 'imln',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMLOG10': {\n    method: 'imlog10',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMLOG2': {\n    method: 'imlog2',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMPOWER': {\n    method: 'impower',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'IMSQRT': {\n    method: 'imsqrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  }\n};\nfunction add([re1, im1], [re2, im2]) {\n  return [re1 + re2, im1 + im2];\n}\nfunction sub([re1, im1], [re2, im2]) {\n  return [re1 - re2, im1 - im2];\n}\nfunction mul([re1, im1], [re2, im2]) {\n  return [re1 * re2 - im1 * im2, re1 * im2 + re2 * im1];\n}\nfunction div([re1, im1], [re2, im2]) {\n  const denom = Math.pow(re2, 2) + Math.pow(im2, 2);\n  const [nomRe, nomIm] = mul([re1, im1], [re2, -im2]);\n  return [nomRe / denom, nomIm / denom];\n}\nfunction cos([re, im]) {\n  return [Math.cos(re) * Math.cosh(im), -Math.sin(re) * Math.sinh(im)];\n}\nfunction cosh([re, im]) {\n  return [Math.cosh(re) * Math.cos(im), Math.sinh(re) * Math.sin(im)];\n}\nfunction sin([re, im]) {\n  return [Math.sin(re) * Math.cosh(im), Math.cos(re) * Math.sinh(im)];\n}\nfunction sinh([re, im]) {\n  return [Math.sinh(re) * Math.cos(im), Math.cosh(re) * Math.sin(im)];\n}\nfunction exp([re, im]) {\n  return [Math.exp(re) * Math.cos(im), Math.exp(re) * Math.sin(im)];\n}\nfunction abs([re, im]) {\n  return Math.sqrt(re * re + im * im);\n}\nfunction ln([re, im]) {\n  return [Math.log(abs([re, im])), Math.atan2(im, re)];\n}\nfunction power(arg, n) {\n  const [re, im] = ln(arg);\n  return exp([n * re, n * im]);\n}","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","coerceComplexToString","FunctionArgumentType","FunctionPlugin","ComplexPlugin","complex","ast","state","runFunction","args","metadata","re","im","unit","VALUE","ShouldBeIorJ","imabs","abs","imaginary","_re","imreal","_im","imargument","DIV_BY_ZERO","Math","atan2","imconjugate","imcos","arg","cos","imcosh","cosh","imcot","div","sin","imcsc","imcsch","sinh","imsec","imsech","imsin","imsinh","imtan","imdiv","arg1","arg2","improduct","coerced","arithmeticHelper","coerceComplexExactRanges","prod","val","mul","imsum","sum","add","imsub","sub","imexp","exp","imln","ln","imlog10","c","log","imlog2","impower","n","power","imsqrt","implementedFunctions","method","parameters","argumentType","NUMBER","STRING","defaultValue","COMPLEX","ANY","repeatLastArgs","re1","im1","re2","im2","denom","pow","nomRe","nomIm","sqrt"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/ComplexPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { coerceComplexToString } from \"../ArithmeticHelper.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class ComplexPlugin extends FunctionPlugin {\n  complex(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COMPLEX'), (re, im, unit) => {\n      if (unit !== 'i' && unit !== 'j') {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ShouldBeIorJ);\n      }\n      return coerceComplexToString([re, im], unit);\n    });\n  }\n  imabs(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMABS'), abs);\n  }\n  imaginary(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMAGINARY'), ([_re, im]) => im);\n  }\n  imreal(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMREAL'), ([re, _im]) => re);\n  }\n  imargument(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMARGUMENT'), ([re, im]) => {\n      if (re === 0 && im === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return Math.atan2(im, re);\n    });\n  }\n  imconjugate(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCONJUGATE'), ([re, im]) => coerceComplexToString([re, -im]));\n  }\n  imcos(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCOS'), arg => coerceComplexToString(cos(arg)));\n  }\n  imcosh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCOSH'), arg => coerceComplexToString(cosh(arg)));\n  }\n  imcot(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCOT'), arg => coerceComplexToString(div(cos(arg), sin(arg))));\n  }\n  imcsc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCSC'), arg => coerceComplexToString(div([1, 0], sin(arg))));\n  }\n  imcsch(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMCSCH'), arg => coerceComplexToString(div([1, 0], sinh(arg))));\n  }\n  imsec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSEC'), arg => coerceComplexToString(div([1, 0], cos(arg))));\n  }\n  imsech(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSECH'), arg => coerceComplexToString(div([1, 0], cosh(arg))));\n  }\n  imsin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSIN'), arg => coerceComplexToString(sin(arg)));\n  }\n  imsinh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSINH'), arg => coerceComplexToString(sinh(arg)));\n  }\n  imtan(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMTAN'), arg => coerceComplexToString(div(sin(arg), cos(arg))));\n  }\n  imdiv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMDIV'), (arg1, arg2) => coerceComplexToString(div(arg1, arg2)));\n  }\n  improduct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMPRODUCT'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceComplexExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      let prod = [1, 0];\n      for (const val of coerced) {\n        prod = mul(prod, val);\n      }\n      return coerceComplexToString(prod);\n    });\n  }\n  imsum(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSUM'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceComplexExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      let sum = [0, 0];\n      for (const val of coerced) {\n        sum = add(sum, val);\n      }\n      return coerceComplexToString(sum);\n    });\n  }\n  imsub(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSUB'), (arg1, arg2) => coerceComplexToString(sub(arg1, arg2)));\n  }\n  imexp(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMEXP'), arg => coerceComplexToString(exp(arg)));\n  }\n  imln(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMLN'), arg => coerceComplexToString(ln(arg)));\n  }\n  imlog10(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMLOG10'), arg => {\n      const [re, im] = ln(arg);\n      const c = Math.log(10);\n      return coerceComplexToString([re / c, im / c]);\n    });\n  }\n  imlog2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMLOG2'), arg => {\n      const [re, im] = ln(arg);\n      const c = Math.log(2);\n      return coerceComplexToString([re / c, im / c]);\n    });\n  }\n  impower(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMPOWER'), (arg, n) => coerceComplexToString(power(arg, n)));\n  }\n  imsqrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IMSQRT'), arg => coerceComplexToString(power(arg, 0.5)));\n  }\n}\nComplexPlugin.implementedFunctions = {\n  'COMPLEX': {\n    method: 'complex',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.STRING,\n      defaultValue: 'i'\n    }]\n  },\n  'IMABS': {\n    method: 'imabs',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMAGINARY': {\n    method: 'imaginary',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMREAL': {\n    method: 'imreal',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMARGUMENT': {\n    method: 'imargument',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCONJUGATE': {\n    method: 'imconjugate',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCOS': {\n    method: 'imcos',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCOSH': {\n    method: 'imcosh',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCOT': {\n    method: 'imcot',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCSC': {\n    method: 'imcsc',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMCSCH': {\n    method: 'imcsch',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMSEC': {\n    method: 'imsec',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMSECH': {\n    method: 'imsech',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMSIN': {\n    method: 'imsin',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMSINH': {\n    method: 'imsinh',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMTAN': {\n    method: 'imtan',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMDIV': {\n    method: 'imdiv',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }, {\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMPRODUCT': {\n    method: 'improduct',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'IMSUM': {\n    method: 'imsum',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'IMSUB': {\n    method: 'imsub',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }, {\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMEXP': {\n    method: 'imexp',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMLN': {\n    method: 'imln',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMLOG10': {\n    method: 'imlog10',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMLOG2': {\n    method: 'imlog2',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  },\n  'IMPOWER': {\n    method: 'impower',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'IMSQRT': {\n    method: 'imsqrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.COMPLEX\n    }]\n  }\n};\nfunction add([re1, im1], [re2, im2]) {\n  return [re1 + re2, im1 + im2];\n}\nfunction sub([re1, im1], [re2, im2]) {\n  return [re1 - re2, im1 - im2];\n}\nfunction mul([re1, im1], [re2, im2]) {\n  return [re1 * re2 - im1 * im2, re1 * im2 + re2 * im1];\n}\nfunction div([re1, im1], [re2, im2]) {\n  const denom = Math.pow(re2, 2) + Math.pow(im2, 2);\n  const [nomRe, nomIm] = mul([re1, im1], [re2, -im2]);\n  return [nomRe / denom, nomIm / denom];\n}\nfunction cos([re, im]) {\n  return [Math.cos(re) * Math.cosh(im), -Math.sin(re) * Math.sinh(im)];\n}\nfunction cosh([re, im]) {\n  return [Math.cosh(re) * Math.cos(im), Math.sinh(re) * Math.sin(im)];\n}\nfunction sin([re, im]) {\n  return [Math.sin(re) * Math.cosh(im), Math.cos(re) * Math.sinh(im)];\n}\nfunction sinh([re, im]) {\n  return [Math.sinh(re) * Math.cos(im), Math.cosh(re) * Math.sin(im)];\n}\nfunction exp([re, im]) {\n  return [Math.exp(re) * Math.cos(im), Math.exp(re) * Math.sin(im)];\n}\nfunction abs([re, im]) {\n  return Math.sqrt(re * re + im * im);\n}\nfunction ln([re, im]) {\n  return [Math.log(abs([re, im])), Math.atan2(im, re)];\n}\nfunction power(arg, n) {\n  const [re, im] = ln(arg);\n  return exp([n * re, n * im]);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}