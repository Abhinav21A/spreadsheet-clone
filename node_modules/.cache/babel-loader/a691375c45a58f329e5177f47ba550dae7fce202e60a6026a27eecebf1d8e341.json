{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class CharPlugin extends FunctionPlugin {\n  char(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHAR'), value => {\n      if (value < 1 || value >= 256) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.CharacterCodeBounds);\n      }\n      return String.fromCharCode(Math.trunc(value));\n    });\n  }\n  unichar(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHAR'), value => {\n      if (value < 1 || value >= 1114112) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.CharacterCodeBounds);\n      }\n      return String.fromCodePoint(Math.trunc(value));\n    });\n  }\n}\nCharPlugin.implementedFunctions = {\n  'CHAR': {\n    method: 'char',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'UNICHAR': {\n    method: 'unichar',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  }\n};","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","FunctionArgumentType","FunctionPlugin","CharPlugin","char","ast","state","runFunction","args","metadata","value","VALUE","CharacterCodeBounds","String","fromCharCode","Math","trunc","unichar","fromCodePoint","implementedFunctions","method","parameters","argumentType","NUMBER"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/CharPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class CharPlugin extends FunctionPlugin {\n  char(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHAR'), value => {\n      if (value < 1 || value >= 256) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.CharacterCodeBounds);\n      }\n      return String.fromCharCode(Math.trunc(value));\n    });\n  }\n  unichar(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHAR'), value => {\n      if (value < 1 || value >= 1114112) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.CharacterCodeBounds);\n      }\n      return String.fromCodePoint(Math.trunc(value));\n    });\n  }\n}\nCharPlugin.implementedFunctions = {\n  'CHAR': {\n    method: 'char',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'UNICHAR': {\n    method: 'unichar',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AACrD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,sBAAsB;AAC3E,OAAO,MAAMC,UAAU,SAASD,cAAc,CAAC;EAC7CE,IAAIA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACf,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,MAAM,CAAC,EAAEC,KAAK,IAAI;MACvE,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,GAAG,EAAE;QAC7B,OAAO,IAAIZ,SAAS,CAACC,SAAS,CAACY,KAAK,EAAEX,YAAY,CAACY,mBAAmB,CAAC;MACzE;MACA,OAAOC,MAAM,CAACC,YAAY,CAACC,IAAI,CAACC,KAAK,CAACN,KAAK,CAAC,CAAC;IAC/C,CAAC,CAAC;EACJ;EACAO,OAAOA,CAACZ,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,MAAM,CAAC,EAAEC,KAAK,IAAI;MACvE,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,OAAO,EAAE;QACjC,OAAO,IAAIZ,SAAS,CAACC,SAAS,CAACY,KAAK,EAAEX,YAAY,CAACY,mBAAmB,CAAC;MACzE;MACA,OAAOC,MAAM,CAACK,aAAa,CAACH,IAAI,CAACC,KAAK,CAACN,KAAK,CAAC,CAAC;IAChD,CAAC,CAAC;EACJ;AACF;AACAP,UAAU,CAACgB,oBAAoB,GAAG;EAChC,MAAM,EAAE;IACNC,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAErB,oBAAoB,CAACsB;IACrC,CAAC;EACH,CAAC;EACD,SAAS,EAAE;IACTH,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAErB,oBAAoB,CAACsB;IACrC,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}