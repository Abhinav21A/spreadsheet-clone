{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\n/**\r\n * A symbol representing an empty cell value.\r\n */\nexport const EmptyValue = Symbol('Empty value');\nexport function getRawValue(num) {\n  if (num instanceof RichNumber) {\n    return num.val;\n  } else {\n    return num;\n  }\n}\nexport class RichNumber {\n  constructor(val, format) {\n    this.val = val;\n    this.format = format;\n  }\n  fromNumber(val) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return new this.constructor(val);\n  }\n}\nexport function cloneNumber(val, newVal) {\n  if (typeof val === 'number') {\n    return newVal;\n  } else {\n    const ret = val.fromNumber(newVal);\n    ret.format = val.format;\n    return ret;\n  }\n}\nexport class DateNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_DATE;\n  }\n}\nexport class CurrencyNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_CURRENCY;\n  }\n}\nexport class TimeNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_TIME;\n  }\n}\nexport class DateTimeNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_DATETIME;\n  }\n}\nexport class PercentNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_PERCENT;\n  }\n}\nexport function isExtendedNumber(val) {\n  return typeof val === 'number' || val instanceof RichNumber;\n}\nexport var NumberType;\n(function (NumberType) {\n  NumberType[\"NUMBER_RAW\"] = \"NUMBER_RAW\";\n  NumberType[\"NUMBER_DATE\"] = \"NUMBER_DATE\";\n  NumberType[\"NUMBER_TIME\"] = \"NUMBER_TIME\";\n  NumberType[\"NUMBER_DATETIME\"] = \"NUMBER_DATETIME\";\n  NumberType[\"NUMBER_CURRENCY\"] = \"NUMBER_CURRENCY\";\n  NumberType[\"NUMBER_PERCENT\"] = \"NUMBER_PERCENT\";\n})(NumberType || (NumberType = {}));\nexport function getTypeOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return num.getDetailedType();\n  } else {\n    return NumberType.NUMBER_RAW;\n  }\n}\nexport function getFormatOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return num.format;\n  } else {\n    return undefined;\n  }\n}\nexport function getTypeFormatOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return {\n      type: num.getDetailedType(),\n      format: num.format\n    };\n  } else {\n    return {\n      type: NumberType.NUMBER_RAW\n    };\n  }\n}","map":{"version":3,"names":["EmptyValue","Symbol","getRawValue","num","RichNumber","val","constructor","format","fromNumber","cloneNumber","newVal","ret","DateNumber","getDetailedType","NumberType","NUMBER_DATE","CurrencyNumber","NUMBER_CURRENCY","TimeNumber","NUMBER_TIME","DateTimeNumber","NUMBER_DATETIME","PercentNumber","NUMBER_PERCENT","isExtendedNumber","getTypeOfExtendedNumber","NUMBER_RAW","getFormatOfExtendedNumber","undefined","getTypeFormatOfExtendedNumber","type"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/InterpreterValue.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\n/**\r\n * A symbol representing an empty cell value.\r\n */\nexport const EmptyValue = Symbol('Empty value');\nexport function getRawValue(num) {\n  if (num instanceof RichNumber) {\n    return num.val;\n  } else {\n    return num;\n  }\n}\nexport class RichNumber {\n  constructor(val, format) {\n    this.val = val;\n    this.format = format;\n  }\n  fromNumber(val) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return new this.constructor(val);\n  }\n}\nexport function cloneNumber(val, newVal) {\n  if (typeof val === 'number') {\n    return newVal;\n  } else {\n    const ret = val.fromNumber(newVal);\n    ret.format = val.format;\n    return ret;\n  }\n}\nexport class DateNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_DATE;\n  }\n}\nexport class CurrencyNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_CURRENCY;\n  }\n}\nexport class TimeNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_TIME;\n  }\n}\nexport class DateTimeNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_DATETIME;\n  }\n}\nexport class PercentNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_PERCENT;\n  }\n}\nexport function isExtendedNumber(val) {\n  return typeof val === 'number' || val instanceof RichNumber;\n}\nexport var NumberType;\n(function (NumberType) {\n  NumberType[\"NUMBER_RAW\"] = \"NUMBER_RAW\";\n  NumberType[\"NUMBER_DATE\"] = \"NUMBER_DATE\";\n  NumberType[\"NUMBER_TIME\"] = \"NUMBER_TIME\";\n  NumberType[\"NUMBER_DATETIME\"] = \"NUMBER_DATETIME\";\n  NumberType[\"NUMBER_CURRENCY\"] = \"NUMBER_CURRENCY\";\n  NumberType[\"NUMBER_PERCENT\"] = \"NUMBER_PERCENT\";\n})(NumberType || (NumberType = {}));\nexport function getTypeOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return num.getDetailedType();\n  } else {\n    return NumberType.NUMBER_RAW;\n  }\n}\nexport function getFormatOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return num.format;\n  } else {\n    return undefined;\n  }\n}\nexport function getTypeFormatOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return {\n      type: num.getDetailedType(),\n      format: num.format\n    };\n  } else {\n    return {\n      type: NumberType.NUMBER_RAW\n    };\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}