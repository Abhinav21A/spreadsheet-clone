{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { NoSheetWithIdError, NoSheetWithNameError, SheetNameAlreadyTakenError } from \"../errors.mjs\";\nimport { UIElement } from \"../i18n/index.mjs\";\nfunction canonicalize(sheetDisplayName) {\n  return sheetDisplayName.toLowerCase();\n}\nclass Sheet {\n  constructor(id, displayName) {\n    this.id = id;\n    this.displayName = displayName;\n  }\n  get canonicalName() {\n    return canonicalize(this.displayName);\n  }\n}\nexport class SheetMapping {\n  constructor(languages) {\n    this.languages = languages;\n    this.mappingFromCanonicalName = new Map();\n    this.mappingFromId = new Map();\n    this.lastSheetId = -1;\n    this.fetch = sheetName => {\n      const sheet = this.mappingFromCanonicalName.get(canonicalize(sheetName));\n      if (sheet === undefined) {\n        throw new NoSheetWithNameError(sheetName);\n      }\n      return sheet.id;\n    };\n    this.get = sheetName => {\n      var _a;\n      return (_a = this.mappingFromCanonicalName.get(canonicalize(sheetName))) === null || _a === void 0 ? void 0 : _a.id;\n    };\n    this.fetchDisplayName = sheetId => {\n      return this.fetchSheetById(sheetId).displayName;\n    };\n    this.sheetNamePrefix = languages.getUITranslation(UIElement.NEW_SHEET_PREFIX);\n  }\n  addSheet(newSheetDisplayName = `${this.sheetNamePrefix}${this.lastSheetId + 2}`) {\n    const newSheetCanonicalName = canonicalize(newSheetDisplayName);\n    if (this.mappingFromCanonicalName.has(newSheetCanonicalName)) {\n      throw new SheetNameAlreadyTakenError(newSheetDisplayName);\n    }\n    this.lastSheetId++;\n    const sheet = new Sheet(this.lastSheetId, newSheetDisplayName);\n    this.store(sheet);\n    return sheet.id;\n  }\n  removeSheet(sheetId) {\n    const sheet = this.fetchSheetById(sheetId);\n    if (sheetId == this.lastSheetId) {\n      --this.lastSheetId;\n    }\n    this.mappingFromCanonicalName.delete(sheet.canonicalName);\n    this.mappingFromId.delete(sheet.id);\n  }\n  getDisplayName(sheetId) {\n    var _a;\n    return (_a = this.mappingFromId.get(sheetId)) === null || _a === void 0 ? void 0 : _a.displayName;\n  }\n  *displayNames() {\n    for (const sheet of this.mappingFromCanonicalName.values()) {\n      yield sheet.displayName;\n    }\n  }\n  numberOfSheets() {\n    return this.mappingFromCanonicalName.size;\n  }\n  hasSheetWithId(sheetId) {\n    return this.mappingFromId.has(sheetId);\n  }\n  hasSheetWithName(sheetName) {\n    return this.mappingFromCanonicalName.has(canonicalize(sheetName));\n  }\n  renameSheet(sheetId, newDisplayName) {\n    const sheet = this.fetchSheetById(sheetId);\n    const currentDisplayName = sheet.displayName;\n    if (currentDisplayName === newDisplayName) {\n      return undefined;\n    }\n    const sheetWithThisCanonicalName = this.mappingFromCanonicalName.get(canonicalize(newDisplayName));\n    if (sheetWithThisCanonicalName !== undefined && sheetWithThisCanonicalName.id !== sheet.id) {\n      throw new SheetNameAlreadyTakenError(newDisplayName);\n    }\n    const currentCanonicalName = sheet.canonicalName;\n    this.mappingFromCanonicalName.delete(currentCanonicalName);\n    sheet.displayName = newDisplayName;\n    this.store(sheet);\n    return currentDisplayName;\n  }\n  sheetNames() {\n    return Array.from(this.mappingFromId.values()).map(s => s.displayName);\n  }\n  store(sheet) {\n    this.mappingFromId.set(sheet.id, sheet);\n    this.mappingFromCanonicalName.set(sheet.canonicalName, sheet);\n  }\n  fetchSheetById(sheetId) {\n    const sheet = this.mappingFromId.get(sheetId);\n    if (sheet === undefined) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return sheet;\n  }\n}","map":{"version":3,"names":["NoSheetWithIdError","NoSheetWithNameError","SheetNameAlreadyTakenError","UIElement","canonicalize","sheetDisplayName","toLowerCase","Sheet","constructor","id","displayName","canonicalName","SheetMapping","languages","mappingFromCanonicalName","Map","mappingFromId","lastSheetId","fetch","sheetName","sheet","get","undefined","_a","fetchDisplayName","sheetId","fetchSheetById","sheetNamePrefix","getUITranslation","NEW_SHEET_PREFIX","addSheet","newSheetDisplayName","newSheetCanonicalName","has","store","removeSheet","delete","getDisplayName","displayNames","values","numberOfSheets","size","hasSheetWithId","hasSheetWithName","renameSheet","newDisplayName","currentDisplayName","sheetWithThisCanonicalName","currentCanonicalName","sheetNames","Array","from","map","s","set"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/DependencyGraph/SheetMapping.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { NoSheetWithIdError, NoSheetWithNameError, SheetNameAlreadyTakenError } from \"../errors.mjs\";\nimport { UIElement } from \"../i18n/index.mjs\";\nfunction canonicalize(sheetDisplayName) {\n  return sheetDisplayName.toLowerCase();\n}\nclass Sheet {\n  constructor(id, displayName) {\n    this.id = id;\n    this.displayName = displayName;\n  }\n  get canonicalName() {\n    return canonicalize(this.displayName);\n  }\n}\nexport class SheetMapping {\n  constructor(languages) {\n    this.languages = languages;\n    this.mappingFromCanonicalName = new Map();\n    this.mappingFromId = new Map();\n    this.lastSheetId = -1;\n    this.fetch = sheetName => {\n      const sheet = this.mappingFromCanonicalName.get(canonicalize(sheetName));\n      if (sheet === undefined) {\n        throw new NoSheetWithNameError(sheetName);\n      }\n      return sheet.id;\n    };\n    this.get = sheetName => {\n      var _a;\n      return (_a = this.mappingFromCanonicalName.get(canonicalize(sheetName))) === null || _a === void 0 ? void 0 : _a.id;\n    };\n    this.fetchDisplayName = sheetId => {\n      return this.fetchSheetById(sheetId).displayName;\n    };\n    this.sheetNamePrefix = languages.getUITranslation(UIElement.NEW_SHEET_PREFIX);\n  }\n  addSheet(newSheetDisplayName = `${this.sheetNamePrefix}${this.lastSheetId + 2}`) {\n    const newSheetCanonicalName = canonicalize(newSheetDisplayName);\n    if (this.mappingFromCanonicalName.has(newSheetCanonicalName)) {\n      throw new SheetNameAlreadyTakenError(newSheetDisplayName);\n    }\n    this.lastSheetId++;\n    const sheet = new Sheet(this.lastSheetId, newSheetDisplayName);\n    this.store(sheet);\n    return sheet.id;\n  }\n  removeSheet(sheetId) {\n    const sheet = this.fetchSheetById(sheetId);\n    if (sheetId == this.lastSheetId) {\n      --this.lastSheetId;\n    }\n    this.mappingFromCanonicalName.delete(sheet.canonicalName);\n    this.mappingFromId.delete(sheet.id);\n  }\n  getDisplayName(sheetId) {\n    var _a;\n    return (_a = this.mappingFromId.get(sheetId)) === null || _a === void 0 ? void 0 : _a.displayName;\n  }\n  *displayNames() {\n    for (const sheet of this.mappingFromCanonicalName.values()) {\n      yield sheet.displayName;\n    }\n  }\n  numberOfSheets() {\n    return this.mappingFromCanonicalName.size;\n  }\n  hasSheetWithId(sheetId) {\n    return this.mappingFromId.has(sheetId);\n  }\n  hasSheetWithName(sheetName) {\n    return this.mappingFromCanonicalName.has(canonicalize(sheetName));\n  }\n  renameSheet(sheetId, newDisplayName) {\n    const sheet = this.fetchSheetById(sheetId);\n    const currentDisplayName = sheet.displayName;\n    if (currentDisplayName === newDisplayName) {\n      return undefined;\n    }\n    const sheetWithThisCanonicalName = this.mappingFromCanonicalName.get(canonicalize(newDisplayName));\n    if (sheetWithThisCanonicalName !== undefined && sheetWithThisCanonicalName.id !== sheet.id) {\n      throw new SheetNameAlreadyTakenError(newDisplayName);\n    }\n    const currentCanonicalName = sheet.canonicalName;\n    this.mappingFromCanonicalName.delete(currentCanonicalName);\n    sheet.displayName = newDisplayName;\n    this.store(sheet);\n    return currentDisplayName;\n  }\n  sheetNames() {\n    return Array.from(this.mappingFromId.values()).map(s => s.displayName);\n  }\n  store(sheet) {\n    this.mappingFromId.set(sheet.id, sheet);\n    this.mappingFromCanonicalName.set(sheet.canonicalName, sheet);\n  }\n  fetchSheetById(sheetId) {\n    const sheet = this.mappingFromId.get(sheetId);\n    if (sheet === undefined) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return sheet;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}