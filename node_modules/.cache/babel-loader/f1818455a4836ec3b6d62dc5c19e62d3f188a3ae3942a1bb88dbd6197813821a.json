{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"./Cell.mjs\";\nimport { timeToNumber } from \"./DateTimeHelper.mjs\";\nimport { ErrorMessage } from \"./error-message.mjs\";\nimport { UnableToParseError } from \"./errors.mjs\";\nimport { fixNegativeZero, isNumberOverflow } from \"./interpreter/ArithmeticHelper.mjs\";\nimport { cloneNumber, CurrencyNumber, DateNumber, DateTimeNumber, getRawValue, PercentNumber, TimeNumber } from \"./interpreter/InterpreterValue.mjs\";\nexport var CellContent;\n(function (CellContent) {\n  class Number {\n    constructor(value) {\n      this.value = value;\n      this.value = cloneNumber(this.value, fixNegativeZero(getRawValue(this.value)));\n    }\n  }\n  CellContent.Number = Number;\n  class String {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n  CellContent.String = String;\n  class Boolean {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n  CellContent.Boolean = Boolean;\n  class Empty {\n    static getSingletonInstance() {\n      if (!Empty.instance) {\n        Empty.instance = new Empty();\n      }\n      return Empty.instance;\n    }\n  }\n  CellContent.Empty = Empty;\n  class Formula {\n    constructor(formula) {\n      this.formula = formula;\n    }\n  }\n  CellContent.Formula = Formula;\n  class Error {\n    constructor(errorType, message) {\n      this.value = new CellError(errorType, message);\n    }\n  }\n  CellContent.Error = Error;\n})(CellContent || (CellContent = {}));\n/**\r\n * Checks whether string looks like formula or not.\r\n *\r\n * @param text - formula\r\n */\nexport function isFormula(text) {\n  return text.startsWith('=');\n}\nexport function isBoolean(text) {\n  const tl = text.toLowerCase();\n  return tl === 'true' || tl === 'false';\n}\nexport function isError(text, errorMapping) {\n  const upperCased = text.toUpperCase();\n  const errorRegex = /#[A-Za-z0-9\\/]+[?!]?/;\n  return errorRegex.test(upperCased) && Object.prototype.hasOwnProperty.call(errorMapping, upperCased);\n}\nexport class CellContentParser {\n  constructor(config, dateHelper, numberLiteralsHelper) {\n    this.config = config;\n    this.dateHelper = dateHelper;\n    this.numberLiteralsHelper = numberLiteralsHelper;\n  }\n  parse(content) {\n    if (content === undefined || content === null) {\n      return CellContent.Empty.getSingletonInstance();\n    } else if (typeof content === 'number') {\n      if (isNumberOverflow(content)) {\n        return new CellContent.Error(ErrorType.NUM, ErrorMessage.ValueLarge);\n      } else {\n        return new CellContent.Number(content);\n      }\n    } else if (typeof content === 'boolean') {\n      return new CellContent.Boolean(content);\n    } else if (content instanceof Date) {\n      const dateVal = this.dateHelper.dateToNumber({\n        day: content.getDate(),\n        month: content.getMonth() + 1,\n        year: content.getFullYear()\n      });\n      const timeVal = timeToNumber({\n        hours: content.getHours(),\n        minutes: content.getMinutes(),\n        seconds: content.getSeconds() + content.getMilliseconds() / 1000\n      });\n      const val = dateVal + timeVal;\n      if (val < 0) {\n        return new CellContent.Error(ErrorType.NUM, ErrorMessage.DateBounds);\n      }\n      if (val % 1 === 0) {\n        return new CellContent.Number(new DateNumber(val, 'Date()'));\n      } else if (val < 1) {\n        return new CellContent.Number(new TimeNumber(val, 'Date()'));\n      } else {\n        return new CellContent.Number(new DateTimeNumber(val, 'Date()'));\n      }\n    } else if (typeof content === 'string') {\n      if (isBoolean(content)) {\n        return new CellContent.Boolean(content.toLowerCase() === 'true');\n      } else if (isFormula(content)) {\n        return new CellContent.Formula(content);\n      } else if (isError(content, this.config.errorMapping)) {\n        return new CellContent.Error(this.config.errorMapping[content.toUpperCase()]);\n      } else {\n        let trimmedContent = content.trim();\n        let mode = 0;\n        let currency;\n        if (trimmedContent.endsWith('%')) {\n          mode = 1;\n          trimmedContent = trimmedContent.slice(0, trimmedContent.length - 1);\n        } else {\n          const res = this.currencyMatcher(trimmedContent);\n          if (res !== undefined) {\n            mode = 2;\n            [currency, trimmedContent] = res;\n          }\n        }\n        const val = this.numberLiteralsHelper.numericStringToMaybeNumber(trimmedContent);\n        if (val !== undefined) {\n          let parseAsNum;\n          if (mode === 1) {\n            parseAsNum = new PercentNumber(val / 100);\n          } else if (mode === 2) {\n            parseAsNum = new CurrencyNumber(val, currency);\n          } else {\n            parseAsNum = val;\n          }\n          return new CellContent.Number(parseAsNum);\n        }\n        const parsedDateNumber = this.dateHelper.dateStringToDateNumber(trimmedContent);\n        if (parsedDateNumber !== undefined) {\n          return new CellContent.Number(parsedDateNumber);\n        } else {\n          return new CellContent.String(content.startsWith('\\'') ? content.slice(1) : content);\n        }\n      }\n    } else {\n      throw new UnableToParseError(content);\n    }\n  }\n  currencyMatcher(token) {\n    for (const currency of this.config.currencySymbol) {\n      if (token.startsWith(currency)) {\n        return [currency, token.slice(currency.length)];\n      }\n      if (token.endsWith(currency)) {\n        return [currency, token.slice(0, token.length - currency.length)];\n      }\n    }\n    return undefined;\n  }\n}","map":{"version":3,"names":["CellError","ErrorType","timeToNumber","ErrorMessage","UnableToParseError","fixNegativeZero","isNumberOverflow","cloneNumber","CurrencyNumber","DateNumber","DateTimeNumber","getRawValue","PercentNumber","TimeNumber","CellContent","Number","constructor","value","String","Boolean","Empty","getSingletonInstance","instance","Formula","formula","Error","errorType","message","isFormula","text","startsWith","isBoolean","tl","toLowerCase","isError","errorMapping","upperCased","toUpperCase","errorRegex","test","Object","prototype","hasOwnProperty","call","CellContentParser","config","dateHelper","numberLiteralsHelper","parse","content","undefined","NUM","ValueLarge","Date","dateVal","dateToNumber","day","getDate","month","getMonth","year","getFullYear","timeVal","hours","getHours","minutes","getMinutes","seconds","getSeconds","getMilliseconds","val","DateBounds","trimmedContent","trim","mode","currency","endsWith","slice","length","res","currencyMatcher","numericStringToMaybeNumber","parseAsNum","parsedDateNumber","dateStringToDateNumber","token","currencySymbol"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/CellContentParser.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"./Cell.mjs\";\nimport { timeToNumber } from \"./DateTimeHelper.mjs\";\nimport { ErrorMessage } from \"./error-message.mjs\";\nimport { UnableToParseError } from \"./errors.mjs\";\nimport { fixNegativeZero, isNumberOverflow } from \"./interpreter/ArithmeticHelper.mjs\";\nimport { cloneNumber, CurrencyNumber, DateNumber, DateTimeNumber, getRawValue, PercentNumber, TimeNumber } from \"./interpreter/InterpreterValue.mjs\";\nexport var CellContent;\n(function (CellContent) {\n  class Number {\n    constructor(value) {\n      this.value = value;\n      this.value = cloneNumber(this.value, fixNegativeZero(getRawValue(this.value)));\n    }\n  }\n  CellContent.Number = Number;\n  class String {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n  CellContent.String = String;\n  class Boolean {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n  CellContent.Boolean = Boolean;\n  class Empty {\n    static getSingletonInstance() {\n      if (!Empty.instance) {\n        Empty.instance = new Empty();\n      }\n      return Empty.instance;\n    }\n  }\n  CellContent.Empty = Empty;\n  class Formula {\n    constructor(formula) {\n      this.formula = formula;\n    }\n  }\n  CellContent.Formula = Formula;\n  class Error {\n    constructor(errorType, message) {\n      this.value = new CellError(errorType, message);\n    }\n  }\n  CellContent.Error = Error;\n})(CellContent || (CellContent = {}));\n/**\r\n * Checks whether string looks like formula or not.\r\n *\r\n * @param text - formula\r\n */\nexport function isFormula(text) {\n  return text.startsWith('=');\n}\nexport function isBoolean(text) {\n  const tl = text.toLowerCase();\n  return tl === 'true' || tl === 'false';\n}\nexport function isError(text, errorMapping) {\n  const upperCased = text.toUpperCase();\n  const errorRegex = /#[A-Za-z0-9\\/]+[?!]?/;\n  return errorRegex.test(upperCased) && Object.prototype.hasOwnProperty.call(errorMapping, upperCased);\n}\nexport class CellContentParser {\n  constructor(config, dateHelper, numberLiteralsHelper) {\n    this.config = config;\n    this.dateHelper = dateHelper;\n    this.numberLiteralsHelper = numberLiteralsHelper;\n  }\n  parse(content) {\n    if (content === undefined || content === null) {\n      return CellContent.Empty.getSingletonInstance();\n    } else if (typeof content === 'number') {\n      if (isNumberOverflow(content)) {\n        return new CellContent.Error(ErrorType.NUM, ErrorMessage.ValueLarge);\n      } else {\n        return new CellContent.Number(content);\n      }\n    } else if (typeof content === 'boolean') {\n      return new CellContent.Boolean(content);\n    } else if (content instanceof Date) {\n      const dateVal = this.dateHelper.dateToNumber({\n        day: content.getDate(),\n        month: content.getMonth() + 1,\n        year: content.getFullYear()\n      });\n      const timeVal = timeToNumber({\n        hours: content.getHours(),\n        minutes: content.getMinutes(),\n        seconds: content.getSeconds() + content.getMilliseconds() / 1000\n      });\n      const val = dateVal + timeVal;\n      if (val < 0) {\n        return new CellContent.Error(ErrorType.NUM, ErrorMessage.DateBounds);\n      }\n      if (val % 1 === 0) {\n        return new CellContent.Number(new DateNumber(val, 'Date()'));\n      } else if (val < 1) {\n        return new CellContent.Number(new TimeNumber(val, 'Date()'));\n      } else {\n        return new CellContent.Number(new DateTimeNumber(val, 'Date()'));\n      }\n    } else if (typeof content === 'string') {\n      if (isBoolean(content)) {\n        return new CellContent.Boolean(content.toLowerCase() === 'true');\n      } else if (isFormula(content)) {\n        return new CellContent.Formula(content);\n      } else if (isError(content, this.config.errorMapping)) {\n        return new CellContent.Error(this.config.errorMapping[content.toUpperCase()]);\n      } else {\n        let trimmedContent = content.trim();\n        let mode = 0;\n        let currency;\n        if (trimmedContent.endsWith('%')) {\n          mode = 1;\n          trimmedContent = trimmedContent.slice(0, trimmedContent.length - 1);\n        } else {\n          const res = this.currencyMatcher(trimmedContent);\n          if (res !== undefined) {\n            mode = 2;\n            [currency, trimmedContent] = res;\n          }\n        }\n        const val = this.numberLiteralsHelper.numericStringToMaybeNumber(trimmedContent);\n        if (val !== undefined) {\n          let parseAsNum;\n          if (mode === 1) {\n            parseAsNum = new PercentNumber(val / 100);\n          } else if (mode === 2) {\n            parseAsNum = new CurrencyNumber(val, currency);\n          } else {\n            parseAsNum = val;\n          }\n          return new CellContent.Number(parseAsNum);\n        }\n        const parsedDateNumber = this.dateHelper.dateStringToDateNumber(trimmedContent);\n        if (parsedDateNumber !== undefined) {\n          return new CellContent.Number(parsedDateNumber);\n        } else {\n          return new CellContent.String(content.startsWith('\\'') ? content.slice(1) : content);\n        }\n      }\n    } else {\n      throw new UnableToParseError(content);\n    }\n  }\n  currencyMatcher(token) {\n    for (const currency of this.config.currencySymbol) {\n      if (token.startsWith(currency)) {\n        return [currency, token.slice(currency.length)];\n      }\n      if (token.endsWith(currency)) {\n        return [currency, token.slice(0, token.length - currency.length)];\n      }\n    }\n    return undefined;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}