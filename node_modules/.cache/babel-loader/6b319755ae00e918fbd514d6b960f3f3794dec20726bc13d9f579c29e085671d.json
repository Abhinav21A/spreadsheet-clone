{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nconst MAX_48BIT_INTEGER = 281474976710655;\nconst SHIFT_MIN_POSITIONS = -53;\nconst SHIFT_MAX_POSITIONS = 53;\nexport class BitShiftPlugin extends FunctionPlugin {\n  bitlshift(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITLSHIFT'), shiftLeft);\n  }\n  bitrshift(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITRSHIFT'), shiftRight);\n  }\n}\nBitShiftPlugin.implementedFunctions = {\n  'BITLSHIFT': {\n    method: 'bitlshift',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: SHIFT_MIN_POSITIONS,\n      maxValue: SHIFT_MAX_POSITIONS\n    }]\n  },\n  'BITRSHIFT': {\n    method: 'bitrshift',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: SHIFT_MIN_POSITIONS,\n      maxValue: SHIFT_MAX_POSITIONS\n    }]\n  }\n};\nfunction shiftLeft(value, positions) {\n  if (positions < 0) {\n    return shiftRight(value, -positions);\n  } else {\n    return validate(value * Math.pow(2, positions));\n  }\n}\nfunction shiftRight(value, positions) {\n  if (positions < 0) {\n    return shiftLeft(value, -positions);\n  } else {\n    return validate(Math.floor(value / Math.pow(2, positions)));\n  }\n}\nfunction validate(result) {\n  if (result > MAX_48BIT_INTEGER) {\n    return new CellError(ErrorType.NUM, ErrorMessage.BitshiftLong);\n  } else {\n    return result;\n  }\n}","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","FunctionArgumentType","FunctionPlugin","MAX_48BIT_INTEGER","SHIFT_MIN_POSITIONS","SHIFT_MAX_POSITIONS","BitShiftPlugin","bitlshift","ast","state","runFunction","args","metadata","shiftLeft","bitrshift","shiftRight","implementedFunctions","method","parameters","argumentType","INTEGER","minValue","maxValue","value","positions","validate","Math","pow","floor","result","NUM","BitshiftLong"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/BitShiftPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nconst MAX_48BIT_INTEGER = 281474976710655;\nconst SHIFT_MIN_POSITIONS = -53;\nconst SHIFT_MAX_POSITIONS = 53;\nexport class BitShiftPlugin extends FunctionPlugin {\n  bitlshift(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITLSHIFT'), shiftLeft);\n  }\n  bitrshift(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITRSHIFT'), shiftRight);\n  }\n}\nBitShiftPlugin.implementedFunctions = {\n  'BITLSHIFT': {\n    method: 'bitlshift',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: SHIFT_MIN_POSITIONS,\n      maxValue: SHIFT_MAX_POSITIONS\n    }]\n  },\n  'BITRSHIFT': {\n    method: 'bitrshift',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: SHIFT_MIN_POSITIONS,\n      maxValue: SHIFT_MAX_POSITIONS\n    }]\n  }\n};\nfunction shiftLeft(value, positions) {\n  if (positions < 0) {\n    return shiftRight(value, -positions);\n  } else {\n    return validate(value * Math.pow(2, positions));\n  }\n}\nfunction shiftRight(value, positions) {\n  if (positions < 0) {\n    return shiftLeft(value, -positions);\n  } else {\n    return validate(Math.floor(value / Math.pow(2, positions)));\n  }\n}\nfunction validate(result) {\n  if (result > MAX_48BIT_INTEGER) {\n    return new CellError(ErrorType.NUM, ErrorMessage.BitshiftLong);\n  } else {\n    return result;\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AACrD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,sBAAsB;AAC3E,MAAMC,iBAAiB,GAAG,eAAe;AACzC,MAAMC,mBAAmB,GAAG,CAAC,EAAE;AAC/B,MAAMC,mBAAmB,GAAG,EAAE;AAC9B,OAAO,MAAMC,cAAc,SAASJ,cAAc,CAAC;EACjDK,SAASA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAEC,SAAS,CAAC;EACjF;EACAC,SAASA,CAACN,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAEG,UAAU,CAAC;EAClF;AACF;AACAT,cAAc,CAACU,oBAAoB,GAAG;EACpC,WAAW,EAAE;IACXC,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAElB,oBAAoB,CAACmB,OAAO;MAC1CC,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDF,YAAY,EAAElB,oBAAoB,CAACmB,OAAO;MAC1CC,QAAQ,EAAEjB,mBAAmB;MAC7BkB,QAAQ,EAAEjB;IACZ,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXY,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAElB,oBAAoB,CAACmB,OAAO;MAC1CC,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDF,YAAY,EAAElB,oBAAoB,CAACmB,OAAO;MAC1CC,QAAQ,EAAEjB,mBAAmB;MAC7BkB,QAAQ,EAAEjB;IACZ,CAAC;EACH;AACF,CAAC;AACD,SAASQ,SAASA,CAACU,KAAK,EAAEC,SAAS,EAAE;EACnC,IAAIA,SAAS,GAAG,CAAC,EAAE;IACjB,OAAOT,UAAU,CAACQ,KAAK,EAAE,CAACC,SAAS,CAAC;EACtC,CAAC,MAAM;IACL,OAAOC,QAAQ,CAACF,KAAK,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,SAAS,CAAC,CAAC;EACjD;AACF;AACA,SAAST,UAAUA,CAACQ,KAAK,EAAEC,SAAS,EAAE;EACpC,IAAIA,SAAS,GAAG,CAAC,EAAE;IACjB,OAAOX,SAAS,CAACU,KAAK,EAAE,CAACC,SAAS,CAAC;EACrC,CAAC,MAAM;IACL,OAAOC,QAAQ,CAACC,IAAI,CAACE,KAAK,CAACL,KAAK,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,SAAS,CAAC,CAAC,CAAC;EAC7D;AACF;AACA,SAASC,QAAQA,CAACI,MAAM,EAAE;EACxB,IAAIA,MAAM,GAAG1B,iBAAiB,EAAE;IAC9B,OAAO,IAAIL,SAAS,CAACC,SAAS,CAAC+B,GAAG,EAAE9B,YAAY,CAAC+B,YAAY,CAAC;EAChE,CAAC,MAAM;IACL,OAAOF,MAAM;EACf;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}