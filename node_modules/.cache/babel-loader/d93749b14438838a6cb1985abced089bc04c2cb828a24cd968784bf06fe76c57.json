{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { besseli, besselj, besselk, bessely } from \"./3rdparty/bessel/bessel.mjs\";\nimport { beta, binomial, centralF, chisquare, erf, erfc, exponential, gamma, gammafn, gammaln, hypgeom, lognormal, negbin, normal, normalci, poisson, studentt, tci, weibull } from \"./3rdparty/jstat/jstat.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class StatisticalPlugin extends FunctionPlugin {\n  erf(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ERF'), (lowerBound, upperBound) => {\n      if (upperBound === undefined) {\n        return erf(lowerBound);\n      } else {\n        return erf(upperBound) - erf(lowerBound);\n      }\n    });\n  }\n  erfc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ERFC'), erfc);\n  }\n  expondist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('EXPON.DIST'), (x, lambda, cumulative) => {\n      if (cumulative) {\n        return exponential.cdf(x, lambda);\n      } else {\n        return exponential.pdf(x, lambda);\n      }\n    });\n  }\n  fisher(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FISHER'), x => Math.log((1 + x) / (1 - x)) / 2);\n  }\n  fisherinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FISHERINV'), y => 1 - 2 / (Math.exp(2 * y) + 1));\n  }\n  gamma(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAMMA'), gammafn);\n  }\n  gammadist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAMMA.DIST'), (value, alphaVal, betaVal, cumulative) => {\n      if (cumulative) {\n        return gamma.cdf(value, alphaVal, betaVal);\n      } else {\n        return gamma.pdf(value, alphaVal, betaVal);\n      }\n    });\n  }\n  gammaln(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAMMALN'), gammaln);\n  }\n  gammainv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAMMA.INV'), gamma.inv);\n  }\n  gauss(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAUSS'), z => normal.cdf(z, 0, 1) - 0.5);\n  }\n  betadist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BETA.DIST'), (x, alphaVal, betaVal, cumulative, A, B) => {\n      if (x <= A) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n      } else if (x >= B) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      x = (x - A) / (B - A);\n      if (cumulative) {\n        return beta.cdf(x, alphaVal, betaVal);\n      } else {\n        return beta.pdf(x, alphaVal, betaVal);\n      }\n    });\n  }\n  betainv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BETA.INV'), (x, alphaVal, betaVal, A, B) => {\n      if (A >= B) {\n        return new CellError(ErrorType.NUM, ErrorMessage.WrongOrder);\n      } else {\n        return beta.inv(x, alphaVal, betaVal) * (B - A) + A;\n      }\n    });\n  }\n  binomialdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BINOM.DIST'), (succ, trials, prob, cumulative) => {\n      if (succ > trials) {\n        return new CellError(ErrorType.NUM, ErrorMessage.WrongOrder);\n      }\n      succ = Math.trunc(succ);\n      trials = Math.trunc(trials);\n      if (cumulative) {\n        return binomial.cdf(succ, trials, prob);\n      } else {\n        return binomial.pdf(succ, trials, prob);\n      }\n    });\n  }\n  binomialinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BINOM.INV'), (trials, prob, alpha) => {\n      trials = Math.trunc(trials);\n      let lower = -1;\n      let upper = trials;\n      while (upper > lower + 1) {\n        const mid = Math.trunc((lower + upper) / 2);\n        if (binomial.cdf(mid, trials, prob) >= alpha) {\n          upper = mid;\n        } else {\n          lower = mid;\n        }\n      }\n      return upper;\n    });\n  }\n  besselifn(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BESSELI'), (x, n) => besseli(x, Math.trunc(n)));\n  }\n  besseljfn(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BESSELJ'), (x, n) => besselj(x, Math.trunc(n)));\n  }\n  besselkfn(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BESSELK'), (x, n) => besselk(x, Math.trunc(n)));\n  }\n  besselyfn(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BESSELY'), (x, n) => bessely(x, Math.trunc(n)));\n  }\n  chisqdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.DIST'), (x, deg, cumulative) => {\n      deg = Math.trunc(deg);\n      if (cumulative) {\n        return chisquare.cdf(x, deg);\n      } else {\n        return chisquare.pdf(x, deg);\n      }\n    });\n  }\n  chisqdistrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.DIST.RT'), (x, deg) => 1 - chisquare.cdf(x, Math.trunc(deg)));\n  }\n  chisqinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.INV'), (p, deg) => chisquare.inv(p, Math.trunc(deg)));\n  }\n  chisqinvrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.INV.RT'), (p, deg) => chisquare.inv(1.0 - p, Math.trunc(deg)));\n  }\n  fdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.DIST'), (x, deg1, deg2, cumulative) => {\n      deg1 = Math.trunc(deg1);\n      deg2 = Math.trunc(deg2);\n      if (cumulative) {\n        return centralF.cdf(x, deg1, deg2);\n      } else {\n        return centralF.pdf(x, deg1, deg2);\n      }\n    });\n  }\n  fdistrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.DIST.RT'), (x, deg1, deg2) => 1 - centralF.cdf(x, Math.trunc(deg1), Math.trunc(deg2)));\n  }\n  finv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.INV'), (p, deg1, deg2) => centralF.inv(p, Math.trunc(deg1), Math.trunc(deg2)));\n  }\n  finvrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.INV.RT'), (p, deg1, deg2) => centralF.inv(1.0 - p, Math.trunc(deg1), Math.trunc(deg2)));\n  }\n  weibulldist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('WEIBULL.DIST'), (x, shape, scale, cumulative) => {\n      if (cumulative) {\n        return weibull.cdf(x, scale, shape);\n      } else {\n        return weibull.pdf(x, scale, shape);\n      }\n    });\n  }\n  poissondist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('POISSON.DIST'), (x, mean, cumulative) => {\n      x = Math.trunc(x);\n      if (cumulative) {\n        return poisson.cdf(x, mean);\n      } else {\n        return poisson.pdf(x, mean);\n      }\n    });\n  }\n  hypgeomdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HYPGEOM.DIST'), (s, numberS, populationS, numberPop, cumulative) => {\n      if (s > numberS || s > populationS || numberS > numberPop || populationS > numberPop) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      if (s + numberPop < populationS + numberS) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      s = Math.trunc(s);\n      numberS = Math.trunc(numberS);\n      populationS = Math.trunc(populationS);\n      numberPop = Math.trunc(numberPop);\n      if (cumulative) {\n        return hypgeom.cdf(s, numberPop, populationS, numberS);\n      } else {\n        return hypgeom.pdf(s, numberPop, populationS, numberS);\n      }\n    });\n  }\n  tdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.DIST'), (x, deg, cumulative) => {\n      deg = Math.trunc(deg);\n      if (cumulative) {\n        return studentt.cdf(x, deg);\n      } else {\n        return studentt.pdf(x, deg);\n      }\n    });\n  }\n  tdist2t(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.DIST.2T'), (x, deg) => (1 - studentt.cdf(x, Math.trunc(deg))) * 2);\n  }\n  tdistrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.DIST.RT'), (x, deg) => 1 - studentt.cdf(x, Math.trunc(deg)));\n  }\n  tdistold(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TDIST'), (x, deg, mode) => mode * (1 - studentt.cdf(x, Math.trunc(deg))));\n  }\n  tinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.INV'), (p, deg) => studentt.inv(p, Math.trunc(deg)));\n  }\n  tinv2t(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.INV.2T'), (p, deg) => studentt.inv(1 - p / 2, Math.trunc(deg)));\n  }\n  lognormdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LOGNORM.DIST'), (x, mean, stddev, cumulative) => {\n      if (cumulative) {\n        return lognormal.cdf(x, mean, stddev);\n      } else {\n        return lognormal.pdf(x, mean, stddev);\n      }\n    });\n  }\n  lognorminv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LOGNORM.INV'), (p, mean, stddev) => lognormal.inv(p, mean, stddev));\n  }\n  normdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NORM.DIST'), (x, mean, stddev, cumulative) => {\n      if (cumulative) {\n        return normal.cdf(x, mean, stddev);\n      } else {\n        return normal.pdf(x, mean, stddev);\n      }\n    });\n  }\n  norminv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NORM.INV'), (p, mean, stddev) => normal.inv(p, mean, stddev));\n  }\n  normsdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NORM.S.DIST'), (x, cumulative) => {\n      if (cumulative) {\n        return normal.cdf(x, 0, 1);\n      } else {\n        return normal.pdf(x, 0, 1);\n      }\n    });\n  }\n  normsinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NORM.S.INV'), p => normal.inv(p, 0, 1));\n  }\n  phi(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PHI'), x => normal.pdf(x, 0, 1));\n  }\n  negbinomdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NEGBINOM.DIST'), (nf, ns, p, cumulative) => {\n      nf = Math.trunc(nf);\n      ns = Math.trunc(ns);\n      if (cumulative) {\n        return negbin.cdf(nf, ns, p);\n      } else {\n        return negbin.pdf(nf, ns, p);\n      }\n    });\n  }\n  confidencenorm(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CONFIDENCE.NORM'),\n    // eslint-disable-next-line\n    // @ts-ignore\n    (alpha, stddev, size) => normalci(1, alpha, stddev, Math.trunc(size))[1] - 1);\n  }\n  confidencet(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CONFIDENCE.T'), (alpha, stddev, size) => {\n      size = Math.trunc(size);\n      if (size === 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      // eslint-disable-next-line\n      // @ts-ignore\n      return tci(1, alpha, stddev, size)[1] - 1;\n    });\n  }\n  standardize(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('STANDARDIZE'), (x, mean, stddev) => (x - mean) / stddev);\n  }\n}\nStatisticalPlugin.implementedFunctions = {\n  'ERF': {\n    method: 'erf',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true\n    }]\n  },\n  'ERFC': {\n    method: 'erfc',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'EXPON.DIST': {\n    method: 'expondist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'FISHER': {\n    method: 'fisher',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: -1,\n      lessThan: 1\n    }]\n  },\n  'FISHERINV': {\n    method: 'fisherinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'GAMMA': {\n    method: 'gamma',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'GAMMA.DIST': {\n    method: 'gammadist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'GAMMALN': {\n    method: 'gammaln',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'GAMMA.INV': {\n    method: 'gammainv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'GAUSS': {\n    method: 'gauss',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'BETA.DIST': {\n    method: 'betadist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'BETA.INV': {\n    method: 'betainv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'BINOM.DIST': {\n    method: 'binomialdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'BINOM.INV': {\n    method: 'binomialinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }]\n  },\n  'BESSELI': {\n    method: 'besselifn',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'BESSELJ': {\n    method: 'besseljfn',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'BESSELK': {\n    method: 'besselkfn',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'BESSELY': {\n    method: 'besselyfn',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'CHISQ.DIST': {\n    method: 'chisqdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1,\n      maxValue: 1e10\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'CHISQ.DIST.RT': {\n    method: 'chisqdistrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1,\n      maxValue: 1e10\n    }]\n  },\n  'CHISQ.INV': {\n    method: 'chisqinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1,\n      maxValue: 1e10\n    }]\n  },\n  'CHISQ.INV.RT': {\n    method: 'chisqinvrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'F.DIST': {\n    method: 'fdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'F.DIST.RT': {\n    method: 'fdistrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'F.INV': {\n    method: 'finv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'F.INV.RT': {\n    method: 'finvrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'WEIBULL.DIST': {\n    method: 'weibulldist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'POISSON.DIST': {\n    method: 'poissondist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'HYPGEOM.DIST': {\n    method: 'hypgeomdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'T.DIST': {\n    method: 'tdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'T.DIST.2T': {\n    method: 'tdist2t',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'T.DIST.RT': {\n    method: 'tdistrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'TDIST': {\n    method: 'tdistold',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 2\n    }]\n  },\n  'T.INV': {\n    method: 'tinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'T.INV.2T': {\n    method: 'tinv2t',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'LOGNORM.DIST': {\n    method: 'lognormdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'LOGNORM.INV': {\n    method: 'lognorminv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'NORM.DIST': {\n    method: 'normdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'NORM.INV': {\n    method: 'norminv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'NORM.S.DIST': {\n    method: 'normsdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'NORM.S.INV': {\n    method: 'normsinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }]\n  },\n  'PHI': {\n    method: 'phi',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'NEGBINOM.DIST': {\n    method: 'negbinomdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'CONFIDENCE.NORM': {\n    method: 'confidencenorm',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'CONFIDENCE.T': {\n    method: 'confidencet',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'STANDARDIZE': {\n    method: 'standardize',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  }\n};\nStatisticalPlugin.aliases = {\n  NEGBINOMDIST: 'NEGBINOM.DIST',\n  EXPONDIST: 'EXPON.DIST',\n  BETADIST: 'BETA.DIST',\n  NORMDIST: 'NORM.DIST',\n  NORMINV: 'NORM.INV',\n  NORMSDIST: 'NORM.S.DIST',\n  NORMSINV: 'NORM.S.INV',\n  LOGNORMDIST: 'LOGNORM.DIST',\n  LOGINV: 'LOGNORM.INV',\n  TINV: 'T.INV.2T',\n  HYPGEOMDIST: 'HYPGEOM.DIST',\n  POISSON: 'POISSON.DIST',\n  WEIBULL: 'WEIBULL.DIST',\n  FINV: 'F.INV.RT',\n  FDIST: 'F.DIST.RT',\n  CHIDIST: 'CHISQ.DIST.RT',\n  CHIINV: 'CHISQ.INV.RT',\n  GAMMADIST: 'GAMMA.DIST',\n  'GAMMALN.PRECISE': 'GAMMALN',\n  GAMMAINV: 'GAMMA.INV',\n  BETAINV: 'BETA.INV',\n  BINOMDIST: 'BINOM.DIST',\n  CONFIDENCE: 'CONFIDENCE.NORM',\n  CRITBINOM: 'BINOM.INV',\n  WEIBULLDIST: 'WEIBULL.DIST',\n  TINV2T: 'T.INV.2T',\n  TDISTRT: 'T.DIST.RT',\n  TDIST2T: 'T.DIST.2T',\n  FINVRT: 'F.INV.RT',\n  FDISTRT: 'F.DIST.RT',\n  CHIDISTRT: 'CHISQ.DIST.RT',\n  CHIINVRT: 'CHISQ.INV.RT',\n  LOGNORMINV: 'LOGNORM.INV',\n  POISSONDIST: 'POISSON.DIST'\n};","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","besseli","besselj","besselk","bessely","beta","binomial","centralF","chisquare","erf","erfc","exponential","gamma","gammafn","gammaln","hypgeom","lognormal","negbin","normal","normalci","poisson","studentt","tci","weibull","FunctionArgumentType","FunctionPlugin","StatisticalPlugin","ast","state","runFunction","args","metadata","lowerBound","upperBound","undefined","expondist","x","lambda","cumulative","cdf","pdf","fisher","Math","log","fisherinv","y","exp","gammadist","value","alphaVal","betaVal","gammainv","inv","gauss","z","betadist","A","B","NUM","ValueSmall","ValueLarge","betainv","WrongOrder","binomialdist","succ","trials","prob","trunc","binomialinv","alpha","lower","upper","mid","besselifn","n","besseljfn","besselkfn","besselyfn","chisqdist","deg","chisqdistrt","chisqinv","p","chisqinvrt","fdist","deg1","deg2","fdistrt","finv","finvrt","weibulldist","shape","scale","poissondist","mean","hypgeomdist","s","numberS","populationS","numberPop","tdist","tdist2t","tdistrt","tdistold","mode","tinv","tinv2t","lognormdist","stddev","lognorminv","normdist","norminv","normsdist","normsinv","phi","negbinomdist","nf","ns","confidencenorm","size","confidencet","DIV_BY_ZERO","standardize","implementedFunctions","method","parameters","argumentType","NUMBER","optionalArg","minValue","greaterThan","BOOLEAN","lessThan","defaultValue","maxValue","INTEGER","aliases","NEGBINOMDIST","EXPONDIST","BETADIST","NORMDIST","NORMINV","NORMSDIST","NORMSINV","LOGNORMDIST","LOGINV","TINV","HYPGEOMDIST","POISSON","WEIBULL","FINV","FDIST","CHIDIST","CHIINV","GAMMADIST","GAMMAINV","BETAINV","BINOMDIST","CONFIDENCE","CRITBINOM","WEIBULLDIST","TINV2T","TDISTRT","TDIST2T","FINVRT","FDISTRT","CHIDISTRT","CHIINVRT","LOGNORMINV","POISSONDIST"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/StatisticalPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { besseli, besselj, besselk, bessely } from \"./3rdparty/bessel/bessel.mjs\";\nimport { beta, binomial, centralF, chisquare, erf, erfc, exponential, gamma, gammafn, gammaln, hypgeom, lognormal, negbin, normal, normalci, poisson, studentt, tci, weibull } from \"./3rdparty/jstat/jstat.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class StatisticalPlugin extends FunctionPlugin {\n  erf(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ERF'), (lowerBound, upperBound) => {\n      if (upperBound === undefined) {\n        return erf(lowerBound);\n      } else {\n        return erf(upperBound) - erf(lowerBound);\n      }\n    });\n  }\n  erfc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ERFC'), erfc);\n  }\n  expondist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('EXPON.DIST'), (x, lambda, cumulative) => {\n      if (cumulative) {\n        return exponential.cdf(x, lambda);\n      } else {\n        return exponential.pdf(x, lambda);\n      }\n    });\n  }\n  fisher(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FISHER'), x => Math.log((1 + x) / (1 - x)) / 2);\n  }\n  fisherinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FISHERINV'), y => 1 - 2 / (Math.exp(2 * y) + 1));\n  }\n  gamma(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAMMA'), gammafn);\n  }\n  gammadist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAMMA.DIST'), (value, alphaVal, betaVal, cumulative) => {\n      if (cumulative) {\n        return gamma.cdf(value, alphaVal, betaVal);\n      } else {\n        return gamma.pdf(value, alphaVal, betaVal);\n      }\n    });\n  }\n  gammaln(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAMMALN'), gammaln);\n  }\n  gammainv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAMMA.INV'), gamma.inv);\n  }\n  gauss(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GAUSS'), z => normal.cdf(z, 0, 1) - 0.5);\n  }\n  betadist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BETA.DIST'), (x, alphaVal, betaVal, cumulative, A, B) => {\n      if (x <= A) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n      } else if (x >= B) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      x = (x - A) / (B - A);\n      if (cumulative) {\n        return beta.cdf(x, alphaVal, betaVal);\n      } else {\n        return beta.pdf(x, alphaVal, betaVal);\n      }\n    });\n  }\n  betainv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BETA.INV'), (x, alphaVal, betaVal, A, B) => {\n      if (A >= B) {\n        return new CellError(ErrorType.NUM, ErrorMessage.WrongOrder);\n      } else {\n        return beta.inv(x, alphaVal, betaVal) * (B - A) + A;\n      }\n    });\n  }\n  binomialdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BINOM.DIST'), (succ, trials, prob, cumulative) => {\n      if (succ > trials) {\n        return new CellError(ErrorType.NUM, ErrorMessage.WrongOrder);\n      }\n      succ = Math.trunc(succ);\n      trials = Math.trunc(trials);\n      if (cumulative) {\n        return binomial.cdf(succ, trials, prob);\n      } else {\n        return binomial.pdf(succ, trials, prob);\n      }\n    });\n  }\n  binomialinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BINOM.INV'), (trials, prob, alpha) => {\n      trials = Math.trunc(trials);\n      let lower = -1;\n      let upper = trials;\n      while (upper > lower + 1) {\n        const mid = Math.trunc((lower + upper) / 2);\n        if (binomial.cdf(mid, trials, prob) >= alpha) {\n          upper = mid;\n        } else {\n          lower = mid;\n        }\n      }\n      return upper;\n    });\n  }\n  besselifn(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BESSELI'), (x, n) => besseli(x, Math.trunc(n)));\n  }\n  besseljfn(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BESSELJ'), (x, n) => besselj(x, Math.trunc(n)));\n  }\n  besselkfn(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BESSELK'), (x, n) => besselk(x, Math.trunc(n)));\n  }\n  besselyfn(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BESSELY'), (x, n) => bessely(x, Math.trunc(n)));\n  }\n  chisqdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.DIST'), (x, deg, cumulative) => {\n      deg = Math.trunc(deg);\n      if (cumulative) {\n        return chisquare.cdf(x, deg);\n      } else {\n        return chisquare.pdf(x, deg);\n      }\n    });\n  }\n  chisqdistrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.DIST.RT'), (x, deg) => 1 - chisquare.cdf(x, Math.trunc(deg)));\n  }\n  chisqinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.INV'), (p, deg) => chisquare.inv(p, Math.trunc(deg)));\n  }\n  chisqinvrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.INV.RT'), (p, deg) => chisquare.inv(1.0 - p, Math.trunc(deg)));\n  }\n  fdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.DIST'), (x, deg1, deg2, cumulative) => {\n      deg1 = Math.trunc(deg1);\n      deg2 = Math.trunc(deg2);\n      if (cumulative) {\n        return centralF.cdf(x, deg1, deg2);\n      } else {\n        return centralF.pdf(x, deg1, deg2);\n      }\n    });\n  }\n  fdistrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.DIST.RT'), (x, deg1, deg2) => 1 - centralF.cdf(x, Math.trunc(deg1), Math.trunc(deg2)));\n  }\n  finv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.INV'), (p, deg1, deg2) => centralF.inv(p, Math.trunc(deg1), Math.trunc(deg2)));\n  }\n  finvrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.INV.RT'), (p, deg1, deg2) => centralF.inv(1.0 - p, Math.trunc(deg1), Math.trunc(deg2)));\n  }\n  weibulldist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('WEIBULL.DIST'), (x, shape, scale, cumulative) => {\n      if (cumulative) {\n        return weibull.cdf(x, scale, shape);\n      } else {\n        return weibull.pdf(x, scale, shape);\n      }\n    });\n  }\n  poissondist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('POISSON.DIST'), (x, mean, cumulative) => {\n      x = Math.trunc(x);\n      if (cumulative) {\n        return poisson.cdf(x, mean);\n      } else {\n        return poisson.pdf(x, mean);\n      }\n    });\n  }\n  hypgeomdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HYPGEOM.DIST'), (s, numberS, populationS, numberPop, cumulative) => {\n      if (s > numberS || s > populationS || numberS > numberPop || populationS > numberPop) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      if (s + numberPop < populationS + numberS) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      s = Math.trunc(s);\n      numberS = Math.trunc(numberS);\n      populationS = Math.trunc(populationS);\n      numberPop = Math.trunc(numberPop);\n      if (cumulative) {\n        return hypgeom.cdf(s, numberPop, populationS, numberS);\n      } else {\n        return hypgeom.pdf(s, numberPop, populationS, numberS);\n      }\n    });\n  }\n  tdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.DIST'), (x, deg, cumulative) => {\n      deg = Math.trunc(deg);\n      if (cumulative) {\n        return studentt.cdf(x, deg);\n      } else {\n        return studentt.pdf(x, deg);\n      }\n    });\n  }\n  tdist2t(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.DIST.2T'), (x, deg) => (1 - studentt.cdf(x, Math.trunc(deg))) * 2);\n  }\n  tdistrt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.DIST.RT'), (x, deg) => 1 - studentt.cdf(x, Math.trunc(deg)));\n  }\n  tdistold(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TDIST'), (x, deg, mode) => mode * (1 - studentt.cdf(x, Math.trunc(deg))));\n  }\n  tinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.INV'), (p, deg) => studentt.inv(p, Math.trunc(deg)));\n  }\n  tinv2t(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.INV.2T'), (p, deg) => studentt.inv(1 - p / 2, Math.trunc(deg)));\n  }\n  lognormdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LOGNORM.DIST'), (x, mean, stddev, cumulative) => {\n      if (cumulative) {\n        return lognormal.cdf(x, mean, stddev);\n      } else {\n        return lognormal.pdf(x, mean, stddev);\n      }\n    });\n  }\n  lognorminv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LOGNORM.INV'), (p, mean, stddev) => lognormal.inv(p, mean, stddev));\n  }\n  normdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NORM.DIST'), (x, mean, stddev, cumulative) => {\n      if (cumulative) {\n        return normal.cdf(x, mean, stddev);\n      } else {\n        return normal.pdf(x, mean, stddev);\n      }\n    });\n  }\n  norminv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NORM.INV'), (p, mean, stddev) => normal.inv(p, mean, stddev));\n  }\n  normsdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NORM.S.DIST'), (x, cumulative) => {\n      if (cumulative) {\n        return normal.cdf(x, 0, 1);\n      } else {\n        return normal.pdf(x, 0, 1);\n      }\n    });\n  }\n  normsinv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NORM.S.INV'), p => normal.inv(p, 0, 1));\n  }\n  phi(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PHI'), x => normal.pdf(x, 0, 1));\n  }\n  negbinomdist(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NEGBINOM.DIST'), (nf, ns, p, cumulative) => {\n      nf = Math.trunc(nf);\n      ns = Math.trunc(ns);\n      if (cumulative) {\n        return negbin.cdf(nf, ns, p);\n      } else {\n        return negbin.pdf(nf, ns, p);\n      }\n    });\n  }\n  confidencenorm(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CONFIDENCE.NORM'),\n    // eslint-disable-next-line\n    // @ts-ignore\n    (alpha, stddev, size) => normalci(1, alpha, stddev, Math.trunc(size))[1] - 1);\n  }\n  confidencet(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CONFIDENCE.T'), (alpha, stddev, size) => {\n      size = Math.trunc(size);\n      if (size === 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      // eslint-disable-next-line\n      // @ts-ignore\n      return tci(1, alpha, stddev, size)[1] - 1;\n    });\n  }\n  standardize(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('STANDARDIZE'), (x, mean, stddev) => (x - mean) / stddev);\n  }\n}\nStatisticalPlugin.implementedFunctions = {\n  'ERF': {\n    method: 'erf',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true\n    }]\n  },\n  'ERFC': {\n    method: 'erfc',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'EXPON.DIST': {\n    method: 'expondist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'FISHER': {\n    method: 'fisher',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: -1,\n      lessThan: 1\n    }]\n  },\n  'FISHERINV': {\n    method: 'fisherinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'GAMMA': {\n    method: 'gamma',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'GAMMA.DIST': {\n    method: 'gammadist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'GAMMALN': {\n    method: 'gammaln',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'GAMMA.INV': {\n    method: 'gammainv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'GAUSS': {\n    method: 'gauss',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'BETA.DIST': {\n    method: 'betadist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'BETA.INV': {\n    method: 'betainv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'BINOM.DIST': {\n    method: 'binomialdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'BINOM.INV': {\n    method: 'binomialinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }]\n  },\n  'BESSELI': {\n    method: 'besselifn',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'BESSELJ': {\n    method: 'besseljfn',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'BESSELK': {\n    method: 'besselkfn',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'BESSELY': {\n    method: 'besselyfn',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'CHISQ.DIST': {\n    method: 'chisqdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1,\n      maxValue: 1e10\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'CHISQ.DIST.RT': {\n    method: 'chisqdistrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1,\n      maxValue: 1e10\n    }]\n  },\n  'CHISQ.INV': {\n    method: 'chisqinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1,\n      maxValue: 1e10\n    }]\n  },\n  'CHISQ.INV.RT': {\n    method: 'chisqinvrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'F.DIST': {\n    method: 'fdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'F.DIST.RT': {\n    method: 'fdistrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'F.INV': {\n    method: 'finv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'F.INV.RT': {\n    method: 'finvrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'WEIBULL.DIST': {\n    method: 'weibulldist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'POISSON.DIST': {\n    method: 'poissondist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'HYPGEOM.DIST': {\n    method: 'hypgeomdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'T.DIST': {\n    method: 'tdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'T.DIST.2T': {\n    method: 'tdist2t',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'T.DIST.RT': {\n    method: 'tdistrt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'TDIST': {\n    method: 'tdistold',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 2\n    }]\n  },\n  'T.INV': {\n    method: 'tinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'T.INV.2T': {\n    method: 'tinv2t',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'LOGNORM.DIST': {\n    method: 'lognormdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'LOGNORM.INV': {\n    method: 'lognorminv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'NORM.DIST': {\n    method: 'normdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'NORM.INV': {\n    method: 'norminv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'NORM.S.DIST': {\n    method: 'normsdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'NORM.S.INV': {\n    method: 'normsinv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }]\n  },\n  'PHI': {\n    method: 'phi',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'NEGBINOM.DIST': {\n    method: 'negbinomdist',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN\n    }]\n  },\n  'CONFIDENCE.NORM': {\n    method: 'confidencenorm',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'CONFIDENCE.T': {\n    method: 'confidencet',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      lessThan: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'STANDARDIZE': {\n    method: 'standardize',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  }\n};\nStatisticalPlugin.aliases = {\n  NEGBINOMDIST: 'NEGBINOM.DIST',\n  EXPONDIST: 'EXPON.DIST',\n  BETADIST: 'BETA.DIST',\n  NORMDIST: 'NORM.DIST',\n  NORMINV: 'NORM.INV',\n  NORMSDIST: 'NORM.S.DIST',\n  NORMSINV: 'NORM.S.INV',\n  LOGNORMDIST: 'LOGNORM.DIST',\n  LOGINV: 'LOGNORM.INV',\n  TINV: 'T.INV.2T',\n  HYPGEOMDIST: 'HYPGEOM.DIST',\n  POISSON: 'POISSON.DIST',\n  WEIBULL: 'WEIBULL.DIST',\n  FINV: 'F.INV.RT',\n  FDIST: 'F.DIST.RT',\n  CHIDIST: 'CHISQ.DIST.RT',\n  CHIINV: 'CHISQ.INV.RT',\n  GAMMADIST: 'GAMMA.DIST',\n  'GAMMALN.PRECISE': 'GAMMALN',\n  GAMMAINV: 'GAMMA.INV',\n  BETAINV: 'BETA.INV',\n  BINOMDIST: 'BINOM.DIST',\n  CONFIDENCE: 'CONFIDENCE.NORM',\n  CRITBINOM: 'BINOM.INV',\n  WEIBULLDIST: 'WEIBULL.DIST',\n  TINV2T: 'T.INV.2T',\n  TDISTRT: 'T.DIST.RT',\n  TDIST2T: 'T.DIST.2T',\n  FINVRT: 'F.INV.RT',\n  FDISTRT: 'F.DIST.RT',\n  CHIDISTRT: 'CHISQ.DIST.RT',\n  CHIINVRT: 'CHISQ.INV.RT',\n  LOGNORMINV: 'LOGNORM.INV',\n  POISSONDIST: 'POISSON.DIST'\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AACrD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,QAAQ,8BAA8B;AACjF,SAASC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,GAAG,EAAEC,IAAI,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,OAAO,QAAQ,4BAA4B;AAChN,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,sBAAsB;AAC3E,OAAO,MAAMC,iBAAiB,SAASD,cAAc,CAAC;EACpDhB,GAAGA,CAACkB,GAAG,EAAEC,KAAK,EAAE;IACd,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAACC,UAAU,EAAEC,UAAU,KAAK;MACzF,IAAIA,UAAU,KAAKC,SAAS,EAAE;QAC5B,OAAOzB,GAAG,CAACuB,UAAU,CAAC;MACxB,CAAC,MAAM;QACL,OAAOvB,GAAG,CAACwB,UAAU,CAAC,GAAGxB,GAAG,CAACuB,UAAU,CAAC;MAC1C;IACF,CAAC,CAAC;EACJ;EACAtB,IAAIA,CAACiB,GAAG,EAAEC,KAAK,EAAE;IACf,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,MAAM,CAAC,EAAErB,IAAI,CAAC;EACvE;EACAyB,SAASA,CAACR,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAACK,CAAC,EAAEC,MAAM,EAAEC,UAAU,KAAK;MAC/F,IAAIA,UAAU,EAAE;QACd,OAAO3B,WAAW,CAAC4B,GAAG,CAACH,CAAC,EAAEC,MAAM,CAAC;MACnC,CAAC,MAAM;QACL,OAAO1B,WAAW,CAAC6B,GAAG,CAACJ,CAAC,EAAEC,MAAM,CAAC;MACnC;IACF,CAAC,CAAC;EACJ;EACAI,MAAMA,CAACd,GAAG,EAAEC,KAAK,EAAE;IACjB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAEK,CAAC,IAAIM,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,GAAGP,CAAC,KAAK,CAAC,GAAGA,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzG;EACAQ,SAASA,CAACjB,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAEc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAIH,IAAI,CAACI,GAAG,CAAC,CAAC,GAAGD,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC1G;EACAjC,KAAKA,CAACe,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAElB,OAAO,CAAC;EAC3E;EACAkC,SAASA,CAACpB,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAACiB,KAAK,EAAEC,QAAQ,EAAEC,OAAO,EAAEZ,UAAU,KAAK;MAC9G,IAAIA,UAAU,EAAE;QACd,OAAO1B,KAAK,CAAC2B,GAAG,CAACS,KAAK,EAAEC,QAAQ,EAAEC,OAAO,CAAC;MAC5C,CAAC,MAAM;QACL,OAAOtC,KAAK,CAAC4B,GAAG,CAACQ,KAAK,EAAEC,QAAQ,EAAEC,OAAO,CAAC;MAC5C;IACF,CAAC,CAAC;EACJ;EACApC,OAAOA,CAACa,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAEjB,OAAO,CAAC;EAC7E;EACAqC,QAAQA,CAACxB,GAAG,EAAEC,KAAK,EAAE;IACnB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAEnB,KAAK,CAACwC,GAAG,CAAC;EACjF;EACAC,KAAKA,CAAC1B,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAEuB,CAAC,IAAIpC,MAAM,CAACqB,GAAG,CAACe,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;EAClG;EACAC,QAAQA,CAAC5B,GAAG,EAAEC,KAAK,EAAE;IACnB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE,CAACK,CAAC,EAAEa,QAAQ,EAAEC,OAAO,EAAEZ,UAAU,EAAEkB,CAAC,EAAEC,CAAC,KAAK;MAC/G,IAAIrB,CAAC,IAAIoB,CAAC,EAAE;QACV,OAAO,IAAI1D,SAAS,CAACC,SAAS,CAAC2D,GAAG,EAAE1D,YAAY,CAAC2D,UAAU,CAAC;MAC9D,CAAC,MAAM,IAAIvB,CAAC,IAAIqB,CAAC,EAAE;QACjB,OAAO,IAAI3D,SAAS,CAACC,SAAS,CAAC2D,GAAG,EAAE1D,YAAY,CAAC4D,UAAU,CAAC;MAC9D;MACAxB,CAAC,GAAG,CAACA,CAAC,GAAGoB,CAAC,KAAKC,CAAC,GAAGD,CAAC,CAAC;MACrB,IAAIlB,UAAU,EAAE;QACd,OAAOjC,IAAI,CAACkC,GAAG,CAACH,CAAC,EAAEa,QAAQ,EAAEC,OAAO,CAAC;MACvC,CAAC,MAAM;QACL,OAAO7C,IAAI,CAACmC,GAAG,CAACJ,CAAC,EAAEa,QAAQ,EAAEC,OAAO,CAAC;MACvC;IACF,CAAC,CAAC;EACJ;EACAW,OAAOA,CAAClC,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,UAAU,CAAC,EAAE,CAACK,CAAC,EAAEa,QAAQ,EAAEC,OAAO,EAAEM,CAAC,EAAEC,CAAC,KAAK;MAClG,IAAID,CAAC,IAAIC,CAAC,EAAE;QACV,OAAO,IAAI3D,SAAS,CAACC,SAAS,CAAC2D,GAAG,EAAE1D,YAAY,CAAC8D,UAAU,CAAC;MAC9D,CAAC,MAAM;QACL,OAAOzD,IAAI,CAAC+C,GAAG,CAAChB,CAAC,EAAEa,QAAQ,EAAEC,OAAO,CAAC,IAAIO,CAAC,GAAGD,CAAC,CAAC,GAAGA,CAAC;MACrD;IACF,CAAC,CAAC;EACJ;EACAO,YAAYA,CAACpC,GAAG,EAAEC,KAAK,EAAE;IACvB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAACiC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAE5B,UAAU,KAAK;MACxG,IAAI0B,IAAI,GAAGC,MAAM,EAAE;QACjB,OAAO,IAAInE,SAAS,CAACC,SAAS,CAAC2D,GAAG,EAAE1D,YAAY,CAAC8D,UAAU,CAAC;MAC9D;MACAE,IAAI,GAAGtB,IAAI,CAACyB,KAAK,CAACH,IAAI,CAAC;MACvBC,MAAM,GAAGvB,IAAI,CAACyB,KAAK,CAACF,MAAM,CAAC;MAC3B,IAAI3B,UAAU,EAAE;QACd,OAAOhC,QAAQ,CAACiC,GAAG,CAACyB,IAAI,EAAEC,MAAM,EAAEC,IAAI,CAAC;MACzC,CAAC,MAAM;QACL,OAAO5D,QAAQ,CAACkC,GAAG,CAACwB,IAAI,EAAEC,MAAM,EAAEC,IAAI,CAAC;MACzC;IACF,CAAC,CAAC;EACJ;EACAE,WAAWA,CAACzC,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE,CAACkC,MAAM,EAAEC,IAAI,EAAEG,KAAK,KAAK;MAC5FJ,MAAM,GAAGvB,IAAI,CAACyB,KAAK,CAACF,MAAM,CAAC;MAC3B,IAAIK,KAAK,GAAG,CAAC,CAAC;MACd,IAAIC,KAAK,GAAGN,MAAM;MAClB,OAAOM,KAAK,GAAGD,KAAK,GAAG,CAAC,EAAE;QACxB,MAAME,GAAG,GAAG9B,IAAI,CAACyB,KAAK,CAAC,CAACG,KAAK,GAAGC,KAAK,IAAI,CAAC,CAAC;QAC3C,IAAIjE,QAAQ,CAACiC,GAAG,CAACiC,GAAG,EAAEP,MAAM,EAAEC,IAAI,CAAC,IAAIG,KAAK,EAAE;UAC5CE,KAAK,GAAGC,GAAG;QACb,CAAC,MAAM;UACLF,KAAK,GAAGE,GAAG;QACb;MACF;MACA,OAAOD,KAAK;IACd,CAAC,CAAC;EACJ;EACAE,SAASA,CAAC9C,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAACK,CAAC,EAAEsC,CAAC,KAAKzE,OAAO,CAACmC,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACO,CAAC,CAAC,CAAC,CAAC;EACzG;EACAC,SAASA,CAAChD,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAACK,CAAC,EAAEsC,CAAC,KAAKxE,OAAO,CAACkC,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACO,CAAC,CAAC,CAAC,CAAC;EACzG;EACAE,SAASA,CAACjD,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAACK,CAAC,EAAEsC,CAAC,KAAKvE,OAAO,CAACiC,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACO,CAAC,CAAC,CAAC,CAAC;EACzG;EACAG,SAASA,CAAClD,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAACK,CAAC,EAAEsC,CAAC,KAAKtE,OAAO,CAACgC,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACO,CAAC,CAAC,CAAC,CAAC;EACzG;EACAI,SAASA,CAACnD,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAACK,CAAC,EAAE2C,GAAG,EAAEzC,UAAU,KAAK;MAC5FyC,GAAG,GAAGrC,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC;MACrB,IAAIzC,UAAU,EAAE;QACd,OAAO9B,SAAS,CAAC+B,GAAG,CAACH,CAAC,EAAE2C,GAAG,CAAC;MAC9B,CAAC,MAAM;QACL,OAAOvE,SAAS,CAACgC,GAAG,CAACJ,CAAC,EAAE2C,GAAG,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ;EACAC,WAAWA,CAACrD,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,eAAe,CAAC,EAAE,CAACK,CAAC,EAAE2C,GAAG,KAAK,CAAC,GAAGvE,SAAS,CAAC+B,GAAG,CAACH,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC,CAAC,CAAC;EAC7H;EACAE,QAAQA,CAACtD,GAAG,EAAEC,KAAK,EAAE;IACnB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE,CAACmD,CAAC,EAAEH,GAAG,KAAKvE,SAAS,CAAC4C,GAAG,CAAC8B,CAAC,EAAExC,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC,CAAC,CAAC;EACrH;EACAI,UAAUA,CAACxD,GAAG,EAAEC,KAAK,EAAE;IACrB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAACmD,CAAC,EAAEH,GAAG,KAAKvE,SAAS,CAAC4C,GAAG,CAAC,GAAG,GAAG8B,CAAC,EAAExC,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC,CAAC,CAAC;EAC9H;EACAK,KAAKA,CAACzD,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAACK,CAAC,EAAEiD,IAAI,EAAEC,IAAI,EAAEhD,UAAU,KAAK;MAC/F+C,IAAI,GAAG3C,IAAI,CAACyB,KAAK,CAACkB,IAAI,CAAC;MACvBC,IAAI,GAAG5C,IAAI,CAACyB,KAAK,CAACmB,IAAI,CAAC;MACvB,IAAIhD,UAAU,EAAE;QACd,OAAO/B,QAAQ,CAACgC,GAAG,CAACH,CAAC,EAAEiD,IAAI,EAAEC,IAAI,CAAC;MACpC,CAAC,MAAM;QACL,OAAO/E,QAAQ,CAACiC,GAAG,CAACJ,CAAC,EAAEiD,IAAI,EAAEC,IAAI,CAAC;MACpC;IACF,CAAC,CAAC;EACJ;EACAC,OAAOA,CAAC5D,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE,CAACK,CAAC,EAAEiD,IAAI,EAAEC,IAAI,KAAK,CAAC,GAAG/E,QAAQ,CAACgC,GAAG,CAACH,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACkB,IAAI,CAAC,EAAE3C,IAAI,CAACyB,KAAK,CAACmB,IAAI,CAAC,CAAC,CAAC;EAClJ;EACAE,IAAIA,CAAC7D,GAAG,EAAEC,KAAK,EAAE;IACf,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE,CAACmD,CAAC,EAAEG,IAAI,EAAEC,IAAI,KAAK/E,QAAQ,CAAC6C,GAAG,CAAC8B,CAAC,EAAExC,IAAI,CAACyB,KAAK,CAACkB,IAAI,CAAC,EAAE3C,IAAI,CAACyB,KAAK,CAACmB,IAAI,CAAC,CAAC,CAAC;EAC1I;EACAG,MAAMA,CAAC9D,GAAG,EAAEC,KAAK,EAAE;IACjB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,UAAU,CAAC,EAAE,CAACmD,CAAC,EAAEG,IAAI,EAAEC,IAAI,KAAK/E,QAAQ,CAAC6C,GAAG,CAAC,GAAG,GAAG8B,CAAC,EAAExC,IAAI,CAACyB,KAAK,CAACkB,IAAI,CAAC,EAAE3C,IAAI,CAACyB,KAAK,CAACmB,IAAI,CAAC,CAAC,CAAC;EACnJ;EACAI,WAAWA,CAAC/D,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAACK,CAAC,EAAEuD,KAAK,EAAEC,KAAK,EAAEtD,UAAU,KAAK;MACvG,IAAIA,UAAU,EAAE;QACd,OAAOf,OAAO,CAACgB,GAAG,CAACH,CAAC,EAAEwD,KAAK,EAAED,KAAK,CAAC;MACrC,CAAC,MAAM;QACL,OAAOpE,OAAO,CAACiB,GAAG,CAACJ,CAAC,EAAEwD,KAAK,EAAED,KAAK,CAAC;MACrC;IACF,CAAC,CAAC;EACJ;EACAE,WAAWA,CAAClE,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAACK,CAAC,EAAE0D,IAAI,EAAExD,UAAU,KAAK;MAC/FF,CAAC,GAAGM,IAAI,CAACyB,KAAK,CAAC/B,CAAC,CAAC;MACjB,IAAIE,UAAU,EAAE;QACd,OAAOlB,OAAO,CAACmB,GAAG,CAACH,CAAC,EAAE0D,IAAI,CAAC;MAC7B,CAAC,MAAM;QACL,OAAO1E,OAAO,CAACoB,GAAG,CAACJ,CAAC,EAAE0D,IAAI,CAAC;MAC7B;IACF,CAAC,CAAC;EACJ;EACAC,WAAWA,CAACpE,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAACiE,CAAC,EAAEC,OAAO,EAAEC,WAAW,EAAEC,SAAS,EAAE7D,UAAU,KAAK;MAC1H,IAAI0D,CAAC,GAAGC,OAAO,IAAID,CAAC,GAAGE,WAAW,IAAID,OAAO,GAAGE,SAAS,IAAID,WAAW,GAAGC,SAAS,EAAE;QACpF,OAAO,IAAIrG,SAAS,CAACC,SAAS,CAAC2D,GAAG,EAAE1D,YAAY,CAAC4D,UAAU,CAAC;MAC9D;MACA,IAAIoC,CAAC,GAAGG,SAAS,GAAGD,WAAW,GAAGD,OAAO,EAAE;QACzC,OAAO,IAAInG,SAAS,CAACC,SAAS,CAAC2D,GAAG,EAAE1D,YAAY,CAAC4D,UAAU,CAAC;MAC9D;MACAoC,CAAC,GAAGtD,IAAI,CAACyB,KAAK,CAAC6B,CAAC,CAAC;MACjBC,OAAO,GAAGvD,IAAI,CAACyB,KAAK,CAAC8B,OAAO,CAAC;MAC7BC,WAAW,GAAGxD,IAAI,CAACyB,KAAK,CAAC+B,WAAW,CAAC;MACrCC,SAAS,GAAGzD,IAAI,CAACyB,KAAK,CAACgC,SAAS,CAAC;MACjC,IAAI7D,UAAU,EAAE;QACd,OAAOvB,OAAO,CAACwB,GAAG,CAACyD,CAAC,EAAEG,SAAS,EAAED,WAAW,EAAED,OAAO,CAAC;MACxD,CAAC,MAAM;QACL,OAAOlF,OAAO,CAACyB,GAAG,CAACwD,CAAC,EAAEG,SAAS,EAAED,WAAW,EAAED,OAAO,CAAC;MACxD;IACF,CAAC,CAAC;EACJ;EACAG,KAAKA,CAACzE,GAAG,EAAEC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAACK,CAAC,EAAE2C,GAAG,EAAEzC,UAAU,KAAK;MACxFyC,GAAG,GAAGrC,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC;MACrB,IAAIzC,UAAU,EAAE;QACd,OAAOjB,QAAQ,CAACkB,GAAG,CAACH,CAAC,EAAE2C,GAAG,CAAC;MAC7B,CAAC,MAAM;QACL,OAAO1D,QAAQ,CAACmB,GAAG,CAACJ,CAAC,EAAE2C,GAAG,CAAC;MAC7B;IACF,CAAC,CAAC;EACJ;EACAsB,OAAOA,CAAC1E,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE,CAACK,CAAC,EAAE2C,GAAG,KAAK,CAAC,CAAC,GAAG1D,QAAQ,CAACkB,GAAG,CAACH,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;EAC9H;EACAuB,OAAOA,CAAC3E,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE,CAACK,CAAC,EAAE2C,GAAG,KAAK,CAAC,GAAG1D,QAAQ,CAACkB,GAAG,CAACH,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC,CAAC,CAAC;EACxH;EACAwB,QAAQA,CAAC5E,GAAG,EAAEC,KAAK,EAAE;IACnB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE,CAACK,CAAC,EAAE2C,GAAG,EAAEyB,IAAI,KAAKA,IAAI,IAAI,CAAC,GAAGnF,QAAQ,CAACkB,GAAG,CAACH,CAAC,EAAEM,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC,CAAC,CAAC,CAAC;EACnI;EACA0B,IAAIA,CAAC9E,GAAG,EAAEC,KAAK,EAAE;IACf,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE,CAACmD,CAAC,EAAEH,GAAG,KAAK1D,QAAQ,CAAC+B,GAAG,CAAC8B,CAAC,EAAExC,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC,CAAC,CAAC;EAChH;EACA2B,MAAMA,CAAC/E,GAAG,EAAEC,KAAK,EAAE;IACjB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,UAAU,CAAC,EAAE,CAACmD,CAAC,EAAEH,GAAG,KAAK1D,QAAQ,CAAC+B,GAAG,CAAC,CAAC,GAAG8B,CAAC,GAAG,CAAC,EAAExC,IAAI,CAACyB,KAAK,CAACY,GAAG,CAAC,CAAC,CAAC;EAC3H;EACA4B,WAAWA,CAAChF,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAACK,CAAC,EAAE0D,IAAI,EAAEc,MAAM,EAAEtE,UAAU,KAAK;MACvG,IAAIA,UAAU,EAAE;QACd,OAAOtB,SAAS,CAACuB,GAAG,CAACH,CAAC,EAAE0D,IAAI,EAAEc,MAAM,CAAC;MACvC,CAAC,MAAM;QACL,OAAO5F,SAAS,CAACwB,GAAG,CAACJ,CAAC,EAAE0D,IAAI,EAAEc,MAAM,CAAC;MACvC;IACF,CAAC,CAAC;EACJ;EACAC,UAAUA,CAAClF,GAAG,EAAEC,KAAK,EAAE;IACrB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,aAAa,CAAC,EAAE,CAACmD,CAAC,EAAEY,IAAI,EAAEc,MAAM,KAAK5F,SAAS,CAACoC,GAAG,CAAC8B,CAAC,EAAEY,IAAI,EAAEc,MAAM,CAAC,CAAC;EAC7H;EACAE,QAAQA,CAACnF,GAAG,EAAEC,KAAK,EAAE;IACnB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE,CAACK,CAAC,EAAE0D,IAAI,EAAEc,MAAM,EAAEtE,UAAU,KAAK;MACpG,IAAIA,UAAU,EAAE;QACd,OAAOpB,MAAM,CAACqB,GAAG,CAACH,CAAC,EAAE0D,IAAI,EAAEc,MAAM,CAAC;MACpC,CAAC,MAAM;QACL,OAAO1F,MAAM,CAACsB,GAAG,CAACJ,CAAC,EAAE0D,IAAI,EAAEc,MAAM,CAAC;MACpC;IACF,CAAC,CAAC;EACJ;EACAG,OAAOA,CAACpF,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,UAAU,CAAC,EAAE,CAACmD,CAAC,EAAEY,IAAI,EAAEc,MAAM,KAAK1F,MAAM,CAACkC,GAAG,CAAC8B,CAAC,EAAEY,IAAI,EAAEc,MAAM,CAAC,CAAC;EACvH;EACAI,SAASA,CAACrF,GAAG,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,aAAa,CAAC,EAAE,CAACK,CAAC,EAAEE,UAAU,KAAK;MACxF,IAAIA,UAAU,EAAE;QACd,OAAOpB,MAAM,CAACqB,GAAG,CAACH,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC5B,CAAC,MAAM;QACL,OAAOlB,MAAM,CAACsB,GAAG,CAACJ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC5B;IACF,CAAC,CAAC;EACJ;EACA6E,QAAQA,CAACtF,GAAG,EAAEC,KAAK,EAAE;IACnB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAEmD,CAAC,IAAIhE,MAAM,CAACkC,GAAG,CAAC8B,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACjG;EACAgC,GAAGA,CAACvF,GAAG,EAAEC,KAAK,EAAE;IACd,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,KAAK,CAAC,EAAEK,CAAC,IAAIlB,MAAM,CAACsB,GAAG,CAACJ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1F;EACA+E,YAAYA,CAACxF,GAAG,EAAEC,KAAK,EAAE;IACvB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,eAAe,CAAC,EAAE,CAACqF,EAAE,EAAEC,EAAE,EAAEnC,CAAC,EAAE5C,UAAU,KAAK;MAClG8E,EAAE,GAAG1E,IAAI,CAACyB,KAAK,CAACiD,EAAE,CAAC;MACnBC,EAAE,GAAG3E,IAAI,CAACyB,KAAK,CAACkD,EAAE,CAAC;MACnB,IAAI/E,UAAU,EAAE;QACd,OAAOrB,MAAM,CAACsB,GAAG,CAAC6E,EAAE,EAAEC,EAAE,EAAEnC,CAAC,CAAC;MAC9B,CAAC,MAAM;QACL,OAAOjE,MAAM,CAACuB,GAAG,CAAC4E,EAAE,EAAEC,EAAE,EAAEnC,CAAC,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ;EACAoC,cAAcA,CAAC3F,GAAG,EAAEC,KAAK,EAAE;IACzB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,iBAAiB,CAAC;IACzE;IACA;IACA,CAACsC,KAAK,EAAEuC,MAAM,EAAEW,IAAI,KAAKpG,QAAQ,CAAC,CAAC,EAAEkD,KAAK,EAAEuC,MAAM,EAAElE,IAAI,CAACyB,KAAK,CAACoD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC/E;EACAC,WAAWA,CAAC7F,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAACsC,KAAK,EAAEuC,MAAM,EAAEW,IAAI,KAAK;MAC/FA,IAAI,GAAG7E,IAAI,CAACyB,KAAK,CAACoD,IAAI,CAAC;MACvB,IAAIA,IAAI,KAAK,CAAC,EAAE;QACd,OAAO,IAAIzH,SAAS,CAACC,SAAS,CAAC0H,WAAW,CAAC;MAC7C;MACA;MACA;MACA,OAAOnG,GAAG,CAAC,CAAC,EAAE+C,KAAK,EAAEuC,MAAM,EAAEW,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC3C,CAAC,CAAC;EACJ;EACAG,WAAWA,CAAC/F,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,aAAa,CAAC,EAAE,CAACK,CAAC,EAAE0D,IAAI,EAAEc,MAAM,KAAK,CAACxE,CAAC,GAAG0D,IAAI,IAAIc,MAAM,CAAC;EAClH;AACF;AACAlF,iBAAiB,CAACiG,oBAAoB,GAAG;EACvC,KAAK,EAAE;IACLC,MAAM,EAAE,KAAK;IACbC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACD,MAAM,EAAE;IACNJ,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC;EACH,CAAC;EACD,YAAY,EAAE;IACZH,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,QAAQ,EAAE;IACRP,MAAM,EAAE,QAAQ;IAChBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC,CAAC;MACfE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXR,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACPH,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC;EACH,CAAC;EACD,YAAY,EAAE;IACZH,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,SAAS,EAAE;IACTP,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXN,MAAM,EAAE,UAAU;IAClBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXG,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDN,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACPN,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXH,MAAM,EAAE,UAAU;IAClBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC,EAAE;MACDL,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCM,YAAY,EAAE;IAChB,CAAC,EAAE;MACDP,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCM,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACD,UAAU,EAAE;IACVT,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdI,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCM,YAAY,EAAE;IAChB,CAAC,EAAE;MACDP,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCM,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACD,YAAY,EAAE;IACZT,MAAM,EAAE,cAAc;IACtBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXP,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,SAAS,EAAE;IACTR,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,SAAS,EAAE;IACTL,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,SAAS,EAAE;IACTL,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,SAAS,EAAE;IACTL,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,YAAY,EAAE;IACZL,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,eAAe,EAAE;IACfP,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXV,MAAM,EAAE,UAAU;IAClBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,cAAc,EAAE;IACdV,MAAM,EAAE,YAAY;IACpBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,QAAQ,EAAE;IACRL,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXP,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACPL,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,UAAU,EAAE;IACVL,MAAM,EAAE,QAAQ;IAChBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,cAAc,EAAE;IACdL,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,cAAc,EAAE;IACdP,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,cAAc,EAAE;IACdP,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,QAAQ,EAAE;IACRP,MAAM,EAAE,OAAO;IACfC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXP,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXL,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACPL,MAAM,EAAE,UAAU;IAClBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAAC+G,OAAO;MAC1CN,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACPV,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDN,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,UAAU,EAAE;IACVL,MAAM,EAAE,QAAQ;IAChBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdI,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,cAAc,EAAE;IACdL,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,aAAa,EAAE;IACbP,MAAM,EAAE,YAAY;IACpBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDN,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACD,WAAW,EAAE;IACXN,MAAM,EAAE,UAAU;IAClBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,UAAU,EAAE;IACVP,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDN,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACD,aAAa,EAAE;IACbN,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,YAAY,EAAE;IACZP,MAAM,EAAE,UAAU;IAClBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,KAAK,EAAE;IACLR,MAAM,EAAE,KAAK;IACbC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC;EACH,CAAC;EACD,eAAe,EAAE;IACfH,MAAM,EAAE,cAAc;IACtBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDH,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE,CAAC;MACXK,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDR,YAAY,EAAEtG,oBAAoB,CAAC2G;IACrC,CAAC;EACH,CAAC;EACD,iBAAiB,EAAE;IACjBP,MAAM,EAAE,gBAAgB;IACxBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDN,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,cAAc,EAAE;IACdL,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE;IACZ,CAAC,EAAE;MACDN,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC,EAAE;MACDJ,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCE,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,aAAa,EAAE;IACbL,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG;IACrC,CAAC,EAAE;MACDD,YAAY,EAAEtG,oBAAoB,CAACuG,MAAM;MACzCG,WAAW,EAAE;IACf,CAAC;EACH;AACF,CAAC;AACDxG,iBAAiB,CAAC8G,OAAO,GAAG;EAC1BC,YAAY,EAAE,eAAe;EAC7BC,SAAS,EAAE,YAAY;EACvBC,QAAQ,EAAE,WAAW;EACrBC,QAAQ,EAAE,WAAW;EACrBC,OAAO,EAAE,UAAU;EACnBC,SAAS,EAAE,aAAa;EACxBC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,cAAc;EAC3BC,MAAM,EAAE,aAAa;EACrBC,IAAI,EAAE,UAAU;EAChBC,WAAW,EAAE,cAAc;EAC3BC,OAAO,EAAE,cAAc;EACvBC,OAAO,EAAE,cAAc;EACvBC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,WAAW;EAClBC,OAAO,EAAE,eAAe;EACxBC,MAAM,EAAE,cAAc;EACtBC,SAAS,EAAE,YAAY;EACvB,iBAAiB,EAAE,SAAS;EAC5BC,QAAQ,EAAE,WAAW;EACrBC,OAAO,EAAE,UAAU;EACnBC,SAAS,EAAE,YAAY;EACvBC,UAAU,EAAE,iBAAiB;EAC7BC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE,cAAc;EAC3BC,MAAM,EAAE,UAAU;EAClBC,OAAO,EAAE,WAAW;EACpBC,OAAO,EAAE,WAAW;EACpBC,MAAM,EAAE,UAAU;EAClBC,OAAO,EAAE,WAAW;EACpBC,SAAS,EAAE,eAAe;EAC1BC,QAAQ,EAAE,cAAc;EACxBC,UAAU,EAAE,aAAa;EACzBC,WAAW,EAAE;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}