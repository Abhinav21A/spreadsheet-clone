{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { EmptyValue, getRawValue, isExtendedNumber, NumberType } from \"../InterpreterValue.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class FinancialPlugin extends FunctionPlugin {\n  pmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PMT'), pmtCore);\n  }\n  ipmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IPMT'), ipmtCore);\n  }\n  ppmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PPMT'), ppmtCore);\n  }\n  fv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FV'), fvCore);\n  }\n  cumipmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CUMIPMT'), (rate, periods, value, start, end, type) => {\n      if (start > end) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EndStartPeriod);\n      }\n      let acc = 0;\n      for (let i = start; i <= end; i++) {\n        acc += ipmtCore(rate, i, periods, value, 0, type);\n      }\n      return acc;\n    });\n  }\n  cumprinc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CUMPRINC'), (rate, periods, value, start, end, type) => {\n      if (start > end) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EndStartPeriod);\n      }\n      let acc = 0;\n      for (let i = start; i <= end; i++) {\n        acc += ppmtCore(rate, i, periods, value, 0, type);\n      }\n      return acc;\n    });\n  }\n  db(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DB'), (cost, salvage, life, period, month) => {\n      if (month === 12 && period > life || period > life + 1) {\n        return new CellError(ErrorType.NUM, ErrorMessage.PeriodLong);\n      }\n      if (salvage >= cost) {\n        return 0;\n      }\n      const rate = Math.round((1 - Math.pow(salvage / cost, 1 / life)) * 1000) / 1000;\n      const initial = cost * rate * month / 12;\n      if (period === 1) {\n        return initial;\n      }\n      let total = initial;\n      for (let i = 0; i < period - 2; i++) {\n        total += (cost - total) * rate;\n      }\n      if (period === life + 1) {\n        return (cost - total) * rate * (12 - month) / 12;\n      }\n      return (cost - total) * rate;\n    });\n  }\n  ddb(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DDB'), (cost, salvage, life, period, factor) => {\n      if (period > life) {\n        return new CellError(ErrorType.NUM);\n      }\n      let rate = factor / life;\n      let oldValue;\n      if (rate >= 1) {\n        rate = 1;\n        if (period === 1) {\n          oldValue = cost;\n        } else {\n          oldValue = 0;\n        }\n      } else {\n        oldValue = cost * Math.pow(1 - rate, period - 1);\n      }\n      const newValue = cost * Math.pow(1 - rate, period);\n      return Math.max(oldValue - Math.max(salvage, newValue), 0);\n    });\n  }\n  dollarde(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DOLLARDE'), (dollar, fraction) => {\n      if (fraction < 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      fraction = Math.trunc(fraction);\n      while (fraction > 10) {\n        fraction /= 10;\n      }\n      return Math.trunc(dollar) + (dollar - Math.trunc(dollar)) * 10 / fraction;\n    });\n  }\n  dollarfr(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DOLLARFR'), (dollar, fraction) => {\n      if (fraction < 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      fraction = Math.trunc(fraction);\n      while (fraction > 10) {\n        fraction /= 10;\n      }\n      return Math.trunc(dollar) + (dollar - Math.trunc(dollar)) * fraction / 10;\n    });\n  }\n  effect(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('EFFECT'), (rate, periods) => {\n      periods = Math.trunc(periods);\n      return Math.pow(1 + rate / periods, periods) - 1;\n    });\n  }\n  ispmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ISPMT'), (rate, period, periods, value) => {\n      if (periods === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return value * rate * (period / periods - 1);\n    });\n  }\n  nominal(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NOMINAL'), (rate, periods) => {\n      periods = Math.trunc(periods);\n      return (Math.pow(rate + 1, 1 / periods) - 1) * periods;\n    });\n  }\n  nper(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NPER'), (rate, payment, present, future, type) => {\n      if (rate === 0) {\n        if (payment === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        return (-present - future) / payment;\n      }\n      if (type) {\n        payment *= 1 + rate;\n      }\n      return Math.log((payment - future * rate) / (present * rate + payment)) / Math.log(1 + rate);\n    });\n  }\n  rate(ast, state) {\n    // Newton's method: https://en.wikipedia.org/wiki/Newton%27s_method\n    return this.runFunction(ast.args, state, this.metadata('RATE'), (periods, payment, present, future, type, guess) => {\n      if (guess <= -1) {\n        return new CellError(ErrorType.VALUE);\n      }\n      const epsMax = 1e-7;\n      const iterMax = 50;\n      let rate = guess;\n      type = type ? 1 : 0;\n      for (let i = 0; i < iterMax; i++) {\n        if (rate <= -1) {\n          return new CellError(ErrorType.NUM);\n        }\n        let y;\n        if (Math.abs(rate) < epsMax) {\n          y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n        } else {\n          const f = Math.pow(1 + rate, periods);\n          y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n        }\n        if (Math.abs(y) < epsMax) {\n          return rate;\n        }\n        let dy;\n        if (Math.abs(rate) < epsMax) {\n          dy = present * periods + payment * type * periods;\n        } else {\n          const f = Math.pow(1 + rate, periods);\n          const df = periods * Math.pow(1 + rate, periods - 1);\n          dy = present * df + payment * (1 / rate + type) * df + payment * (-1 / (rate * rate)) * (f - 1);\n        }\n        rate -= y / dy;\n      }\n      return new CellError(ErrorType.NUM);\n    });\n  }\n  pv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PV'), (rate, periods, payment, future, type) => {\n      type = type ? 1 : 0;\n      if (rate === -1) {\n        if (periods === 0) {\n          return new CellError(ErrorType.NUM);\n        } else {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n      }\n      if (rate === 0) {\n        return -payment * periods - future;\n      } else {\n        return ((1 - Math.pow(1 + rate, periods)) * payment * (1 + rate * type) / rate - future) / Math.pow(1 + rate, periods);\n      }\n    });\n  }\n  rri(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RRI'), (periods, present, future) => {\n      if (present === 0 || future < 0 && present > 0 || future > 0 && present < 0) {\n        return new CellError(ErrorType.NUM);\n      }\n      return Math.pow(future / present, 1 / periods) - 1;\n    });\n  }\n  sln(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SLN'), (cost, salvage, life) => {\n      if (life === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return (cost - salvage) / life;\n    });\n  }\n  syd(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SYD'), (cost, salvage, life, period) => {\n      if (period > life) {\n        return new CellError(ErrorType.NUM);\n      }\n      return (cost - salvage) * (life - period + 1) * 2 / (life * (life + 1));\n    });\n  }\n  tbilleq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TBILLEQ'), (settlement, maturity, discount) => {\n      settlement = Math.round(settlement);\n      maturity = Math.round(maturity);\n      if (settlement >= maturity) {\n        return new CellError(ErrorType.NUM);\n      }\n      const startDate = this.dateTimeHelper.numberToSimpleDate(settlement);\n      const endDate = this.dateTimeHelper.numberToSimpleDate(maturity);\n      if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {\n        return new CellError(ErrorType.NUM);\n      }\n      const denom = 360 - discount * (maturity - settlement);\n      if (denom === 0) {\n        return 0;\n      }\n      if (denom < 0) {\n        return new CellError(ErrorType.NUM);\n      }\n      return 365 * discount / denom;\n    });\n  }\n  tbillprice(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TBILLPRICE'), (settlement, maturity, discount) => {\n      settlement = Math.round(settlement);\n      maturity = Math.round(maturity);\n      if (settlement >= maturity) {\n        return new CellError(ErrorType.NUM);\n      }\n      const startDate = this.dateTimeHelper.numberToSimpleDate(settlement);\n      const endDate = this.dateTimeHelper.numberToSimpleDate(maturity);\n      if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {\n        return new CellError(ErrorType.NUM);\n      }\n      const denom = 360 - discount * (maturity - settlement);\n      if (denom === 0) {\n        return 0;\n      }\n      if (denom < 0) {\n        return new CellError(ErrorType.NUM);\n      }\n      return 100 * (1 - discount * (maturity - settlement) / 360);\n    });\n  }\n  tbillyield(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TBILLYIELD'), (settlement, maturity, price) => {\n      settlement = Math.round(settlement);\n      maturity = Math.round(maturity);\n      if (settlement >= maturity) {\n        return new CellError(ErrorType.NUM);\n      }\n      const startDate = this.dateTimeHelper.numberToSimpleDate(settlement);\n      const endDate = this.dateTimeHelper.numberToSimpleDate(maturity);\n      if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {\n        return new CellError(ErrorType.NUM);\n      }\n      return (100 - price) * 360 / (price * (maturity - settlement));\n    });\n  }\n  fvschedule(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FVSCHEDULE'), (value, ratios) => {\n      const vals = ratios.valuesFromTopLeftCorner();\n      for (const val of vals) {\n        if (val instanceof CellError) {\n          return val;\n        }\n      }\n      for (const val of vals) {\n        if (isExtendedNumber(val)) {\n          value *= 1 + getRawValue(val);\n        } else if (val !== EmptyValue) {\n          return new CellError(ErrorType.VALUE, ErrorMessage.NumberExpected);\n        }\n      }\n      return value;\n    });\n  }\n  npv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NPV'), (rate, ...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      return npvCore(rate, coerced);\n    });\n  }\n  mirr(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MIRR'), (range, frate, rrate) => {\n      const vals = this.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());\n      if (vals instanceof CellError) {\n        return vals;\n      }\n      let posFlag = false;\n      let negFlag = false;\n      const posValues = [];\n      const negValues = [];\n      for (const val of vals) {\n        if (val > 0) {\n          posFlag = true;\n          posValues.push(val);\n          negValues.push(0);\n        } else if (val < 0) {\n          negFlag = true;\n          negValues.push(val);\n          posValues.push(0);\n        } else {\n          negValues.push(0);\n          posValues.push(0);\n        }\n      }\n      if (!posFlag || !negFlag) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const n = vals.length;\n      const nom = npvCore(rrate, posValues);\n      if (nom instanceof CellError) {\n        return nom;\n      }\n      const denom = npvCore(frate, negValues);\n      if (denom instanceof CellError) {\n        return denom;\n      }\n      return Math.pow(-nom * Math.pow(1 + rrate, n) / denom / (1 + frate), 1 / (n - 1)) - 1;\n    });\n  }\n  pduration(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PDURATION'), (rate, pv, fv) => (Math.log(fv) - Math.log(pv)) / Math.log(1 + rate));\n  }\n  xnpv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('XNPV'), (rate, values, dates) => {\n      const valArr = values.valuesFromTopLeftCorner();\n      for (const val of valArr) {\n        if (typeof val !== 'number') {\n          return new CellError(ErrorType.VALUE, ErrorMessage.NumberExpected);\n        }\n      }\n      const valArrNum = valArr;\n      const dateArr = dates.valuesFromTopLeftCorner();\n      for (const date of dateArr) {\n        if (typeof date !== 'number') {\n          return new CellError(ErrorType.VALUE, ErrorMessage.NumberExpected);\n        }\n      }\n      const dateArrNum = dateArr;\n      if (dateArrNum.length !== valArrNum.length) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EqualLength);\n      }\n      const n = dateArrNum.length;\n      let ret = 0;\n      if (dateArrNum[0] < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n      }\n      for (let i = 0; i < n; i++) {\n        dateArrNum[i] = Math.floor(dateArrNum[i]);\n        if (dateArrNum[i] < dateArrNum[0]) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n        ret += valArrNum[i] / Math.pow(1 + rate, (dateArrNum[i] - dateArrNum[0]) / 365);\n      }\n      return ret;\n    });\n  }\n}\nFinancialPlugin.implementedFunctions = {\n  'PMT': {\n    method: 'pmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'IPMT': {\n    method: 'ipmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'PPMT': {\n    method: 'ppmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'FV': {\n    method: 'fv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'CUMIPMT': {\n    method: 'cumipmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0,\n      maxValue: 1\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'CUMPRINC': {\n    method: 'cumprinc',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0,\n      maxValue: 1\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'DB': {\n    method: 'db',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 12,\n      defaultValue: 12\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'DDB': {\n    method: 'ddb',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      defaultValue: 2\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'DOLLARDE': {\n    method: 'dollarde',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'DOLLARFR': {\n    method: 'dollarfr',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'EFFECT': {\n    method: 'effect',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'ISPMT': {\n    method: 'ispmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'NOMINAL': {\n    method: 'nominal',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'NPER': {\n    method: 'nper',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'PV': {\n    method: 'pv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'RATE': {\n    method: 'rate',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0.1\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'RRI': {\n    method: 'rri',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'SLN': {\n    method: 'sln',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'SYD': {\n    method: 'syd',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'TBILLEQ': {\n    method: 'tbilleq',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'TBILLPRICE': {\n    method: 'tbillprice',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'TBILLYIELD': {\n    method: 'tbillyield',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'FVSCHEDULE': {\n    method: 'fvschedule',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'NPV': {\n    method: 'npv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1,\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'MIRR': {\n    method: 'mirr',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'PDURATION': {\n    method: 'pduration',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'XNPV': {\n    method: 'xnpv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: -1\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  }\n};\nfunction pmtCore(rate, periods, present, future, type) {\n  if (rate === 0) {\n    return (-present - future) / periods;\n  } else {\n    const term = Math.pow(1 + rate, periods);\n    return (future * rate + present * rate * term) * (type ? 1 / (1 + rate) : 1) / (1 - term);\n  }\n}\nfunction ipmtCore(rate, period, periods, present, future, type) {\n  const payment = pmtCore(rate, periods, present, future, type);\n  if (period === 1) {\n    return rate * (type ? 0 : -present);\n  } else {\n    return rate * (type ? fvCore(rate, period - 2, payment, present, type) - payment : fvCore(rate, period - 1, payment, present, type));\n  }\n}\nfunction fvCore(rate, periods, payment, value, type) {\n  if (rate === 0) {\n    return -value - payment * periods;\n  } else {\n    const term = Math.pow(1 + rate, periods);\n    return payment * (type ? 1 + rate : 1) * (1 - term) / rate - value * term;\n  }\n}\nfunction ppmtCore(rate, period, periods, present, future, type) {\n  return pmtCore(rate, periods, present, future, type) - ipmtCore(rate, period, periods, present, future, type);\n}\nfunction npvCore(rate, args) {\n  let acc = 0;\n  for (let i = args.length - 1; i >= 0; i--) {\n    acc += args[i];\n    if (rate === -1) {\n      if (acc === 0) {\n        continue;\n      } else {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n    }\n    acc /= 1 + rate;\n  }\n  return acc;\n}","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","EmptyValue","getRawValue","isExtendedNumber","NumberType","FunctionArgumentType","FunctionPlugin","FinancialPlugin","pmt","ast","state","runFunction","args","metadata","pmtCore","ipmt","ipmtCore","ppmt","ppmtCore","fv","fvCore","cumipmt","rate","periods","value","start","end","type","NUM","EndStartPeriod","acc","i","cumprinc","db","cost","salvage","life","period","month","PeriodLong","Math","round","pow","initial","total","ddb","factor","oldValue","newValue","max","dollarde","dollar","fraction","DIV_BY_ZERO","trunc","dollarfr","effect","ispmt","nominal","nper","payment","present","future","log","guess","VALUE","epsMax","iterMax","y","abs","f","dy","df","pv","rri","sln","syd","tbilleq","settlement","maturity","discount","startDate","dateTimeHelper","numberToSimpleDate","endDate","year","day","denom","tbillprice","tbillyield","price","fvschedule","ratios","vals","valuesFromTopLeftCorner","val","NumberExpected","npv","coerced","arithmeticHelper","coerceNumbersExactRanges","npvCore","mirr","range","frate","rrate","manyToExactNumbers","posFlag","negFlag","posValues","negValues","push","n","length","nom","pduration","xnpv","values","dates","valArr","valArrNum","dateArr","date","dateArrNum","EqualLength","ret","ValueSmall","floor","implementedFunctions","method","parameters","argumentType","NUMBER","defaultValue","returnNumberType","NUMBER_CURRENCY","greaterThan","INTEGER","minValue","maxValue","NUMBER_PERCENT","RANGE","ANY","repeatLastArgs","term"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/FinancialPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { EmptyValue, getRawValue, isExtendedNumber, NumberType } from \"../InterpreterValue.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class FinancialPlugin extends FunctionPlugin {\n  pmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PMT'), pmtCore);\n  }\n  ipmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('IPMT'), ipmtCore);\n  }\n  ppmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PPMT'), ppmtCore);\n  }\n  fv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FV'), fvCore);\n  }\n  cumipmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CUMIPMT'), (rate, periods, value, start, end, type) => {\n      if (start > end) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EndStartPeriod);\n      }\n      let acc = 0;\n      for (let i = start; i <= end; i++) {\n        acc += ipmtCore(rate, i, periods, value, 0, type);\n      }\n      return acc;\n    });\n  }\n  cumprinc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CUMPRINC'), (rate, periods, value, start, end, type) => {\n      if (start > end) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EndStartPeriod);\n      }\n      let acc = 0;\n      for (let i = start; i <= end; i++) {\n        acc += ppmtCore(rate, i, periods, value, 0, type);\n      }\n      return acc;\n    });\n  }\n  db(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DB'), (cost, salvage, life, period, month) => {\n      if (month === 12 && period > life || period > life + 1) {\n        return new CellError(ErrorType.NUM, ErrorMessage.PeriodLong);\n      }\n      if (salvage >= cost) {\n        return 0;\n      }\n      const rate = Math.round((1 - Math.pow(salvage / cost, 1 / life)) * 1000) / 1000;\n      const initial = cost * rate * month / 12;\n      if (period === 1) {\n        return initial;\n      }\n      let total = initial;\n      for (let i = 0; i < period - 2; i++) {\n        total += (cost - total) * rate;\n      }\n      if (period === life + 1) {\n        return (cost - total) * rate * (12 - month) / 12;\n      }\n      return (cost - total) * rate;\n    });\n  }\n  ddb(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DDB'), (cost, salvage, life, period, factor) => {\n      if (period > life) {\n        return new CellError(ErrorType.NUM);\n      }\n      let rate = factor / life;\n      let oldValue;\n      if (rate >= 1) {\n        rate = 1;\n        if (period === 1) {\n          oldValue = cost;\n        } else {\n          oldValue = 0;\n        }\n      } else {\n        oldValue = cost * Math.pow(1 - rate, period - 1);\n      }\n      const newValue = cost * Math.pow(1 - rate, period);\n      return Math.max(oldValue - Math.max(salvage, newValue), 0);\n    });\n  }\n  dollarde(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DOLLARDE'), (dollar, fraction) => {\n      if (fraction < 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      fraction = Math.trunc(fraction);\n      while (fraction > 10) {\n        fraction /= 10;\n      }\n      return Math.trunc(dollar) + (dollar - Math.trunc(dollar)) * 10 / fraction;\n    });\n  }\n  dollarfr(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DOLLARFR'), (dollar, fraction) => {\n      if (fraction < 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      fraction = Math.trunc(fraction);\n      while (fraction > 10) {\n        fraction /= 10;\n      }\n      return Math.trunc(dollar) + (dollar - Math.trunc(dollar)) * fraction / 10;\n    });\n  }\n  effect(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('EFFECT'), (rate, periods) => {\n      periods = Math.trunc(periods);\n      return Math.pow(1 + rate / periods, periods) - 1;\n    });\n  }\n  ispmt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ISPMT'), (rate, period, periods, value) => {\n      if (periods === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return value * rate * (period / periods - 1);\n    });\n  }\n  nominal(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NOMINAL'), (rate, periods) => {\n      periods = Math.trunc(periods);\n      return (Math.pow(rate + 1, 1 / periods) - 1) * periods;\n    });\n  }\n  nper(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NPER'), (rate, payment, present, future, type) => {\n      if (rate === 0) {\n        if (payment === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        return (-present - future) / payment;\n      }\n      if (type) {\n        payment *= 1 + rate;\n      }\n      return Math.log((payment - future * rate) / (present * rate + payment)) / Math.log(1 + rate);\n    });\n  }\n  rate(ast, state) {\n    // Newton's method: https://en.wikipedia.org/wiki/Newton%27s_method\n    return this.runFunction(ast.args, state, this.metadata('RATE'), (periods, payment, present, future, type, guess) => {\n      if (guess <= -1) {\n        return new CellError(ErrorType.VALUE);\n      }\n      const epsMax = 1e-7;\n      const iterMax = 50;\n      let rate = guess;\n      type = type ? 1 : 0;\n      for (let i = 0; i < iterMax; i++) {\n        if (rate <= -1) {\n          return new CellError(ErrorType.NUM);\n        }\n        let y;\n        if (Math.abs(rate) < epsMax) {\n          y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n        } else {\n          const f = Math.pow(1 + rate, periods);\n          y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n        }\n        if (Math.abs(y) < epsMax) {\n          return rate;\n        }\n        let dy;\n        if (Math.abs(rate) < epsMax) {\n          dy = present * periods + payment * type * periods;\n        } else {\n          const f = Math.pow(1 + rate, periods);\n          const df = periods * Math.pow(1 + rate, periods - 1);\n          dy = present * df + payment * (1 / rate + type) * df + payment * (-1 / (rate * rate)) * (f - 1);\n        }\n        rate -= y / dy;\n      }\n      return new CellError(ErrorType.NUM);\n    });\n  }\n  pv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PV'), (rate, periods, payment, future, type) => {\n      type = type ? 1 : 0;\n      if (rate === -1) {\n        if (periods === 0) {\n          return new CellError(ErrorType.NUM);\n        } else {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n      }\n      if (rate === 0) {\n        return -payment * periods - future;\n      } else {\n        return ((1 - Math.pow(1 + rate, periods)) * payment * (1 + rate * type) / rate - future) / Math.pow(1 + rate, periods);\n      }\n    });\n  }\n  rri(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RRI'), (periods, present, future) => {\n      if (present === 0 || future < 0 && present > 0 || future > 0 && present < 0) {\n        return new CellError(ErrorType.NUM);\n      }\n      return Math.pow(future / present, 1 / periods) - 1;\n    });\n  }\n  sln(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SLN'), (cost, salvage, life) => {\n      if (life === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return (cost - salvage) / life;\n    });\n  }\n  syd(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SYD'), (cost, salvage, life, period) => {\n      if (period > life) {\n        return new CellError(ErrorType.NUM);\n      }\n      return (cost - salvage) * (life - period + 1) * 2 / (life * (life + 1));\n    });\n  }\n  tbilleq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TBILLEQ'), (settlement, maturity, discount) => {\n      settlement = Math.round(settlement);\n      maturity = Math.round(maturity);\n      if (settlement >= maturity) {\n        return new CellError(ErrorType.NUM);\n      }\n      const startDate = this.dateTimeHelper.numberToSimpleDate(settlement);\n      const endDate = this.dateTimeHelper.numberToSimpleDate(maturity);\n      if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {\n        return new CellError(ErrorType.NUM);\n      }\n      const denom = 360 - discount * (maturity - settlement);\n      if (denom === 0) {\n        return 0;\n      }\n      if (denom < 0) {\n        return new CellError(ErrorType.NUM);\n      }\n      return 365 * discount / denom;\n    });\n  }\n  tbillprice(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TBILLPRICE'), (settlement, maturity, discount) => {\n      settlement = Math.round(settlement);\n      maturity = Math.round(maturity);\n      if (settlement >= maturity) {\n        return new CellError(ErrorType.NUM);\n      }\n      const startDate = this.dateTimeHelper.numberToSimpleDate(settlement);\n      const endDate = this.dateTimeHelper.numberToSimpleDate(maturity);\n      if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {\n        return new CellError(ErrorType.NUM);\n      }\n      const denom = 360 - discount * (maturity - settlement);\n      if (denom === 0) {\n        return 0;\n      }\n      if (denom < 0) {\n        return new CellError(ErrorType.NUM);\n      }\n      return 100 * (1 - discount * (maturity - settlement) / 360);\n    });\n  }\n  tbillyield(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TBILLYIELD'), (settlement, maturity, price) => {\n      settlement = Math.round(settlement);\n      maturity = Math.round(maturity);\n      if (settlement >= maturity) {\n        return new CellError(ErrorType.NUM);\n      }\n      const startDate = this.dateTimeHelper.numberToSimpleDate(settlement);\n      const endDate = this.dateTimeHelper.numberToSimpleDate(maturity);\n      if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {\n        return new CellError(ErrorType.NUM);\n      }\n      return (100 - price) * 360 / (price * (maturity - settlement));\n    });\n  }\n  fvschedule(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FVSCHEDULE'), (value, ratios) => {\n      const vals = ratios.valuesFromTopLeftCorner();\n      for (const val of vals) {\n        if (val instanceof CellError) {\n          return val;\n        }\n      }\n      for (const val of vals) {\n        if (isExtendedNumber(val)) {\n          value *= 1 + getRawValue(val);\n        } else if (val !== EmptyValue) {\n          return new CellError(ErrorType.VALUE, ErrorMessage.NumberExpected);\n        }\n      }\n      return value;\n    });\n  }\n  npv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('NPV'), (rate, ...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      return npvCore(rate, coerced);\n    });\n  }\n  mirr(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MIRR'), (range, frate, rrate) => {\n      const vals = this.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());\n      if (vals instanceof CellError) {\n        return vals;\n      }\n      let posFlag = false;\n      let negFlag = false;\n      const posValues = [];\n      const negValues = [];\n      for (const val of vals) {\n        if (val > 0) {\n          posFlag = true;\n          posValues.push(val);\n          negValues.push(0);\n        } else if (val < 0) {\n          negFlag = true;\n          negValues.push(val);\n          posValues.push(0);\n        } else {\n          negValues.push(0);\n          posValues.push(0);\n        }\n      }\n      if (!posFlag || !negFlag) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const n = vals.length;\n      const nom = npvCore(rrate, posValues);\n      if (nom instanceof CellError) {\n        return nom;\n      }\n      const denom = npvCore(frate, negValues);\n      if (denom instanceof CellError) {\n        return denom;\n      }\n      return Math.pow(-nom * Math.pow(1 + rrate, n) / denom / (1 + frate), 1 / (n - 1)) - 1;\n    });\n  }\n  pduration(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PDURATION'), (rate, pv, fv) => (Math.log(fv) - Math.log(pv)) / Math.log(1 + rate));\n  }\n  xnpv(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('XNPV'), (rate, values, dates) => {\n      const valArr = values.valuesFromTopLeftCorner();\n      for (const val of valArr) {\n        if (typeof val !== 'number') {\n          return new CellError(ErrorType.VALUE, ErrorMessage.NumberExpected);\n        }\n      }\n      const valArrNum = valArr;\n      const dateArr = dates.valuesFromTopLeftCorner();\n      for (const date of dateArr) {\n        if (typeof date !== 'number') {\n          return new CellError(ErrorType.VALUE, ErrorMessage.NumberExpected);\n        }\n      }\n      const dateArrNum = dateArr;\n      if (dateArrNum.length !== valArrNum.length) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EqualLength);\n      }\n      const n = dateArrNum.length;\n      let ret = 0;\n      if (dateArrNum[0] < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n      }\n      for (let i = 0; i < n; i++) {\n        dateArrNum[i] = Math.floor(dateArrNum[i]);\n        if (dateArrNum[i] < dateArrNum[0]) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n        ret += valArrNum[i] / Math.pow(1 + rate, (dateArrNum[i] - dateArrNum[0]) / 365);\n      }\n      return ret;\n    });\n  }\n}\nFinancialPlugin.implementedFunctions = {\n  'PMT': {\n    method: 'pmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'IPMT': {\n    method: 'ipmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'PPMT': {\n    method: 'ppmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'FV': {\n    method: 'fv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'CUMIPMT': {\n    method: 'cumipmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0,\n      maxValue: 1\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'CUMPRINC': {\n    method: 'cumprinc',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0,\n      maxValue: 1\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'DB': {\n    method: 'db',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 12,\n      defaultValue: 12\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'DDB': {\n    method: 'ddb',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0,\n      defaultValue: 2\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'DOLLARDE': {\n    method: 'dollarde',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'DOLLARFR': {\n    method: 'dollarfr',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'EFFECT': {\n    method: 'effect',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'ISPMT': {\n    method: 'ispmt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'NOMINAL': {\n    method: 'nominal',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'NPER': {\n    method: 'nper',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'PV': {\n    method: 'pv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'RATE': {\n    method: 'rate',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0.1\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'RRI': {\n    method: 'rri',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'SLN': {\n    method: 'sln',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'SYD': {\n    method: 'syd',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'TBILLEQ': {\n    method: 'tbilleq',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'TBILLPRICE': {\n    method: 'tbillprice',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'TBILLYIELD': {\n    method: 'tbillyield',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'FVSCHEDULE': {\n    method: 'fvschedule',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }],\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'NPV': {\n    method: 'npv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1,\n    returnNumberType: NumberType.NUMBER_CURRENCY\n  },\n  'MIRR': {\n    method: 'mirr',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    returnNumberType: NumberType.NUMBER_PERCENT\n  },\n  'PDURATION': {\n    method: 'pduration',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: 0\n    }]\n  },\n  'XNPV': {\n    method: 'xnpv',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      greaterThan: -1\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  }\n};\nfunction pmtCore(rate, periods, present, future, type) {\n  if (rate === 0) {\n    return (-present - future) / periods;\n  } else {\n    const term = Math.pow(1 + rate, periods);\n    return (future * rate + present * rate * term) * (type ? 1 / (1 + rate) : 1) / (1 - term);\n  }\n}\nfunction ipmtCore(rate, period, periods, present, future, type) {\n  const payment = pmtCore(rate, periods, present, future, type);\n  if (period === 1) {\n    return rate * (type ? 0 : -present);\n  } else {\n    return rate * (type ? fvCore(rate, period - 2, payment, present, type) - payment : fvCore(rate, period - 1, payment, present, type));\n  }\n}\nfunction fvCore(rate, periods, payment, value, type) {\n  if (rate === 0) {\n    return -value - payment * periods;\n  } else {\n    const term = Math.pow(1 + rate, periods);\n    return payment * (type ? 1 + rate : 1) * (1 - term) / rate - value * term;\n  }\n}\nfunction ppmtCore(rate, period, periods, present, future, type) {\n  return pmtCore(rate, periods, present, future, type) - ipmtCore(rate, period, periods, present, future, type);\n}\nfunction npvCore(rate, args) {\n  let acc = 0;\n  for (let i = args.length - 1; i >= 0; i--) {\n    acc += args[i];\n    if (rate === -1) {\n      if (acc === 0) {\n        continue;\n      } else {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n    }\n    acc /= 1 + rate;\n  }\n  return acc;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}