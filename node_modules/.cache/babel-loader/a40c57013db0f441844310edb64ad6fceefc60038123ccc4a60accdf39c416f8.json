{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport function findNextOddNumber(arg) {\n  const ceiled = Math.ceil(arg);\n  return ceiled % 2 === 1 ? ceiled : ceiled + 1;\n}\nexport function findNextEvenNumber(arg) {\n  const ceiled = Math.ceil(arg);\n  return ceiled % 2 === 0 ? ceiled : ceiled + 1;\n}\nexport class RoundingPlugin extends FunctionPlugin {\n  roundup(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ROUNDDOWN'), (numberToRound, places) => {\n      const placesMultiplier = Math.pow(10, places);\n      if (numberToRound < 0) {\n        return -Math.ceil(-numberToRound * placesMultiplier) / placesMultiplier;\n      } else {\n        return Math.ceil(numberToRound * placesMultiplier) / placesMultiplier;\n      }\n    });\n  }\n  rounddown(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ROUNDDOWN'), (numberToRound, places) => {\n      const placesMultiplier = Math.pow(10, places);\n      if (numberToRound < 0) {\n        return -Math.floor(-numberToRound * placesMultiplier) / placesMultiplier;\n      } else {\n        return Math.floor(numberToRound * placesMultiplier) / placesMultiplier;\n      }\n    });\n  }\n  round(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ROUND'), (numberToRound, places) => {\n      const placesMultiplier = Math.pow(10, places);\n      if (numberToRound < 0) {\n        return -Math.round(-numberToRound * placesMultiplier) / placesMultiplier;\n      } else {\n        return Math.round(numberToRound * placesMultiplier) / placesMultiplier;\n      }\n    });\n  }\n  intFunc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('INT'), coercedNumberToRound => {\n      if (coercedNumberToRound < 0) {\n        return -Math.floor(-coercedNumberToRound);\n      } else {\n        return Math.floor(coercedNumberToRound);\n      }\n    });\n  }\n  even(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('EVEN'), coercedNumberToRound => {\n      if (coercedNumberToRound < 0) {\n        return -findNextEvenNumber(-coercedNumberToRound);\n      } else {\n        return findNextEvenNumber(coercedNumberToRound);\n      }\n    });\n  }\n  odd(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ODD'), coercedNumberToRound => {\n      if (coercedNumberToRound < 0) {\n        return -findNextOddNumber(-coercedNumberToRound);\n      } else {\n        return findNextOddNumber(coercedNumberToRound);\n      }\n    });\n  }\n  ceilingmath(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CEILING.MATH'), (value, significance, mode) => {\n      if (significance === 0 || value === 0) {\n        return 0;\n      }\n      significance = Math.abs(significance);\n      if (mode === 1 && value < 0) {\n        significance = -significance;\n      }\n      return Math.ceil(value / significance) * significance;\n    });\n  }\n  ceiling(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CEILING'), (value, significance) => {\n      if (value === 0) {\n        return 0;\n      }\n      if (significance === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      if (value > 0 && significance < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.DistinctSigns);\n      }\n      return Math.ceil(value / significance) * significance;\n    });\n  }\n  ceilingprecise(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CEILING.PRECISE'), (value, significance) => {\n      if (significance === 0 || value === 0) {\n        return 0;\n      }\n      significance = Math.abs(significance);\n      return Math.ceil(value / significance) * significance;\n    });\n  }\n  floormath(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FLOOR.MATH'), (value, significance, mode) => {\n      if (significance === 0 || value === 0) {\n        return 0;\n      }\n      significance = Math.abs(significance);\n      if (mode === 1 && value < 0) {\n        significance *= -1;\n      }\n      return Math.floor(value / significance) * significance;\n    });\n  }\n  floor(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FLOOR'), (value, significance) => {\n      if (value === 0) {\n        return 0;\n      }\n      if (significance === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      if (value > 0 && significance < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.DistinctSigns);\n      }\n      return Math.floor(value / significance) * significance;\n    });\n  }\n  floorprecise(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FLOOR.PRECISE'), (value, significance) => {\n      if (significance === 0 || value === 0) {\n        return 0;\n      }\n      significance = Math.abs(significance);\n      return Math.floor(value / significance) * significance;\n    });\n  }\n}\nRoundingPlugin.implementedFunctions = {\n  'ROUNDUP': {\n    method: 'roundup',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'ROUNDDOWN': {\n    method: 'rounddown',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'ROUND': {\n    method: 'round',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'INT': {\n    method: 'intFunc',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'EVEN': {\n    method: 'even',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ODD': {\n    method: 'odd',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'CEILING.MATH': {\n    method: 'ceilingmath',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'CEILING': {\n    method: 'ceiling',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'CEILING.PRECISE': {\n    method: 'ceilingprecise',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'FLOOR.MATH': {\n    method: 'floormath',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'FLOOR': {\n    method: 'floor',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'FLOOR.PRECISE': {\n    method: 'floorprecise',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  }\n};\nRoundingPlugin.aliases = {\n  'ISO.CEILING': 'CEILING.PRECISE',\n  'TRUNC': 'ROUNDDOWN'\n};","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","FunctionArgumentType","FunctionPlugin","findNextOddNumber","arg","ceiled","Math","ceil","findNextEvenNumber","RoundingPlugin","roundup","ast","state","runFunction","args","metadata","numberToRound","places","placesMultiplier","pow","rounddown","floor","round","intFunc","coercedNumberToRound","even","odd","ceilingmath","value","significance","mode","abs","ceiling","DIV_BY_ZERO","NUM","DistinctSigns","ceilingprecise","floormath","floorprecise","implementedFunctions","method","parameters","argumentType","NUMBER","defaultValue","aliases"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/RoundingPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport function findNextOddNumber(arg) {\n  const ceiled = Math.ceil(arg);\n  return ceiled % 2 === 1 ? ceiled : ceiled + 1;\n}\nexport function findNextEvenNumber(arg) {\n  const ceiled = Math.ceil(arg);\n  return ceiled % 2 === 0 ? ceiled : ceiled + 1;\n}\nexport class RoundingPlugin extends FunctionPlugin {\n  roundup(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ROUNDDOWN'), (numberToRound, places) => {\n      const placesMultiplier = Math.pow(10, places);\n      if (numberToRound < 0) {\n        return -Math.ceil(-numberToRound * placesMultiplier) / placesMultiplier;\n      } else {\n        return Math.ceil(numberToRound * placesMultiplier) / placesMultiplier;\n      }\n    });\n  }\n  rounddown(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ROUNDDOWN'), (numberToRound, places) => {\n      const placesMultiplier = Math.pow(10, places);\n      if (numberToRound < 0) {\n        return -Math.floor(-numberToRound * placesMultiplier) / placesMultiplier;\n      } else {\n        return Math.floor(numberToRound * placesMultiplier) / placesMultiplier;\n      }\n    });\n  }\n  round(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ROUND'), (numberToRound, places) => {\n      const placesMultiplier = Math.pow(10, places);\n      if (numberToRound < 0) {\n        return -Math.round(-numberToRound * placesMultiplier) / placesMultiplier;\n      } else {\n        return Math.round(numberToRound * placesMultiplier) / placesMultiplier;\n      }\n    });\n  }\n  intFunc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('INT'), coercedNumberToRound => {\n      if (coercedNumberToRound < 0) {\n        return -Math.floor(-coercedNumberToRound);\n      } else {\n        return Math.floor(coercedNumberToRound);\n      }\n    });\n  }\n  even(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('EVEN'), coercedNumberToRound => {\n      if (coercedNumberToRound < 0) {\n        return -findNextEvenNumber(-coercedNumberToRound);\n      } else {\n        return findNextEvenNumber(coercedNumberToRound);\n      }\n    });\n  }\n  odd(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ODD'), coercedNumberToRound => {\n      if (coercedNumberToRound < 0) {\n        return -findNextOddNumber(-coercedNumberToRound);\n      } else {\n        return findNextOddNumber(coercedNumberToRound);\n      }\n    });\n  }\n  ceilingmath(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CEILING.MATH'), (value, significance, mode) => {\n      if (significance === 0 || value === 0) {\n        return 0;\n      }\n      significance = Math.abs(significance);\n      if (mode === 1 && value < 0) {\n        significance = -significance;\n      }\n      return Math.ceil(value / significance) * significance;\n    });\n  }\n  ceiling(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CEILING'), (value, significance) => {\n      if (value === 0) {\n        return 0;\n      }\n      if (significance === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      if (value > 0 && significance < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.DistinctSigns);\n      }\n      return Math.ceil(value / significance) * significance;\n    });\n  }\n  ceilingprecise(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CEILING.PRECISE'), (value, significance) => {\n      if (significance === 0 || value === 0) {\n        return 0;\n      }\n      significance = Math.abs(significance);\n      return Math.ceil(value / significance) * significance;\n    });\n  }\n  floormath(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FLOOR.MATH'), (value, significance, mode) => {\n      if (significance === 0 || value === 0) {\n        return 0;\n      }\n      significance = Math.abs(significance);\n      if (mode === 1 && value < 0) {\n        significance *= -1;\n      }\n      return Math.floor(value / significance) * significance;\n    });\n  }\n  floor(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FLOOR'), (value, significance) => {\n      if (value === 0) {\n        return 0;\n      }\n      if (significance === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      if (value > 0 && significance < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.DistinctSigns);\n      }\n      return Math.floor(value / significance) * significance;\n    });\n  }\n  floorprecise(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FLOOR.PRECISE'), (value, significance) => {\n      if (significance === 0 || value === 0) {\n        return 0;\n      }\n      significance = Math.abs(significance);\n      return Math.floor(value / significance) * significance;\n    });\n  }\n}\nRoundingPlugin.implementedFunctions = {\n  'ROUNDUP': {\n    method: 'roundup',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'ROUNDDOWN': {\n    method: 'rounddown',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'ROUND': {\n    method: 'round',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'INT': {\n    method: 'intFunc',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'EVEN': {\n    method: 'even',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ODD': {\n    method: 'odd',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'CEILING.MATH': {\n    method: 'ceilingmath',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'CEILING': {\n    method: 'ceiling',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'CEILING.PRECISE': {\n    method: 'ceilingprecise',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'FLOOR.MATH': {\n    method: 'floormath',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 0\n    }]\n  },\n  'FLOOR': {\n    method: 'floor',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'FLOOR.PRECISE': {\n    method: 'floorprecise',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  }\n};\nRoundingPlugin.aliases = {\n  'ISO.CEILING': 'CEILING.PRECISE',\n  'TRUNC': 'ROUNDDOWN'\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}