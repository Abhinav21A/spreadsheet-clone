{"ast":null,"code":"/**\r\n * @license\r\n Copyright (c) 2013 jStat\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n */\nexport function erf(x) {\n  const cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2, -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4, 4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6, 1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8, 6.529054439e-9, 5.059343495e-9, -9.91364156e-10, -2.27365122e-10, 9.6467911e-11, 2.394038e-12, -6.886027e-12, 8.94487e-13, 3.13092e-13, -1.12708e-13, 3.81e-16, 7.106e-15, -1.523e-15, -9.4e-17, 1.21e-16, -2.8e-17];\n  let j = cof.length - 1;\n  let isneg = false;\n  let d = 0;\n  let dd = 0;\n  let t, ty, tmp, res;\n  if (x === 0) {\n    return 0;\n  }\n  if (x < 0) {\n    x = -x;\n    isneg = true;\n  }\n  t = 2 / (2 + x);\n  ty = 4 * t - 2;\n  for (; j > 0; j--) {\n    tmp = d;\n    d = ty * d - dd + cof[j];\n    dd = tmp;\n  }\n  res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);\n  return isneg ? res - 1 : 1 - res;\n}\nexport function erfc(x) {\n  return 1 - erf(x);\n}\nfunction erfcinv(p) {\n  let j = 0;\n  let x, err, t, pp;\n  if (p >= 2) {\n    return -100;\n  }\n  if (p <= 0) {\n    return 100;\n  }\n  pp = p < 1 ? p : 2 - p;\n  t = Math.sqrt(-2 * Math.log(pp / 2));\n  x = -0.70711 * ((2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t);\n  for (; j < 2; j++) {\n    err = erfc(x) - pp;\n    x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);\n  }\n  return p < 1 ? x : -x;\n}\nexport const exponential = {\n  pdf: (x, rate) => {\n    return x < 0 ? 0 : rate * Math.exp(-rate * x);\n  },\n  cdf: (x, rate) => {\n    return x < 0 ? 0 : 1 - Math.exp(-rate * x);\n  }\n};\nexport function gammafn(x) {\n  const p = [-1.716185138865495, 24.76565080557592, -379.80425647094563, 629.3311553128184, 866.9662027904133, -31451.272968848367, -36144.413418691176, 66456.14382024054];\n  const q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192, -3107.771671572311, 22538.118420980151, 4755.8462775278811, -134659.9598649693, -115132.2596755535];\n  let fact = false;\n  let n = 0;\n  let xden = 0;\n  let xnum = 0;\n  let y = x;\n  let i, z, yi, res;\n  if (x > 171.6243769536076) {\n    return Infinity;\n  }\n  if (y <= 0) {\n    res = y % 1;\n    if (res) {\n      fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);\n      y = 1 - y;\n    } else {\n      return Infinity;\n    }\n  }\n  yi = y;\n  if (y < 1) {\n    z = y++;\n  } else {\n    z = (y -= n = (y | 0) - 1) - 1;\n  }\n  for (i = 0; i < 8; ++i) {\n    xnum = (xnum + p[i]) * z;\n    xden = xden * z + q[i];\n  }\n  res = xnum / xden + 1;\n  if (yi < y) {\n    res /= yi;\n  } else if (yi > y) {\n    for (i = 0; i < n; ++i) {\n      res *= y;\n      y++;\n    }\n  }\n  if (fact) {\n    res = fact / res;\n  }\n  return res;\n}\nexport const gamma = {\n  pdf: function pdf(x, shape, scale) {\n    if (x < 0) {\n      return 0;\n    }\n    return x === 0 && shape === 1 ? 1 / scale : Math.exp((shape - 1) * Math.log(x) - x / scale - gammaln(shape) - shape * Math.log(scale));\n  },\n  cdf: function cdf(x, shape, scale) {\n    if (x < 0) {\n      return 0;\n    }\n    return lowRegGamma(shape, x / scale);\n  },\n  inv: function (p, shape, scale) {\n    return gammapinv(p, shape) * scale;\n  }\n};\nexport function gammaln(x) {\n  let j = 0;\n  const cof = [76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];\n  let ser = 1.000000000190015;\n  let xx, y, tmp;\n  tmp = (y = xx = x) + 5.5;\n  tmp -= (xx + 0.5) * Math.log(tmp);\n  for (; j < 6; j++) {\n    ser += cof[j] / ++y;\n  }\n  return Math.log(2.5066282746310005 * ser / xx) - tmp;\n}\nfunction lowRegGamma(a, x) {\n  const aln = gammaln(a);\n  let ap = a;\n  let sum = 1 / a;\n  let del = sum;\n  let b = x + 1 - a;\n  let c = 1 / 1.0e-30;\n  let d = 1 / b;\n  let h = d;\n  let i = 1;\n  // calculate maximum number of itterations required for a\n  const ITMAX = -~(Math.log(a >= 1 ? a : 1 / a) * 8.5 + a * 0.4 + 17);\n  let an;\n  if (x < 0 || a <= 0) {\n    return NaN;\n  } else if (x < a + 1) {\n    for (; i <= ITMAX; i++) {\n      sum += del *= x / ++ap;\n    }\n    return sum * Math.exp(-x + a * Math.log(x) - aln);\n  }\n  for (; i <= ITMAX; i++) {\n    an = -i * (i - a);\n    b += 2;\n    d = an * d + b;\n    c = b + an / c;\n    d = 1 / d;\n    h *= d * c;\n  }\n  return 1 - h * Math.exp(-x + a * Math.log(x) - aln);\n}\nfunction gammapinv(p, a) {\n  let j = 0;\n  const a1 = a - 1;\n  const EPS = 1e-8;\n  const gln = gammaln(a);\n  let x, err, t, u, pp;\n  let lna1;\n  let afac;\n  if (p >= 1) {\n    return Math.max(100, a + 100 * Math.sqrt(a));\n  }\n  if (p <= 0) {\n    return 0;\n  }\n  if (a > 1) {\n    lna1 = Math.log(a1);\n    afac = Math.exp(a1 * (lna1 - 1) - gln);\n    pp = p < 0.5 ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5) {\n      x = -x;\n    }\n    x = Math.max(1e-3, a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));\n  } else {\n    t = 1 - a * (0.253 + a * 0.12);\n    if (p < t) {\n      x = Math.pow(p / t, 1 / a);\n    } else {\n      x = 1 - Math.log(1 - (p - t) / (1 - t));\n    }\n  }\n  for (; j < 12; j++) {\n    if (x <= 0) {\n      return 0;\n    }\n    err = lowRegGamma(a, x) - p;\n    if (a > 1) {\n      t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));\n    } else {\n      t = Math.exp(-x + a1 * Math.log(x) - gln);\n    }\n    u = err / t;\n    x -= t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1)));\n    if (x <= 0) {\n      x = 0.5 * (x + t);\n    }\n    if (Math.abs(t) < EPS * x) {\n      break;\n    }\n  }\n  return x;\n}\nexport const normal = {\n  pdf: function pdf(x, mean, std) {\n    return Math.exp(-0.5 * Math.log(2 * Math.PI) - Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));\n  },\n  cdf: function cdf(x, mean, std) {\n    return 0.5 * (1 + erf((x - mean) / Math.sqrt(2 * std * std)));\n  },\n  inv: function (p, mean, std) {\n    return -1.41421356237309505 * std * erfcinv(2 * p) + mean;\n  }\n};\nexport const beta = {\n  pdf: function pdf(x, alpha, beta) {\n    // PDF is zero outside the support\n    if (x > 1 || x < 0) {\n      return 0;\n    }\n    // PDF is one for the uniform case\n    if (alpha == 1 && beta == 1) {\n      return 1;\n    }\n    if (alpha < 512 && beta < 512) {\n      return Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1) / betafn(alpha, beta);\n    } else {\n      return Math.exp((alpha - 1) * Math.log(x) + (beta - 1) * Math.log(1 - x) - betaln(alpha, beta));\n    }\n  },\n  cdf: function cdf(x, alpha, beta) {\n    return x > 1 || x < 0 ? +(x > 1) : ibeta(x, alpha, beta);\n  },\n  inv: function inv(x, alpha, beta) {\n    return ibetainv(x, alpha, beta);\n  }\n};\nfunction betafn(x, y) {\n  // ensure arguments are positive\n  if (x <= 0 || y <= 0) {\n    return undefined;\n  }\n  // make sure x + y doesn't exceed the upper limit of usable values\n  return x + y > 170 ? Math.exp(betaln(x, y)) : gammafn(x) * gammafn(y) / gammafn(x + y);\n}\nfunction betaln(x, y) {\n  return gammaln(x) + gammaln(y) - gammaln(x + y);\n}\nfunction ibetainv(p, a, b) {\n  var EPS = 1e-8;\n  var a1 = a - 1;\n  var b1 = b - 1;\n  var j = 0;\n  var lna, lnb, pp, t, u, err, x, al, h, w, afac;\n  if (p <= 0) {\n    return 0;\n  }\n  if (p >= 1) {\n    return 1;\n  }\n  if (a >= 1 && b >= 1) {\n    pp = p < 0.5 ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5) {\n      x = -x;\n    }\n    al = (x * x - 3) / 6;\n    h = 2 / (1 / (2 * a - 1) + 1 / (2 * b - 1));\n    w = x * Math.sqrt(al + h) / h - (1 / (2 * b - 1) - 1 / (2 * a - 1)) * (al + 5 / 6 - 2 / (3 * h));\n    x = a / (a + b * Math.exp(2 * w));\n  } else {\n    lna = Math.log(a / (a + b));\n    lnb = Math.log(b / (a + b));\n    t = Math.exp(a * lna) / a;\n    u = Math.exp(b * lnb) / b;\n    w = t + u;\n    if (p < t / w) {\n      x = Math.pow(a * w * p, 1 / a);\n    } else {\n      x = 1 - Math.pow(b * w * (1 - p), 1 / b);\n    }\n  }\n  afac = -gammaln(a) - gammaln(b) + gammaln(a + b);\n  for (; j < 10; j++) {\n    if (x === 0 || x === 1) {\n      return x;\n    }\n    // @ts-ignore\n    err = ibeta(x, a, b) - p;\n    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);\n    u = err / t;\n    x -= t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x))));\n    if (x <= 0) {\n      x = 0.5 * (x + t);\n    }\n    if (x >= 1) {\n      x = 0.5 * (x + t + 1);\n    }\n    if (Math.abs(t) < EPS * x && j > 0) {\n      break;\n    }\n  }\n  return x;\n}\nfunction ibeta(x, a, b) {\n  // Factors in front of the continued fraction.\n  var bt = x === 0 || x === 1 ? 0 : Math.exp(gammaln(a + b) - gammaln(a) - gammaln(b) + a * Math.log(x) + b * Math.log(1 - x));\n  if (x < 0 || x > 1) {\n    return false;\n  }\n  if (x < (a + 1) / (a + b + 2))\n    // Use continued fraction directly.\n    {\n      return bt * betacf(x, a, b) / a;\n    }\n  // else use continued fraction after making the symmetry transformation.\n  return 1 - bt * betacf(1 - x, b, a) / b;\n}\nfunction betacf(x, a, b) {\n  var fpmin = 1e-30;\n  var m = 1;\n  var qab = a + b;\n  var qap = a + 1;\n  var qam = a - 1;\n  var c = 1;\n  var d = 1 - qab * x / qap;\n  var m2, aa, del, h;\n  // These q's will be used in factors that occur in the coefficients\n  if (Math.abs(d) < fpmin) {\n    d = fpmin;\n  }\n  d = 1 / d;\n  h = d;\n  for (; m <= 100; m++) {\n    m2 = 2 * m;\n    aa = m * (b - m) * x / ((qam + m2) * (a + m2));\n    // One step (the even one) of the recurrence\n    d = 1 + aa * d;\n    if (Math.abs(d) < fpmin) {\n      d = fpmin;\n    }\n    c = 1 + aa / c;\n    if (Math.abs(c) < fpmin) {\n      c = fpmin;\n    }\n    d = 1 / d;\n    h *= d * c;\n    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));\n    // Next step of the recurrence (the odd one)\n    d = 1 + aa * d;\n    if (Math.abs(d) < fpmin) {\n      d = fpmin;\n    }\n    c = 1 + aa / c;\n    if (Math.abs(c) < fpmin) {\n      c = fpmin;\n    }\n    d = 1 / d;\n    del = d * c;\n    h *= del;\n    if (Math.abs(del - 1.0) < 3e-7) {\n      break;\n    }\n  }\n  return h;\n}\nexport const binomial = {\n  pdf: function (k, n, p) {\n    return p === 0 || p === 1 ? n * p === k ? 1 : 0 : combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\n  },\n  cdf: function (x, n, p) {\n    var betacdf;\n    var eps = 1e-10;\n    if (x < 0) {\n      return 0;\n    }\n    if (x >= n) {\n      return 1;\n    }\n    if (p < 0 || p > 1 || n <= 0) {\n      return NaN;\n    }\n    x = Math.floor(x);\n    var z = p;\n    var a = x + 1;\n    var b = n - x;\n    var s = a + b;\n    var bt = Math.exp(gammaln(s) - gammaln(b) - gammaln(a) + a * Math.log(z) + b * Math.log(1 - z));\n    if (z < (a + 1) / (s + 2)) {\n      betacdf = bt * betinc(z, a, b, eps);\n    } else {\n      betacdf = 1 - bt * betinc(1 - z, b, a, eps);\n    }\n    return Math.round((1 - betacdf) * (1 / eps)) / (1 / eps);\n  }\n};\nfunction betinc(x, a, b, eps) {\n  var a0 = 0;\n  var b0 = 1;\n  var a1 = 1;\n  var b1 = 1;\n  var m9 = 0;\n  var a2 = 0;\n  var c9;\n  while (Math.abs((a1 - a2) / a1) > eps) {\n    a2 = a1;\n    c9 = -(a + m9) * (a + b + m9) * x / (a + 2 * m9) / (a + 2 * m9 + 1);\n    a0 = a1 + c9 * a0;\n    b0 = b1 + c9 * b0;\n    m9 = m9 + 1;\n    c9 = m9 * (b - m9) * x / (a + 2 * m9 - 1) / (a + 2 * m9);\n    a1 = a0 + c9 * a1;\n    b1 = b0 + c9 * b1;\n    a0 = a0 / b1;\n    b0 = b0 / b1;\n    a1 = a1 / b1;\n    b1 = 1;\n  }\n  return a1 / a;\n}\nfunction combination(n, m) {\n  // make sure n or m don't exceed the upper limit of usable values\n  return n > 170 || m > 170 ? Math.exp(combinationln(n, m)) : factorial(n) / factorial(m) / factorial(n - m);\n}\nfunction combinationln(n, m) {\n  return factorialln(n) - factorialln(m) - factorialln(n - m);\n}\n// natural log factorial of n\nexport function factorialln(n) {\n  return n < 0 ? NaN : gammaln(n + 1);\n}\n// factorial of n\nexport function factorial(n) {\n  return n < 0 ? NaN : gammafn(n + 1);\n}\nexport const chisquare = {\n  pdf: function pdf(x, dof) {\n    if (x < 0) {\n      return 0;\n    }\n    return x === 0 && dof === 2 ? 0.5 : Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - dof / 2 * Math.log(2) - gammaln(dof / 2));\n  },\n  cdf: function cdf(x, dof) {\n    if (x < 0) {\n      return 0;\n    }\n    return lowRegGamma(dof / 2, x / 2);\n  },\n  inv: function (p, dof) {\n    return 2 * gammapinv(p, 0.5 * dof);\n  }\n};\nexport const centralF = {\n  // This implementation of the pdf function avoids float overflow\n  // See the way that R calculates this value:\n  // https://svn.r-project.org/R/trunk/src/nmath/df.c\n  pdf: function pdf(x, df1, df2) {\n    var p, q, f;\n    if (x < 0) {\n      return 0;\n    }\n    if (df1 <= 2) {\n      if (x === 0 && df1 < 2) {\n        return Infinity;\n      }\n      if (x === 0 && df1 === 2) {\n        return 1;\n      }\n      return 1 / betafn(df1 / 2, df2 / 2) * Math.pow(df1 / df2, df1 / 2) * Math.pow(x, df1 / 2 - 1) * Math.pow(1 + df1 / df2 * x, -(df1 + df2) / 2);\n    }\n    p = df1 * x / (df2 + x * df1);\n    q = df2 / (df2 + x * df1);\n    f = df1 * q / 2.0;\n    return f * binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);\n  },\n  cdf: function cdf(x, df1, df2) {\n    if (x < 0) {\n      return 0;\n    }\n    return ibeta(df1 * x / (df1 * x + df2), df1 / 2, df2 / 2);\n  },\n  inv: function inv(x, df1, df2) {\n    return df2 / (df1 * (1 / ibetainv(x, df1 / 2, df2 / 2) - 1));\n  }\n};\nexport const weibull = {\n  pdf: function pdf(x, scale, shape) {\n    if (x < 0 || scale < 0 || shape < 0) {\n      return 0;\n    }\n    return shape / scale * Math.pow(x / scale, shape - 1) * Math.exp(-Math.pow(x / scale, shape));\n  },\n  cdf: function cdf(x, scale, shape) {\n    return x < 0 ? 0 : 1 - Math.exp(-Math.pow(x / scale, shape));\n  }\n};\nexport const poisson = {\n  pdf: function pdf(k, l) {\n    if (l < 0 || k % 1 !== 0 || k < 0) {\n      return 0;\n    }\n    return Math.pow(l, k) * Math.exp(-l) / factorial(k);\n  },\n  cdf: function cdf(x, l) {\n    var k = 0;\n    if (x < 0) {\n      return 0;\n    }\n    var sum = 0;\n    for (; k <= x; k++) {\n      sum += poisson.pdf(k, l);\n    }\n    return sum;\n  }\n};\nexport const hypgeom = {\n  pdf: function pdf(k, N, m, n) {\n    // Hypergeometric PDF.\n    // A simplification of the CDF algorithm below.\n    // k = number of successes drawn\n    // N = population size\n    // m = number of successes in population\n    // n = number of items drawn from population\n    // if(k !== k | 0) {\n    //   return false;\n    // } else\n    if (k < 0 || k < m - (N - n)) {\n      // It's impossible to have this few successes drawn.\n      return 0;\n    } else if (k > n || k > m) {\n      // It's impossible to have this many successes drawn.\n      return 0;\n    } else if (m * 2 > N) {\n      // More than half the population is successes.\n      if (n * 2 > N) {\n        // More than half the population is sampled.\n        return hypgeom.pdf(N - m - n + k, N, N - m, N - n);\n      } else {\n        // Half or less of the population is sampled.\n        return hypgeom.pdf(n - k, N, N - m, n);\n      }\n    } else if (n * 2 > N) {\n      // Half or less is successes.\n      return hypgeom.pdf(m - k, N, m, N - n);\n    } else if (m < n) {\n      // We want to have the number of things sampled to be less than the\n      // successes available. So swap the definitions of successful and sampled.\n      return hypgeom.pdf(k, N, n, m);\n    } else {\n      // If we get here, half or less of the population was sampled, half or\n      // less of it was successes, and we had fewer sampled things than\n      // successes. Now we can do this complicated iterative algorithm in an\n      // efficient way.\n      // The basic premise of the algorithm is that we partially normalize our\n      // intermediate product to keep it in a numerically good region, and then\n      // finish the normalization at the end.\n      // This variable holds the scaled probability of the current number of\n      // successes.\n      var scaledPDF = 1;\n      // This keeps track of how much we have normalized.\n      var samplesDone = 0;\n      for (var i = 0; i < k; i++) {\n        // For every possible number of successes up to that observed...\n        while (scaledPDF > 1 && samplesDone < n) {\n          // Intermediate result is growing too big. Apply some of the\n          // normalization to shrink everything.\n          scaledPDF *= 1 - m / (N - samplesDone);\n          // Say we've normalized by this sample already.\n          samplesDone++;\n        }\n        // Work out the partially-normalized hypergeometric PDF for the next\n        // number of successes\n        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));\n      }\n      for (; samplesDone < n; samplesDone++) {\n        // Apply all the rest of the normalization\n        scaledPDF *= 1 - m / (N - samplesDone);\n      }\n      // Bound answer sanely before returning.\n      return Math.min(1, Math.max(0, scaledPDF));\n    }\n  },\n  cdf: function cdf(x, N, m, n) {\n    // Hypergeometric CDF.\n    // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,\n    // and comes from his hypergeometric test calculator at\n    // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.\n    // x = number of successes drawn\n    // N = population size\n    // m = number of successes in population\n    // n = number of items drawn from population\n    if (x < 0 || x < m - (N - n)) {\n      // It's impossible to have this few successes drawn or fewer.\n      return 0;\n    } else if (x >= n || x >= m) {\n      // We will always have this many successes or fewer.\n      return 1;\n    } else if (m * 2 > N) {\n      // More than half the population is successes.\n      if (n * 2 > N) {\n        // More than half the population is sampled.\n        return cdf(N - m - n + x, N, N - m, N - n);\n      } else {\n        // Half or less of the population is sampled.\n        return 1 - hypgeom.cdf(n - x - 1, N, N - m, n);\n      }\n    } else if (n * 2 > N) {\n      // Half or less is successes.\n      return 1 - hypgeom.cdf(m - x - 1, N, m, N - n);\n    } else if (m < n) {\n      // We want to have the number of things sampled to be less than the\n      // successes available. So swap the definitions of successful and sampled.\n      return hypgeom.cdf(x, N, n, m);\n    } else {\n      // If we get here, half or less of the population was sampled, half or\n      // less of it was successes, and we had fewer sampled things than\n      // successes. Now we can do this complicated iterative algorithm in an\n      // efficient way.\n      // The basic premise of the algorithm is that we partially normalize our\n      // intermediate sum to keep it in a numerically good region, and then\n      // finish the normalization at the end.\n      // Holds the intermediate, scaled total CDF.\n      var scaledCDF = 1;\n      // This variable holds the scaled probability of the current number of\n      // successes.\n      var scaledPDF = 1;\n      // This keeps track of how much we have normalized.\n      var samplesDone = 0;\n      for (var i = 0; i < x; i++) {\n        // For every possible number of successes up to that observed...\n        while (scaledCDF > 1 && samplesDone < n) {\n          // Intermediate result is growing too big. Apply some of the\n          // normalization to shrink everything.\n          var factor = 1 - m / (N - samplesDone);\n          scaledPDF *= factor;\n          scaledCDF *= factor;\n          // Say we've normalized by this sample already.\n          samplesDone++;\n        }\n        // Work out the partially-normalized hypergeometric PDF for the next\n        // number of successes\n        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));\n        // Add to the CDF answer.\n        scaledCDF += scaledPDF;\n      }\n      for (; samplesDone < n; samplesDone++) {\n        // Apply all the rest of the normalization\n        scaledCDF *= 1 - m / (N - samplesDone);\n      }\n      // Bound answer sanely before returning.\n      return Math.min(1, Math.max(0, scaledCDF));\n    }\n  }\n};\nexport const studentt = {\n  pdf: function pdf(x, dof) {\n    dof = dof > 1e100 ? 1e100 : dof;\n    return 1 / (Math.sqrt(dof) * betafn(0.5, dof / 2)) * Math.pow(1 + x * x / dof, -((dof + 1) / 2));\n  },\n  cdf: function cdf(x, dof) {\n    var dof2 = dof / 2;\n    return ibeta((x + Math.sqrt(x * x + dof)) / (2 * Math.sqrt(x * x + dof)), dof2, dof2);\n  },\n  inv: function (p, dof) {\n    var x = ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);\n    x = Math.sqrt(dof * (1 - x) / x);\n    return p > 0.5 ? x : -x;\n  }\n};\nexport const lognormal = {\n  pdf: function pdf(x, mu, sigma) {\n    if (x <= 0) {\n      return 0;\n    }\n    return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) - Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) / (2 * sigma * sigma));\n  },\n  cdf: function cdf(x, mu, sigma) {\n    if (x < 0) {\n      return 0;\n    }\n    return 0.5 + 0.5 * erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma));\n  },\n  inv: function (p, mu, sigma) {\n    return Math.exp(-1.41421356237309505 * sigma * erfcinv(2 * p) + mu);\n  }\n};\nexport const negbin = {\n  pdf: function pdf(k, r, p) {\n    if (k !== k >>> 0) {\n      return false;\n    }\n    if (k < 0) {\n      return 0;\n    }\n    return combination(k + r - 1, r - 1) * Math.pow(1 - p, k) * Math.pow(p, r);\n  },\n  cdf: function cdf(x, r, p) {\n    var sum = 0,\n      k = 0;\n    if (x < 0) {\n      return 0;\n    }\n    for (; k <= x; k++) {\n      sum += negbin.pdf(k, r, p);\n    }\n    return sum;\n  }\n};\nfunction sum(arr) {\n  var sum = 0;\n  var i = arr.length;\n  while (--i >= 0) {\n    sum += arr[i];\n  }\n  return sum;\n}\nexport function mean(arr) {\n  return sum(arr) / arr.length;\n}\nexport function sumsqerr(arr) {\n  var meanv = mean(arr);\n  var sum = 0;\n  var i = arr.length;\n  var tmp;\n  while (--i >= 0) {\n    tmp = arr[i] - meanv;\n    sum += tmp * tmp;\n  }\n  return sum;\n}\nexport function variance(arr, flag) {\n  return sumsqerr(arr) / (arr.length - (flag ? 1 : 0));\n}\nexport function stdev(arr, flag) {\n  return Math.sqrt(variance(arr, flag));\n}\n// 2 different parameter setups\n// (value, alpha, sd, n)\n// (value, alpha, array)\nexport function normalci() {\n  var args = [].slice.call(arguments),\n    ans = new Array(2),\n    change;\n  if (args.length === 4) {\n    change = Math.abs(normal.inv(args[1] / 2, 0, 1) * args[2] / Math.sqrt(args[3]));\n  } else {\n    // @ts-ignore\n    change = Math.abs(normal.inv(args[1] / 2, 0, 1) * stdev(args[2]) / Math.sqrt(args[2].length));\n  }\n  ans[0] = args[0] - change;\n  ans[1] = args[0] + change;\n  return ans;\n}\nexport function tci() {\n  var args = [].slice.call(arguments),\n    ans = new Array(2),\n    change;\n  if (args.length === 4) {\n    change = Math.abs(studentt.inv(args[1] / 2, args[3] - 1) * args[2] / Math.sqrt(args[3]));\n  } else {\n    // @ts-ignore\n    change = Math.abs(studentt.inv(args[1] / 2, args[2].length - 1) * stdev(args[2], true) / Math.sqrt(args[2].length));\n  }\n  ans[0] = args[0] - change;\n  ans[1] = args[0] + change;\n  return ans;\n}\nfunction product(arr) {\n  var prod = 1;\n  var i = arr.length;\n  while (--i >= 0) {\n    prod *= arr[i];\n  }\n  return prod;\n}\nexport function geomean(arr) {\n  return Math.pow(product(arr), 1 / arr.length);\n}\nexport function covariance(arr1, arr2) {\n  var u = mean(arr1);\n  var v = mean(arr2);\n  var arr1Len = arr1.length;\n  var sq_dev = new Array(arr1Len);\n  var i;\n  for (i = 0; i < arr1Len; i++) {\n    sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);\n  }\n  return sum(sq_dev) / (arr1Len - 1);\n}\nexport function corrcoeff(arr1, arr2) {\n  return covariance(arr1, arr2) / stdev(arr1, 1) / stdev(arr2, 1);\n}","map":{"version":3,"names":["erf","x","cof","j","length","isneg","d","dd","t","ty","tmp","res","Math","exp","erfc","erfcinv","p","err","pp","sqrt","log","exponential","pdf","rate","cdf","gammafn","q","fact","n","xden","xnum","y","i","z","yi","Infinity","PI","sin","gamma","shape","scale","gammaln","lowRegGamma","inv","gammapinv","ser","xx","a","aln","ap","sum","del","b","c","h","ITMAX","an","NaN","a1","EPS","gln","u","lna1","afac","max","pow","min","abs","normal","mean","std","beta","alpha","betafn","betaln","ibeta","ibetainv","undefined","b1","lna","lnb","al","w","bt","betacf","fpmin","m","qab","qap","qam","m2","aa","binomial","k","combination","betacdf","eps","floor","s","betinc","round","a0","b0","m9","a2","c9","combinationln","factorial","factorialln","chisquare","dof","centralF","df1","df2","f","weibull","poisson","l","hypgeom","N","scaledPDF","samplesDone","scaledCDF","factor","studentt","dof2","lognormal","mu","sigma","negbin","r","arr","sumsqerr","meanv","variance","flag","stdev","normalci","args","slice","call","arguments","ans","Array","change","tci","product","prod","geomean","covariance","arr1","arr2","v","arr1Len","sq_dev","corrcoeff"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/3rdparty/jstat/jstat.mjs"],"sourcesContent":["/**\r\n * @license\r\n Copyright (c) 2013 jStat\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n */\nexport function erf(x) {\n  const cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2, -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4, 4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6, 1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8, 6.529054439e-9, 5.059343495e-9, -9.91364156e-10, -2.27365122e-10, 9.6467911e-11, 2.394038e-12, -6.886027e-12, 8.94487e-13, 3.13092e-13, -1.12708e-13, 3.81e-16, 7.106e-15, -1.523e-15, -9.4e-17, 1.21e-16, -2.8e-17];\n  let j = cof.length - 1;\n  let isneg = false;\n  let d = 0;\n  let dd = 0;\n  let t, ty, tmp, res;\n  if (x === 0) {\n    return 0;\n  }\n  if (x < 0) {\n    x = -x;\n    isneg = true;\n  }\n  t = 2 / (2 + x);\n  ty = 4 * t - 2;\n  for (; j > 0; j--) {\n    tmp = d;\n    d = ty * d - dd + cof[j];\n    dd = tmp;\n  }\n  res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);\n  return isneg ? res - 1 : 1 - res;\n}\nexport function erfc(x) {\n  return 1 - erf(x);\n}\nfunction erfcinv(p) {\n  let j = 0;\n  let x, err, t, pp;\n  if (p >= 2) {\n    return -100;\n  }\n  if (p <= 0) {\n    return 100;\n  }\n  pp = p < 1 ? p : 2 - p;\n  t = Math.sqrt(-2 * Math.log(pp / 2));\n  x = -0.70711 * ((2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t);\n  for (; j < 2; j++) {\n    err = erfc(x) - pp;\n    x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);\n  }\n  return p < 1 ? x : -x;\n}\nexport const exponential = {\n  pdf: (x, rate) => {\n    return x < 0 ? 0 : rate * Math.exp(-rate * x);\n  },\n  cdf: (x, rate) => {\n    return x < 0 ? 0 : 1 - Math.exp(-rate * x);\n  }\n};\nexport function gammafn(x) {\n  const p = [-1.716185138865495, 24.76565080557592, -379.80425647094563, 629.3311553128184, 866.9662027904133, -31451.272968848367, -36144.413418691176, 66456.14382024054];\n  const q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192, -3107.771671572311, 22538.118420980151, 4755.8462775278811, -134659.9598649693, -115132.2596755535];\n  let fact = false;\n  let n = 0;\n  let xden = 0;\n  let xnum = 0;\n  let y = x;\n  let i, z, yi, res;\n  if (x > 171.6243769536076) {\n    return Infinity;\n  }\n  if (y <= 0) {\n    res = y % 1;\n    if (res) {\n      fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);\n      y = 1 - y;\n    } else {\n      return Infinity;\n    }\n  }\n  yi = y;\n  if (y < 1) {\n    z = y++;\n  } else {\n    z = (y -= n = (y | 0) - 1) - 1;\n  }\n  for (i = 0; i < 8; ++i) {\n    xnum = (xnum + p[i]) * z;\n    xden = xden * z + q[i];\n  }\n  res = xnum / xden + 1;\n  if (yi < y) {\n    res /= yi;\n  } else if (yi > y) {\n    for (i = 0; i < n; ++i) {\n      res *= y;\n      y++;\n    }\n  }\n  if (fact) {\n    res = fact / res;\n  }\n  return res;\n}\nexport const gamma = {\n  pdf: function pdf(x, shape, scale) {\n    if (x < 0) {\n      return 0;\n    }\n    return x === 0 && shape === 1 ? 1 / scale : Math.exp((shape - 1) * Math.log(x) - x / scale - gammaln(shape) - shape * Math.log(scale));\n  },\n  cdf: function cdf(x, shape, scale) {\n    if (x < 0) {\n      return 0;\n    }\n    return lowRegGamma(shape, x / scale);\n  },\n  inv: function (p, shape, scale) {\n    return gammapinv(p, shape) * scale;\n  }\n};\nexport function gammaln(x) {\n  let j = 0;\n  const cof = [76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];\n  let ser = 1.000000000190015;\n  let xx, y, tmp;\n  tmp = (y = xx = x) + 5.5;\n  tmp -= (xx + 0.5) * Math.log(tmp);\n  for (; j < 6; j++) {\n    ser += cof[j] / ++y;\n  }\n  return Math.log(2.5066282746310005 * ser / xx) - tmp;\n}\nfunction lowRegGamma(a, x) {\n  const aln = gammaln(a);\n  let ap = a;\n  let sum = 1 / a;\n  let del = sum;\n  let b = x + 1 - a;\n  let c = 1 / 1.0e-30;\n  let d = 1 / b;\n  let h = d;\n  let i = 1;\n  // calculate maximum number of itterations required for a\n  const ITMAX = -~(Math.log(a >= 1 ? a : 1 / a) * 8.5 + a * 0.4 + 17);\n  let an;\n  if (x < 0 || a <= 0) {\n    return NaN;\n  } else if (x < a + 1) {\n    for (; i <= ITMAX; i++) {\n      sum += del *= x / ++ap;\n    }\n    return sum * Math.exp(-x + a * Math.log(x) - aln);\n  }\n  for (; i <= ITMAX; i++) {\n    an = -i * (i - a);\n    b += 2;\n    d = an * d + b;\n    c = b + an / c;\n    d = 1 / d;\n    h *= d * c;\n  }\n  return 1 - h * Math.exp(-x + a * Math.log(x) - aln);\n}\nfunction gammapinv(p, a) {\n  let j = 0;\n  const a1 = a - 1;\n  const EPS = 1e-8;\n  const gln = gammaln(a);\n  let x, err, t, u, pp;\n  let lna1;\n  let afac;\n  if (p >= 1) {\n    return Math.max(100, a + 100 * Math.sqrt(a));\n  }\n  if (p <= 0) {\n    return 0;\n  }\n  if (a > 1) {\n    lna1 = Math.log(a1);\n    afac = Math.exp(a1 * (lna1 - 1) - gln);\n    pp = p < 0.5 ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5) {\n      x = -x;\n    }\n    x = Math.max(1e-3, a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));\n  } else {\n    t = 1 - a * (0.253 + a * 0.12);\n    if (p < t) {\n      x = Math.pow(p / t, 1 / a);\n    } else {\n      x = 1 - Math.log(1 - (p - t) / (1 - t));\n    }\n  }\n  for (; j < 12; j++) {\n    if (x <= 0) {\n      return 0;\n    }\n    err = lowRegGamma(a, x) - p;\n    if (a > 1) {\n      t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));\n    } else {\n      t = Math.exp(-x + a1 * Math.log(x) - gln);\n    }\n    u = err / t;\n    x -= t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1)));\n    if (x <= 0) {\n      x = 0.5 * (x + t);\n    }\n    if (Math.abs(t) < EPS * x) {\n      break;\n    }\n  }\n  return x;\n}\nexport const normal = {\n  pdf: function pdf(x, mean, std) {\n    return Math.exp(-0.5 * Math.log(2 * Math.PI) - Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));\n  },\n  cdf: function cdf(x, mean, std) {\n    return 0.5 * (1 + erf((x - mean) / Math.sqrt(2 * std * std)));\n  },\n  inv: function (p, mean, std) {\n    return -1.41421356237309505 * std * erfcinv(2 * p) + mean;\n  }\n};\nexport const beta = {\n  pdf: function pdf(x, alpha, beta) {\n    // PDF is zero outside the support\n    if (x > 1 || x < 0) {\n      return 0;\n    }\n    // PDF is one for the uniform case\n    if (alpha == 1 && beta == 1) {\n      return 1;\n    }\n    if (alpha < 512 && beta < 512) {\n      return Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1) / betafn(alpha, beta);\n    } else {\n      return Math.exp((alpha - 1) * Math.log(x) + (beta - 1) * Math.log(1 - x) - betaln(alpha, beta));\n    }\n  },\n  cdf: function cdf(x, alpha, beta) {\n    return x > 1 || x < 0 ? +(x > 1) : ibeta(x, alpha, beta);\n  },\n  inv: function inv(x, alpha, beta) {\n    return ibetainv(x, alpha, beta);\n  }\n};\nfunction betafn(x, y) {\n  // ensure arguments are positive\n  if (x <= 0 || y <= 0) {\n    return undefined;\n  }\n  // make sure x + y doesn't exceed the upper limit of usable values\n  return x + y > 170 ? Math.exp(betaln(x, y)) : gammafn(x) * gammafn(y) / gammafn(x + y);\n}\nfunction betaln(x, y) {\n  return gammaln(x) + gammaln(y) - gammaln(x + y);\n}\nfunction ibetainv(p, a, b) {\n  var EPS = 1e-8;\n  var a1 = a - 1;\n  var b1 = b - 1;\n  var j = 0;\n  var lna, lnb, pp, t, u, err, x, al, h, w, afac;\n  if (p <= 0) {\n    return 0;\n  }\n  if (p >= 1) {\n    return 1;\n  }\n  if (a >= 1 && b >= 1) {\n    pp = p < 0.5 ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5) {\n      x = -x;\n    }\n    al = (x * x - 3) / 6;\n    h = 2 / (1 / (2 * a - 1) + 1 / (2 * b - 1));\n    w = x * Math.sqrt(al + h) / h - (1 / (2 * b - 1) - 1 / (2 * a - 1)) * (al + 5 / 6 - 2 / (3 * h));\n    x = a / (a + b * Math.exp(2 * w));\n  } else {\n    lna = Math.log(a / (a + b));\n    lnb = Math.log(b / (a + b));\n    t = Math.exp(a * lna) / a;\n    u = Math.exp(b * lnb) / b;\n    w = t + u;\n    if (p < t / w) {\n      x = Math.pow(a * w * p, 1 / a);\n    } else {\n      x = 1 - Math.pow(b * w * (1 - p), 1 / b);\n    }\n  }\n  afac = -gammaln(a) - gammaln(b) + gammaln(a + b);\n  for (; j < 10; j++) {\n    if (x === 0 || x === 1) {\n      return x;\n    }\n    // @ts-ignore\n    err = ibeta(x, a, b) - p;\n    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);\n    u = err / t;\n    x -= t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x))));\n    if (x <= 0) {\n      x = 0.5 * (x + t);\n    }\n    if (x >= 1) {\n      x = 0.5 * (x + t + 1);\n    }\n    if (Math.abs(t) < EPS * x && j > 0) {\n      break;\n    }\n  }\n  return x;\n}\nfunction ibeta(x, a, b) {\n  // Factors in front of the continued fraction.\n  var bt = x === 0 || x === 1 ? 0 : Math.exp(gammaln(a + b) - gammaln(a) - gammaln(b) + a * Math.log(x) + b * Math.log(1 - x));\n  if (x < 0 || x > 1) {\n    return false;\n  }\n  if (x < (a + 1) / (a + b + 2))\n    // Use continued fraction directly.\n    {\n      return bt * betacf(x, a, b) / a;\n    }\n  // else use continued fraction after making the symmetry transformation.\n  return 1 - bt * betacf(1 - x, b, a) / b;\n}\nfunction betacf(x, a, b) {\n  var fpmin = 1e-30;\n  var m = 1;\n  var qab = a + b;\n  var qap = a + 1;\n  var qam = a - 1;\n  var c = 1;\n  var d = 1 - qab * x / qap;\n  var m2, aa, del, h;\n  // These q's will be used in factors that occur in the coefficients\n  if (Math.abs(d) < fpmin) {\n    d = fpmin;\n  }\n  d = 1 / d;\n  h = d;\n  for (; m <= 100; m++) {\n    m2 = 2 * m;\n    aa = m * (b - m) * x / ((qam + m2) * (a + m2));\n    // One step (the even one) of the recurrence\n    d = 1 + aa * d;\n    if (Math.abs(d) < fpmin) {\n      d = fpmin;\n    }\n    c = 1 + aa / c;\n    if (Math.abs(c) < fpmin) {\n      c = fpmin;\n    }\n    d = 1 / d;\n    h *= d * c;\n    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));\n    // Next step of the recurrence (the odd one)\n    d = 1 + aa * d;\n    if (Math.abs(d) < fpmin) {\n      d = fpmin;\n    }\n    c = 1 + aa / c;\n    if (Math.abs(c) < fpmin) {\n      c = fpmin;\n    }\n    d = 1 / d;\n    del = d * c;\n    h *= del;\n    if (Math.abs(del - 1.0) < 3e-7) {\n      break;\n    }\n  }\n  return h;\n}\nexport const binomial = {\n  pdf: function (k, n, p) {\n    return p === 0 || p === 1 ? n * p === k ? 1 : 0 : combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\n  },\n  cdf: function (x, n, p) {\n    var betacdf;\n    var eps = 1e-10;\n    if (x < 0) {\n      return 0;\n    }\n    if (x >= n) {\n      return 1;\n    }\n    if (p < 0 || p > 1 || n <= 0) {\n      return NaN;\n    }\n    x = Math.floor(x);\n    var z = p;\n    var a = x + 1;\n    var b = n - x;\n    var s = a + b;\n    var bt = Math.exp(gammaln(s) - gammaln(b) - gammaln(a) + a * Math.log(z) + b * Math.log(1 - z));\n    if (z < (a + 1) / (s + 2)) {\n      betacdf = bt * betinc(z, a, b, eps);\n    } else {\n      betacdf = 1 - bt * betinc(1 - z, b, a, eps);\n    }\n    return Math.round((1 - betacdf) * (1 / eps)) / (1 / eps);\n  }\n};\nfunction betinc(x, a, b, eps) {\n  var a0 = 0;\n  var b0 = 1;\n  var a1 = 1;\n  var b1 = 1;\n  var m9 = 0;\n  var a2 = 0;\n  var c9;\n  while (Math.abs((a1 - a2) / a1) > eps) {\n    a2 = a1;\n    c9 = -(a + m9) * (a + b + m9) * x / (a + 2 * m9) / (a + 2 * m9 + 1);\n    a0 = a1 + c9 * a0;\n    b0 = b1 + c9 * b0;\n    m9 = m9 + 1;\n    c9 = m9 * (b - m9) * x / (a + 2 * m9 - 1) / (a + 2 * m9);\n    a1 = a0 + c9 * a1;\n    b1 = b0 + c9 * b1;\n    a0 = a0 / b1;\n    b0 = b0 / b1;\n    a1 = a1 / b1;\n    b1 = 1;\n  }\n  return a1 / a;\n}\nfunction combination(n, m) {\n  // make sure n or m don't exceed the upper limit of usable values\n  return n > 170 || m > 170 ? Math.exp(combinationln(n, m)) : factorial(n) / factorial(m) / factorial(n - m);\n}\nfunction combinationln(n, m) {\n  return factorialln(n) - factorialln(m) - factorialln(n - m);\n}\n// natural log factorial of n\nexport function factorialln(n) {\n  return n < 0 ? NaN : gammaln(n + 1);\n}\n// factorial of n\nexport function factorial(n) {\n  return n < 0 ? NaN : gammafn(n + 1);\n}\nexport const chisquare = {\n  pdf: function pdf(x, dof) {\n    if (x < 0) {\n      return 0;\n    }\n    return x === 0 && dof === 2 ? 0.5 : Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - dof / 2 * Math.log(2) - gammaln(dof / 2));\n  },\n  cdf: function cdf(x, dof) {\n    if (x < 0) {\n      return 0;\n    }\n    return lowRegGamma(dof / 2, x / 2);\n  },\n  inv: function (p, dof) {\n    return 2 * gammapinv(p, 0.5 * dof);\n  }\n};\nexport const centralF = {\n  // This implementation of the pdf function avoids float overflow\n  // See the way that R calculates this value:\n  // https://svn.r-project.org/R/trunk/src/nmath/df.c\n  pdf: function pdf(x, df1, df2) {\n    var p, q, f;\n    if (x < 0) {\n      return 0;\n    }\n    if (df1 <= 2) {\n      if (x === 0 && df1 < 2) {\n        return Infinity;\n      }\n      if (x === 0 && df1 === 2) {\n        return 1;\n      }\n      return 1 / betafn(df1 / 2, df2 / 2) * Math.pow(df1 / df2, df1 / 2) * Math.pow(x, df1 / 2 - 1) * Math.pow(1 + df1 / df2 * x, -(df1 + df2) / 2);\n    }\n    p = df1 * x / (df2 + x * df1);\n    q = df2 / (df2 + x * df1);\n    f = df1 * q / 2.0;\n    return f * binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);\n  },\n  cdf: function cdf(x, df1, df2) {\n    if (x < 0) {\n      return 0;\n    }\n    return ibeta(df1 * x / (df1 * x + df2), df1 / 2, df2 / 2);\n  },\n  inv: function inv(x, df1, df2) {\n    return df2 / (df1 * (1 / ibetainv(x, df1 / 2, df2 / 2) - 1));\n  }\n};\nexport const weibull = {\n  pdf: function pdf(x, scale, shape) {\n    if (x < 0 || scale < 0 || shape < 0) {\n      return 0;\n    }\n    return shape / scale * Math.pow(x / scale, shape - 1) * Math.exp(-Math.pow(x / scale, shape));\n  },\n  cdf: function cdf(x, scale, shape) {\n    return x < 0 ? 0 : 1 - Math.exp(-Math.pow(x / scale, shape));\n  }\n};\nexport const poisson = {\n  pdf: function pdf(k, l) {\n    if (l < 0 || k % 1 !== 0 || k < 0) {\n      return 0;\n    }\n    return Math.pow(l, k) * Math.exp(-l) / factorial(k);\n  },\n  cdf: function cdf(x, l) {\n    var k = 0;\n    if (x < 0) {\n      return 0;\n    }\n    var sum = 0;\n    for (; k <= x; k++) {\n      sum += poisson.pdf(k, l);\n    }\n    return sum;\n  }\n};\nexport const hypgeom = {\n  pdf: function pdf(k, N, m, n) {\n    // Hypergeometric PDF.\n    // A simplification of the CDF algorithm below.\n    // k = number of successes drawn\n    // N = population size\n    // m = number of successes in population\n    // n = number of items drawn from population\n    // if(k !== k | 0) {\n    //   return false;\n    // } else\n    if (k < 0 || k < m - (N - n)) {\n      // It's impossible to have this few successes drawn.\n      return 0;\n    } else if (k > n || k > m) {\n      // It's impossible to have this many successes drawn.\n      return 0;\n    } else if (m * 2 > N) {\n      // More than half the population is successes.\n      if (n * 2 > N) {\n        // More than half the population is sampled.\n        return hypgeom.pdf(N - m - n + k, N, N - m, N - n);\n      } else {\n        // Half or less of the population is sampled.\n        return hypgeom.pdf(n - k, N, N - m, n);\n      }\n    } else if (n * 2 > N) {\n      // Half or less is successes.\n      return hypgeom.pdf(m - k, N, m, N - n);\n    } else if (m < n) {\n      // We want to have the number of things sampled to be less than the\n      // successes available. So swap the definitions of successful and sampled.\n      return hypgeom.pdf(k, N, n, m);\n    } else {\n      // If we get here, half or less of the population was sampled, half or\n      // less of it was successes, and we had fewer sampled things than\n      // successes. Now we can do this complicated iterative algorithm in an\n      // efficient way.\n      // The basic premise of the algorithm is that we partially normalize our\n      // intermediate product to keep it in a numerically good region, and then\n      // finish the normalization at the end.\n      // This variable holds the scaled probability of the current number of\n      // successes.\n      var scaledPDF = 1;\n      // This keeps track of how much we have normalized.\n      var samplesDone = 0;\n      for (var i = 0; i < k; i++) {\n        // For every possible number of successes up to that observed...\n        while (scaledPDF > 1 && samplesDone < n) {\n          // Intermediate result is growing too big. Apply some of the\n          // normalization to shrink everything.\n          scaledPDF *= 1 - m / (N - samplesDone);\n          // Say we've normalized by this sample already.\n          samplesDone++;\n        }\n        // Work out the partially-normalized hypergeometric PDF for the next\n        // number of successes\n        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));\n      }\n      for (; samplesDone < n; samplesDone++) {\n        // Apply all the rest of the normalization\n        scaledPDF *= 1 - m / (N - samplesDone);\n      }\n      // Bound answer sanely before returning.\n      return Math.min(1, Math.max(0, scaledPDF));\n    }\n  },\n  cdf: function cdf(x, N, m, n) {\n    // Hypergeometric CDF.\n    // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,\n    // and comes from his hypergeometric test calculator at\n    // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.\n    // x = number of successes drawn\n    // N = population size\n    // m = number of successes in population\n    // n = number of items drawn from population\n    if (x < 0 || x < m - (N - n)) {\n      // It's impossible to have this few successes drawn or fewer.\n      return 0;\n    } else if (x >= n || x >= m) {\n      // We will always have this many successes or fewer.\n      return 1;\n    } else if (m * 2 > N) {\n      // More than half the population is successes.\n      if (n * 2 > N) {\n        // More than half the population is sampled.\n        return cdf(N - m - n + x, N, N - m, N - n);\n      } else {\n        // Half or less of the population is sampled.\n        return 1 - hypgeom.cdf(n - x - 1, N, N - m, n);\n      }\n    } else if (n * 2 > N) {\n      // Half or less is successes.\n      return 1 - hypgeom.cdf(m - x - 1, N, m, N - n);\n    } else if (m < n) {\n      // We want to have the number of things sampled to be less than the\n      // successes available. So swap the definitions of successful and sampled.\n      return hypgeom.cdf(x, N, n, m);\n    } else {\n      // If we get here, half or less of the population was sampled, half or\n      // less of it was successes, and we had fewer sampled things than\n      // successes. Now we can do this complicated iterative algorithm in an\n      // efficient way.\n      // The basic premise of the algorithm is that we partially normalize our\n      // intermediate sum to keep it in a numerically good region, and then\n      // finish the normalization at the end.\n      // Holds the intermediate, scaled total CDF.\n      var scaledCDF = 1;\n      // This variable holds the scaled probability of the current number of\n      // successes.\n      var scaledPDF = 1;\n      // This keeps track of how much we have normalized.\n      var samplesDone = 0;\n      for (var i = 0; i < x; i++) {\n        // For every possible number of successes up to that observed...\n        while (scaledCDF > 1 && samplesDone < n) {\n          // Intermediate result is growing too big. Apply some of the\n          // normalization to shrink everything.\n          var factor = 1 - m / (N - samplesDone);\n          scaledPDF *= factor;\n          scaledCDF *= factor;\n          // Say we've normalized by this sample already.\n          samplesDone++;\n        }\n        // Work out the partially-normalized hypergeometric PDF for the next\n        // number of successes\n        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));\n        // Add to the CDF answer.\n        scaledCDF += scaledPDF;\n      }\n      for (; samplesDone < n; samplesDone++) {\n        // Apply all the rest of the normalization\n        scaledCDF *= 1 - m / (N - samplesDone);\n      }\n      // Bound answer sanely before returning.\n      return Math.min(1, Math.max(0, scaledCDF));\n    }\n  }\n};\nexport const studentt = {\n  pdf: function pdf(x, dof) {\n    dof = dof > 1e100 ? 1e100 : dof;\n    return 1 / (Math.sqrt(dof) * betafn(0.5, dof / 2)) * Math.pow(1 + x * x / dof, -((dof + 1) / 2));\n  },\n  cdf: function cdf(x, dof) {\n    var dof2 = dof / 2;\n    return ibeta((x + Math.sqrt(x * x + dof)) / (2 * Math.sqrt(x * x + dof)), dof2, dof2);\n  },\n  inv: function (p, dof) {\n    var x = ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);\n    x = Math.sqrt(dof * (1 - x) / x);\n    return p > 0.5 ? x : -x;\n  }\n};\nexport const lognormal = {\n  pdf: function pdf(x, mu, sigma) {\n    if (x <= 0) {\n      return 0;\n    }\n    return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) - Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) / (2 * sigma * sigma));\n  },\n  cdf: function cdf(x, mu, sigma) {\n    if (x < 0) {\n      return 0;\n    }\n    return 0.5 + 0.5 * erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma));\n  },\n  inv: function (p, mu, sigma) {\n    return Math.exp(-1.41421356237309505 * sigma * erfcinv(2 * p) + mu);\n  }\n};\nexport const negbin = {\n  pdf: function pdf(k, r, p) {\n    if (k !== k >>> 0) {\n      return false;\n    }\n    if (k < 0) {\n      return 0;\n    }\n    return combination(k + r - 1, r - 1) * Math.pow(1 - p, k) * Math.pow(p, r);\n  },\n  cdf: function cdf(x, r, p) {\n    var sum = 0,\n      k = 0;\n    if (x < 0) {\n      return 0;\n    }\n    for (; k <= x; k++) {\n      sum += negbin.pdf(k, r, p);\n    }\n    return sum;\n  }\n};\nfunction sum(arr) {\n  var sum = 0;\n  var i = arr.length;\n  while (--i >= 0) {\n    sum += arr[i];\n  }\n  return sum;\n}\nexport function mean(arr) {\n  return sum(arr) / arr.length;\n}\nexport function sumsqerr(arr) {\n  var meanv = mean(arr);\n  var sum = 0;\n  var i = arr.length;\n  var tmp;\n  while (--i >= 0) {\n    tmp = arr[i] - meanv;\n    sum += tmp * tmp;\n  }\n  return sum;\n}\nexport function variance(arr, flag) {\n  return sumsqerr(arr) / (arr.length - (flag ? 1 : 0));\n}\nexport function stdev(arr, flag) {\n  return Math.sqrt(variance(arr, flag));\n}\n// 2 different parameter setups\n// (value, alpha, sd, n)\n// (value, alpha, array)\nexport function normalci() {\n  var args = [].slice.call(arguments),\n    ans = new Array(2),\n    change;\n  if (args.length === 4) {\n    change = Math.abs(normal.inv(args[1] / 2, 0, 1) * args[2] / Math.sqrt(args[3]));\n  } else {\n    // @ts-ignore\n    change = Math.abs(normal.inv(args[1] / 2, 0, 1) * stdev(args[2]) / Math.sqrt(args[2].length));\n  }\n  ans[0] = args[0] - change;\n  ans[1] = args[0] + change;\n  return ans;\n}\nexport function tci() {\n  var args = [].slice.call(arguments),\n    ans = new Array(2),\n    change;\n  if (args.length === 4) {\n    change = Math.abs(studentt.inv(args[1] / 2, args[3] - 1) * args[2] / Math.sqrt(args[3]));\n  } else {\n    // @ts-ignore\n    change = Math.abs(studentt.inv(args[1] / 2, args[2].length - 1) * stdev(args[2], true) / Math.sqrt(args[2].length));\n  }\n  ans[0] = args[0] - change;\n  ans[1] = args[0] + change;\n  return ans;\n}\nfunction product(arr) {\n  var prod = 1;\n  var i = arr.length;\n  while (--i >= 0) {\n    prod *= arr[i];\n  }\n  return prod;\n}\nexport function geomean(arr) {\n  return Math.pow(product(arr), 1 / arr.length);\n}\nexport function covariance(arr1, arr2) {\n  var u = mean(arr1);\n  var v = mean(arr2);\n  var arr1Len = arr1.length;\n  var sq_dev = new Array(arr1Len);\n  var i;\n  for (i = 0; i < arr1Len; i++) {\n    sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);\n  }\n  return sum(sq_dev) / (arr1Len - 1);\n}\nexport function corrcoeff(arr1, arr2) {\n  return covariance(arr1, arr2) / stdev(arr1, 1) / stdev(arr2, 1);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}