{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\n/**\r\n * Error thrown when the sheet of a given ID does not exist.\r\n */\nexport class NoSheetWithIdError extends Error {\n  constructor(sheetId) {\n    super(`There's no sheet with id = ${sheetId}`);\n  }\n}\n/**\r\n * Error thrown when the sheet of a given name does not exist.\r\n */\nexport class NoSheetWithNameError extends Error {\n  constructor(sheetName) {\n    super(`There's no sheet with name '${sheetName}'`);\n  }\n}\n/**\r\n * Error thrown when the sheet of a given name already exists.\r\n */\nexport class SheetNameAlreadyTakenError extends Error {\n  constructor(sheetName) {\n    super(`Sheet with name ${sheetName} already exists`);\n  }\n}\n/**\r\n * Error thrown when loaded sheet size exceeds configured limits.\r\n */\nexport class SheetSizeLimitExceededError extends Error {\n  constructor() {\n    super('Sheet size limit exceeded');\n  }\n}\n/**\r\n * Error thrown when the the provided string is not a valid formula, i.e does not start with \"=\"\r\n */\nexport class NotAFormulaError extends Error {\n  constructor() {\n    super('This is not a formula');\n  }\n}\n/**\r\n * Error thrown when the given address is invalid.\r\n */\nexport class InvalidAddressError extends Error {\n  constructor(address) {\n    super(`Address (row = ${address.row}, col = ${address.col}) is invalid`);\n  }\n}\n/**\r\n * Error thrown when the given arguments are invalid\r\n */\nexport class InvalidArgumentsError extends Error {\n  constructor(expectedArguments) {\n    super(`Invalid arguments, expected ${expectedArguments}`);\n  }\n}\n/**\r\n * Error thrown when the given sheets are not equal.\r\n */\nexport class SheetsNotEqual extends Error {\n  constructor(sheet1, sheet2) {\n    super(`Sheets ${sheet1} and ${sheet2} are not equal.`);\n  }\n}\n/**\r\n * Error thrown when the given named expression already exists in the workbook and therefore it cannot be added.\r\n */\nexport class NamedExpressionNameIsAlreadyTakenError extends Error {\n  constructor(expressionName) {\n    super(`Name of Named Expression '${expressionName}' is already present`);\n  }\n}\n/**\r\n * Error thrown when the name given for the named expression is invalid.\r\n */\nexport class NamedExpressionNameIsInvalidError extends Error {\n  constructor(expressionName) {\n    super(`Name of Named Expression '${expressionName}' is invalid`);\n  }\n}\n/**\r\n * Error thrown when the given named expression does not exist.\r\n */\nexport class NamedExpressionDoesNotExistError extends Error {\n  constructor(expressionName) {\n    super(`Named Expression '${expressionName}' does not exist`);\n  }\n}\n/**\r\n * Error thrown when there are no operations to be undone by the [[undo]] method.\r\n */\nexport class NoOperationToUndoError extends Error {\n  constructor() {\n    super('There is no operation to undo');\n  }\n}\n/**\r\n * Error thrown when there are no operations to redo by the [[redo]] method.\r\n */\nexport class NoOperationToRedoError extends Error {\n  constructor() {\n    super('There is no operation to redo');\n  }\n}\n/**\r\n * Error thrown when there is nothing to paste by the [[paste]] method.\r\n */\nexport class NothingToPasteError extends Error {\n  constructor() {\n    super('There is nothing to paste');\n  }\n}\nfunction replacer(key, val) {\n  switch (typeof val) {\n    case 'function':\n    case 'symbol':\n      return val.toString();\n    case 'bigint':\n      return 'BigInt(' + val.toString() + ')';\n    default:\n      {\n        if (val instanceof RegExp) {\n          return 'RegExp(' + val.toString() + ')';\n        } else {\n          return val;\n        }\n      }\n  }\n}\n/**\r\n * Error thrown when the given value cannot be parsed.\r\n *\r\n * Checks against the validity in:\r\n *\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[setCellsContents]]\r\n */\nexport class UnableToParseError extends Error {\n  constructor(value) {\n    super(`Unable to parse value: ${JSON.stringify(value, replacer, 4)}`);\n  }\n}\n/**\r\n * Error thrown when the expected value type differs from the given value type.\r\n * It also displays the expected type.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ExpectedValueOfTypeError extends Error {\n  constructor(expectedType, paramName) {\n    super(`Expected value of type: ${expectedType} for config parameter: ${paramName}`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is an empty string.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueEmpty extends Error {\n  constructor(paramName) {\n    super(`Config parameter ${paramName} cannot be empty.`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is too small.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueTooSmallError extends Error {\n  constructor(paramName, minimum) {\n    super(`Config parameter ${paramName} should be at least ${minimum}`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is too big.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueTooBigError extends Error {\n  constructor(paramName, maximum) {\n    super(`Config parameter ${paramName} should be at most ${maximum}`);\n  }\n}\n/**\r\n * Error thrown when the value was expected to be set for a config parameter.\r\n * It also displays the expected value.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ExpectedOneOfValuesError extends Error {\n  constructor(values, paramName) {\n    super(`Expected one of ${values} for config parameter: ${paramName}`);\n  }\n}\n/**\r\n * Error thrown when computations become suspended.\r\n * To perform any other action wait for the batch to complete or resume the evaluation.\r\n * Relates to:\r\n *\r\n * @see [[batch]]\r\n * @see [[suspendEvaluation]]\r\n * @see [[resumeEvaluation]]\r\n */\nexport class EvaluationSuspendedError extends Error {\n  constructor() {\n    super('Computations are suspended');\n  }\n}\n/**\r\n * Error thrown when translation is missing in translation package.\r\n */\nexport class MissingTranslationError extends Error {\n  constructor(key) {\n    super(`Translation for ${key} is missing in the translation package you're using.`);\n  }\n}\n/**\r\n * Error thrown when trying to override protected translation.\r\n *\r\n * @see [[registerLanguage]]\r\n * @see [[registerFunction]]\r\n * @see [[registerFunctionPlugin]]\r\n */\nexport class ProtectedFunctionTranslationError extends Error {\n  constructor(key) {\n    super(`Cannot register translation for function with id: ${key}`);\n  }\n}\n/**\r\n * Error thrown when trying to retrieve not registered language\r\n *\r\n * @see [[getLanguage]]\r\n * @see [[unregisterLanguage]]\r\n */\nexport class LanguageNotRegisteredError extends Error {\n  constructor() {\n    super('Language not registered.');\n  }\n}\n/**\r\n * Error thrown when trying to register already registered language\r\n *\r\n * @see [[registerLanguage]]\r\n */\nexport class LanguageAlreadyRegisteredError extends Error {\n  constructor() {\n    super('Language already registered.');\n  }\n}\n/**\r\n * Error thrown when function plugin is invalid.\r\n *\r\n * @see [[registerFunction]]\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n */\nexport class FunctionPluginValidationError extends Error {\n  static functionNotDeclaredInPlugin(functionId, pluginName) {\n    return new FunctionPluginValidationError(`Function with id ${functionId} not declared in plugin ${pluginName}`);\n  }\n  static functionMethodNotFound(functionName, pluginName) {\n    return new FunctionPluginValidationError(`Function method ${functionName} not found in plugin ${pluginName}`);\n  }\n}\n/**\r\n * Error thrown when trying to register, override or remove function with reserved id.\r\n *\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[registerFunction]]\r\n * @see [[unregisterFunction]]\r\n */\nexport class ProtectedFunctionError extends Error {\n  static cannotRegisterFunctionWithId(functionId) {\n    return new ProtectedFunctionError(`Cannot register function with id ${functionId}`);\n  }\n  static cannotUnregisterFunctionWithId(functionId) {\n    return new ProtectedFunctionError(`Cannot unregister function with id ${functionId}`);\n  }\n  static cannotUnregisterProtectedPlugin() {\n    return new ProtectedFunctionError('Cannot unregister protected plugin');\n  }\n}\n/**\r\n * Error thrown when selected source location has an array.\r\n */\nexport class SourceLocationHasArrayError extends Error {\n  constructor() {\n    super('Cannot perform this operation, source location has an array inside.');\n  }\n}\n/**\r\n * Error thrown when selected target location has an array.\r\n *\r\n * @see [[addRows]]\r\n * @see [[addColumns]]\r\n * @see [[moveCells]]\r\n * @see [[moveRows]]\r\n * @see [[moveColumns]]\r\n * @see [[paste]]\r\n */\nexport class TargetLocationHasArrayError extends Error {\n  constructor() {\n    super('Cannot perform this operation, target location has an array inside.');\n  }\n}\n/**\r\n * Error thrown when named expression contains relative addresses.\r\n *\r\n * @see [[addNamedExpression]]\r\n * @see [[changeNamedExpression]]\r\n */\nexport class NoRelativeAddressesAllowedError extends Error {\n  constructor() {\n    super('Relative addresses not allowed in named expressions.');\n  }\n}\n/**\r\n * Error thrown when alias to a function is already defined.\r\n *\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[registerFunction]]\r\n */\nexport class AliasAlreadyExisting extends Error {\n  constructor(name, pluginName) {\n    super(`Alias id ${name} in plugin ${pluginName} already defined as a function or alias.`);\n  }\n}","map":{"version":3,"names":["NoSheetWithIdError","Error","constructor","sheetId","NoSheetWithNameError","sheetName","SheetNameAlreadyTakenError","SheetSizeLimitExceededError","NotAFormulaError","InvalidAddressError","address","row","col","InvalidArgumentsError","expectedArguments","SheetsNotEqual","sheet1","sheet2","NamedExpressionNameIsAlreadyTakenError","expressionName","NamedExpressionNameIsInvalidError","NamedExpressionDoesNotExistError","NoOperationToUndoError","NoOperationToRedoError","NothingToPasteError","replacer","key","val","toString","RegExp","UnableToParseError","value","JSON","stringify","ExpectedValueOfTypeError","expectedType","paramName","ConfigValueEmpty","ConfigValueTooSmallError","minimum","ConfigValueTooBigError","maximum","ExpectedOneOfValuesError","values","EvaluationSuspendedError","MissingTranslationError","ProtectedFunctionTranslationError","LanguageNotRegisteredError","LanguageAlreadyRegisteredError","FunctionPluginValidationError","functionNotDeclaredInPlugin","functionId","pluginName","functionMethodNotFound","functionName","ProtectedFunctionError","cannotRegisterFunctionWithId","cannotUnregisterFunctionWithId","cannotUnregisterProtectedPlugin","SourceLocationHasArrayError","TargetLocationHasArrayError","NoRelativeAddressesAllowedError","AliasAlreadyExisting","name"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/errors.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\n/**\r\n * Error thrown when the sheet of a given ID does not exist.\r\n */\nexport class NoSheetWithIdError extends Error {\n  constructor(sheetId) {\n    super(`There's no sheet with id = ${sheetId}`);\n  }\n}\n/**\r\n * Error thrown when the sheet of a given name does not exist.\r\n */\nexport class NoSheetWithNameError extends Error {\n  constructor(sheetName) {\n    super(`There's no sheet with name '${sheetName}'`);\n  }\n}\n/**\r\n * Error thrown when the sheet of a given name already exists.\r\n */\nexport class SheetNameAlreadyTakenError extends Error {\n  constructor(sheetName) {\n    super(`Sheet with name ${sheetName} already exists`);\n  }\n}\n/**\r\n * Error thrown when loaded sheet size exceeds configured limits.\r\n */\nexport class SheetSizeLimitExceededError extends Error {\n  constructor() {\n    super('Sheet size limit exceeded');\n  }\n}\n/**\r\n * Error thrown when the the provided string is not a valid formula, i.e does not start with \"=\"\r\n */\nexport class NotAFormulaError extends Error {\n  constructor() {\n    super('This is not a formula');\n  }\n}\n/**\r\n * Error thrown when the given address is invalid.\r\n */\nexport class InvalidAddressError extends Error {\n  constructor(address) {\n    super(`Address (row = ${address.row}, col = ${address.col}) is invalid`);\n  }\n}\n/**\r\n * Error thrown when the given arguments are invalid\r\n */\nexport class InvalidArgumentsError extends Error {\n  constructor(expectedArguments) {\n    super(`Invalid arguments, expected ${expectedArguments}`);\n  }\n}\n/**\r\n * Error thrown when the given sheets are not equal.\r\n */\nexport class SheetsNotEqual extends Error {\n  constructor(sheet1, sheet2) {\n    super(`Sheets ${sheet1} and ${sheet2} are not equal.`);\n  }\n}\n/**\r\n * Error thrown when the given named expression already exists in the workbook and therefore it cannot be added.\r\n */\nexport class NamedExpressionNameIsAlreadyTakenError extends Error {\n  constructor(expressionName) {\n    super(`Name of Named Expression '${expressionName}' is already present`);\n  }\n}\n/**\r\n * Error thrown when the name given for the named expression is invalid.\r\n */\nexport class NamedExpressionNameIsInvalidError extends Error {\n  constructor(expressionName) {\n    super(`Name of Named Expression '${expressionName}' is invalid`);\n  }\n}\n/**\r\n * Error thrown when the given named expression does not exist.\r\n */\nexport class NamedExpressionDoesNotExistError extends Error {\n  constructor(expressionName) {\n    super(`Named Expression '${expressionName}' does not exist`);\n  }\n}\n/**\r\n * Error thrown when there are no operations to be undone by the [[undo]] method.\r\n */\nexport class NoOperationToUndoError extends Error {\n  constructor() {\n    super('There is no operation to undo');\n  }\n}\n/**\r\n * Error thrown when there are no operations to redo by the [[redo]] method.\r\n */\nexport class NoOperationToRedoError extends Error {\n  constructor() {\n    super('There is no operation to redo');\n  }\n}\n/**\r\n * Error thrown when there is nothing to paste by the [[paste]] method.\r\n */\nexport class NothingToPasteError extends Error {\n  constructor() {\n    super('There is nothing to paste');\n  }\n}\nfunction replacer(key, val) {\n  switch (typeof val) {\n    case 'function':\n    case 'symbol':\n      return val.toString();\n    case 'bigint':\n      return 'BigInt(' + val.toString() + ')';\n    default:\n      {\n        if (val instanceof RegExp) {\n          return 'RegExp(' + val.toString() + ')';\n        } else {\n          return val;\n        }\n      }\n  }\n}\n/**\r\n * Error thrown when the given value cannot be parsed.\r\n *\r\n * Checks against the validity in:\r\n *\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[setCellsContents]]\r\n */\nexport class UnableToParseError extends Error {\n  constructor(value) {\n    super(`Unable to parse value: ${JSON.stringify(value, replacer, 4)}`);\n  }\n}\n/**\r\n * Error thrown when the expected value type differs from the given value type.\r\n * It also displays the expected type.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ExpectedValueOfTypeError extends Error {\n  constructor(expectedType, paramName) {\n    super(`Expected value of type: ${expectedType} for config parameter: ${paramName}`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is an empty string.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueEmpty extends Error {\n  constructor(paramName) {\n    super(`Config parameter ${paramName} cannot be empty.`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is too small.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueTooSmallError extends Error {\n  constructor(paramName, minimum) {\n    super(`Config parameter ${paramName} should be at least ${minimum}`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is too big.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueTooBigError extends Error {\n  constructor(paramName, maximum) {\n    super(`Config parameter ${paramName} should be at most ${maximum}`);\n  }\n}\n/**\r\n * Error thrown when the value was expected to be set for a config parameter.\r\n * It also displays the expected value.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ExpectedOneOfValuesError extends Error {\n  constructor(values, paramName) {\n    super(`Expected one of ${values} for config parameter: ${paramName}`);\n  }\n}\n/**\r\n * Error thrown when computations become suspended.\r\n * To perform any other action wait for the batch to complete or resume the evaluation.\r\n * Relates to:\r\n *\r\n * @see [[batch]]\r\n * @see [[suspendEvaluation]]\r\n * @see [[resumeEvaluation]]\r\n */\nexport class EvaluationSuspendedError extends Error {\n  constructor() {\n    super('Computations are suspended');\n  }\n}\n/**\r\n * Error thrown when translation is missing in translation package.\r\n */\nexport class MissingTranslationError extends Error {\n  constructor(key) {\n    super(`Translation for ${key} is missing in the translation package you're using.`);\n  }\n}\n/**\r\n * Error thrown when trying to override protected translation.\r\n *\r\n * @see [[registerLanguage]]\r\n * @see [[registerFunction]]\r\n * @see [[registerFunctionPlugin]]\r\n */\nexport class ProtectedFunctionTranslationError extends Error {\n  constructor(key) {\n    super(`Cannot register translation for function with id: ${key}`);\n  }\n}\n/**\r\n * Error thrown when trying to retrieve not registered language\r\n *\r\n * @see [[getLanguage]]\r\n * @see [[unregisterLanguage]]\r\n */\nexport class LanguageNotRegisteredError extends Error {\n  constructor() {\n    super('Language not registered.');\n  }\n}\n/**\r\n * Error thrown when trying to register already registered language\r\n *\r\n * @see [[registerLanguage]]\r\n */\nexport class LanguageAlreadyRegisteredError extends Error {\n  constructor() {\n    super('Language already registered.');\n  }\n}\n/**\r\n * Error thrown when function plugin is invalid.\r\n *\r\n * @see [[registerFunction]]\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n */\nexport class FunctionPluginValidationError extends Error {\n  static functionNotDeclaredInPlugin(functionId, pluginName) {\n    return new FunctionPluginValidationError(`Function with id ${functionId} not declared in plugin ${pluginName}`);\n  }\n  static functionMethodNotFound(functionName, pluginName) {\n    return new FunctionPluginValidationError(`Function method ${functionName} not found in plugin ${pluginName}`);\n  }\n}\n/**\r\n * Error thrown when trying to register, override or remove function with reserved id.\r\n *\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[registerFunction]]\r\n * @see [[unregisterFunction]]\r\n */\nexport class ProtectedFunctionError extends Error {\n  static cannotRegisterFunctionWithId(functionId) {\n    return new ProtectedFunctionError(`Cannot register function with id ${functionId}`);\n  }\n  static cannotUnregisterFunctionWithId(functionId) {\n    return new ProtectedFunctionError(`Cannot unregister function with id ${functionId}`);\n  }\n  static cannotUnregisterProtectedPlugin() {\n    return new ProtectedFunctionError('Cannot unregister protected plugin');\n  }\n}\n/**\r\n * Error thrown when selected source location has an array.\r\n */\nexport class SourceLocationHasArrayError extends Error {\n  constructor() {\n    super('Cannot perform this operation, source location has an array inside.');\n  }\n}\n/**\r\n * Error thrown when selected target location has an array.\r\n *\r\n * @see [[addRows]]\r\n * @see [[addColumns]]\r\n * @see [[moveCells]]\r\n * @see [[moveRows]]\r\n * @see [[moveColumns]]\r\n * @see [[paste]]\r\n */\nexport class TargetLocationHasArrayError extends Error {\n  constructor() {\n    super('Cannot perform this operation, target location has an array inside.');\n  }\n}\n/**\r\n * Error thrown when named expression contains relative addresses.\r\n *\r\n * @see [[addNamedExpression]]\r\n * @see [[changeNamedExpression]]\r\n */\nexport class NoRelativeAddressesAllowedError extends Error {\n  constructor() {\n    super('Relative addresses not allowed in named expressions.');\n  }\n}\n/**\r\n * Error thrown when alias to a function is already defined.\r\n *\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[registerFunction]]\r\n */\nexport class AliasAlreadyExisting extends Error {\n  constructor(name, pluginName) {\n    super(`Alias id ${name} in plugin ${pluginName} already defined as a function or alias.`);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}