{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CombinedTransformer } from \"./dependencyTransformers/CombinedTransformer.mjs\";\nimport { StatType } from \"./statistics/index.mjs\";\nexport class LazilyTransformingAstService {\n  constructor(stats) {\n    this.stats = stats;\n    this.transformations = [];\n  }\n  version() {\n    return this.transformations.length;\n  }\n  addTransformation(transformation) {\n    if (this.combinedTransformer !== undefined) {\n      this.combinedTransformer.add(transformation);\n    } else {\n      this.transformations.push(transformation);\n    }\n    return this.version();\n  }\n  beginCombinedMode(sheet) {\n    this.combinedTransformer = new CombinedTransformer(sheet);\n  }\n  commitCombinedMode() {\n    if (this.combinedTransformer === undefined) {\n      throw Error('Combined mode wasn\\'t started');\n    }\n    this.transformations.push(this.combinedTransformer);\n    this.combinedTransformer = undefined;\n    return this.version();\n  }\n  applyTransformations(ast, address, version) {\n    this.stats.start(StatType.TRANSFORM_ASTS_POSTPONED);\n    for (let v = version; v < this.transformations.length; v++) {\n      const transformation = this.transformations[v];\n      if (transformation.isIrreversible()) {\n        this.undoRedo.storeDataForVersion(v, address, this.parser.computeHashFromAst(ast));\n        this.parser.rememberNewAst(ast);\n      }\n      const [newAst, newAddress] = transformation.transformSingleAst(ast, address);\n      ast = newAst;\n      address = newAddress;\n    }\n    const cachedAst = this.parser.rememberNewAst(ast);\n    this.stats.end(StatType.TRANSFORM_ASTS_POSTPONED);\n    return [cachedAst, address, this.transformations.length];\n  }\n  *getTransformationsFrom(version, filter) {\n    for (let v = version; v < this.transformations.length; v++) {\n      const transformation = this.transformations[v];\n      if (!filter || filter(transformation)) {\n        yield transformation;\n      }\n    }\n  }\n}","map":{"version":3,"names":["CombinedTransformer","StatType","LazilyTransformingAstService","constructor","stats","transformations","version","length","addTransformation","transformation","combinedTransformer","undefined","add","push","beginCombinedMode","sheet","commitCombinedMode","Error","applyTransformations","ast","address","start","TRANSFORM_ASTS_POSTPONED","v","isIrreversible","undoRedo","storeDataForVersion","parser","computeHashFromAst","rememberNewAst","newAst","newAddress","transformSingleAst","cachedAst","end","getTransformationsFrom","filter"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/LazilyTransformingAstService.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CombinedTransformer } from \"./dependencyTransformers/CombinedTransformer.mjs\";\nimport { StatType } from \"./statistics/index.mjs\";\nexport class LazilyTransformingAstService {\n  constructor(stats) {\n    this.stats = stats;\n    this.transformations = [];\n  }\n  version() {\n    return this.transformations.length;\n  }\n  addTransformation(transformation) {\n    if (this.combinedTransformer !== undefined) {\n      this.combinedTransformer.add(transformation);\n    } else {\n      this.transformations.push(transformation);\n    }\n    return this.version();\n  }\n  beginCombinedMode(sheet) {\n    this.combinedTransformer = new CombinedTransformer(sheet);\n  }\n  commitCombinedMode() {\n    if (this.combinedTransformer === undefined) {\n      throw Error('Combined mode wasn\\'t started');\n    }\n    this.transformations.push(this.combinedTransformer);\n    this.combinedTransformer = undefined;\n    return this.version();\n  }\n  applyTransformations(ast, address, version) {\n    this.stats.start(StatType.TRANSFORM_ASTS_POSTPONED);\n    for (let v = version; v < this.transformations.length; v++) {\n      const transformation = this.transformations[v];\n      if (transformation.isIrreversible()) {\n        this.undoRedo.storeDataForVersion(v, address, this.parser.computeHashFromAst(ast));\n        this.parser.rememberNewAst(ast);\n      }\n      const [newAst, newAddress] = transformation.transformSingleAst(ast, address);\n      ast = newAst;\n      address = newAddress;\n    }\n    const cachedAst = this.parser.rememberNewAst(ast);\n    this.stats.end(StatType.TRANSFORM_ASTS_POSTPONED);\n    return [cachedAst, address, this.transformations.length];\n  }\n  *getTransformationsFrom(version, filter) {\n    for (let v = version; v < this.transformations.length; v++) {\n      const transformation = this.transformations[v];\n      if (!filter || filter(transformation)) {\n        yield transformation;\n      }\n    }\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,kDAAkD;AACtF,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,OAAO,MAAMC,4BAA4B,CAAC;EACxCC,WAAWA,CAACC,KAAK,EAAE;IACjB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,eAAe,GAAG,EAAE;EAC3B;EACAC,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACD,eAAe,CAACE,MAAM;EACpC;EACAC,iBAAiBA,CAACC,cAAc,EAAE;IAChC,IAAI,IAAI,CAACC,mBAAmB,KAAKC,SAAS,EAAE;MAC1C,IAAI,CAACD,mBAAmB,CAACE,GAAG,CAACH,cAAc,CAAC;IAC9C,CAAC,MAAM;MACL,IAAI,CAACJ,eAAe,CAACQ,IAAI,CAACJ,cAAc,CAAC;IAC3C;IACA,OAAO,IAAI,CAACH,OAAO,CAAC,CAAC;EACvB;EACAQ,iBAAiBA,CAACC,KAAK,EAAE;IACvB,IAAI,CAACL,mBAAmB,GAAG,IAAIV,mBAAmB,CAACe,KAAK,CAAC;EAC3D;EACAC,kBAAkBA,CAAA,EAAG;IACnB,IAAI,IAAI,CAACN,mBAAmB,KAAKC,SAAS,EAAE;MAC1C,MAAMM,KAAK,CAAC,+BAA+B,CAAC;IAC9C;IACA,IAAI,CAACZ,eAAe,CAACQ,IAAI,CAAC,IAAI,CAACH,mBAAmB,CAAC;IACnD,IAAI,CAACA,mBAAmB,GAAGC,SAAS;IACpC,OAAO,IAAI,CAACL,OAAO,CAAC,CAAC;EACvB;EACAY,oBAAoBA,CAACC,GAAG,EAAEC,OAAO,EAAEd,OAAO,EAAE;IAC1C,IAAI,CAACF,KAAK,CAACiB,KAAK,CAACpB,QAAQ,CAACqB,wBAAwB,CAAC;IACnD,KAAK,IAAIC,CAAC,GAAGjB,OAAO,EAAEiB,CAAC,GAAG,IAAI,CAAClB,eAAe,CAACE,MAAM,EAAEgB,CAAC,EAAE,EAAE;MAC1D,MAAMd,cAAc,GAAG,IAAI,CAACJ,eAAe,CAACkB,CAAC,CAAC;MAC9C,IAAId,cAAc,CAACe,cAAc,CAAC,CAAC,EAAE;QACnC,IAAI,CAACC,QAAQ,CAACC,mBAAmB,CAACH,CAAC,EAAEH,OAAO,EAAE,IAAI,CAACO,MAAM,CAACC,kBAAkB,CAACT,GAAG,CAAC,CAAC;QAClF,IAAI,CAACQ,MAAM,CAACE,cAAc,CAACV,GAAG,CAAC;MACjC;MACA,MAAM,CAACW,MAAM,EAAEC,UAAU,CAAC,GAAGtB,cAAc,CAACuB,kBAAkB,CAACb,GAAG,EAAEC,OAAO,CAAC;MAC5ED,GAAG,GAAGW,MAAM;MACZV,OAAO,GAAGW,UAAU;IACtB;IACA,MAAME,SAAS,GAAG,IAAI,CAACN,MAAM,CAACE,cAAc,CAACV,GAAG,CAAC;IACjD,IAAI,CAACf,KAAK,CAAC8B,GAAG,CAACjC,QAAQ,CAACqB,wBAAwB,CAAC;IACjD,OAAO,CAACW,SAAS,EAAEb,OAAO,EAAE,IAAI,CAACf,eAAe,CAACE,MAAM,CAAC;EAC1D;EACA,CAAC4B,sBAAsBA,CAAC7B,OAAO,EAAE8B,MAAM,EAAE;IACvC,KAAK,IAAIb,CAAC,GAAGjB,OAAO,EAAEiB,CAAC,GAAG,IAAI,CAAClB,eAAe,CAACE,MAAM,EAAEgB,CAAC,EAAE,EAAE;MAC1D,MAAMd,cAAc,GAAG,IAAI,CAACJ,eAAe,CAACkB,CAAC,CAAC;MAC9C,IAAI,CAACa,MAAM,IAAIA,MAAM,CAAC3B,cAAc,CAAC,EAAE;QACrC,MAAMA,cAAc;MACtB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}