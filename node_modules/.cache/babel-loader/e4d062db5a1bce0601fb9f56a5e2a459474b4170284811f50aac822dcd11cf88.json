{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { configCheckIfParametersNotInConflict, configValueFromParam, configValueFromParamCheck, validateNumberToBeAtLeast, validateNumberToBeAtMost } from \"./ArgumentSanitization.mjs\";\nimport { defaultParseToDateTime } from \"./DateTimeDefault.mjs\";\nimport { instanceOfSimpleDate } from \"./DateTimeHelper.mjs\";\nimport { AlwaysDense } from \"./DependencyGraph/AddressMapping/ChooseAddressMappingPolicy.mjs\";\nimport { ConfigValueEmpty, ExpectedValueOfTypeError } from \"./errors.mjs\";\nimport { defaultStringifyDateTime, defaultStringifyDuration } from \"./format/format.mjs\";\nimport { checkLicenseKeyValidity } from \"./helpers/licenseKeyValidator.mjs\";\nimport { HyperFormula } from \"./HyperFormula.mjs\";\nconst privatePool = new WeakMap();\nexport class Config {\n  constructor(options = {}, showDeprecatedWarns = true) {\n    const {\n      accentSensitive,\n      caseSensitive,\n      caseFirst,\n      chooseAddressMappingPolicy,\n      context,\n      currencySymbol,\n      dateFormats,\n      decimalSeparator,\n      evaluateNullToZero,\n      functionArgSeparator,\n      functionPlugins,\n      ignorePunctuation,\n      leapYear1900,\n      localeLang,\n      language,\n      ignoreWhiteSpace,\n      licenseKey,\n      matchWholeCell,\n      arrayColumnSeparator,\n      arrayRowSeparator,\n      maxRows,\n      maxColumns,\n      nullYear,\n      nullDate,\n      parseDateTime,\n      precisionEpsilon,\n      precisionRounding,\n      stringifyDateTime,\n      stringifyDuration,\n      smartRounding,\n      timeFormats,\n      thousandSeparator,\n      useArrayArithmetic,\n      useStats,\n      undoLimit,\n      useColumnIndex,\n      useRegularExpressions,\n      useWildcards\n    } = options;\n    if (showDeprecatedWarns) {\n      Config.warnDeprecatedOptions(options);\n    }\n    this.useArrayArithmetic = configValueFromParam(useArrayArithmetic, 'boolean', 'useArrayArithmetic');\n    this.accentSensitive = configValueFromParam(accentSensitive, 'boolean', 'accentSensitive');\n    this.caseSensitive = configValueFromParam(caseSensitive, 'boolean', 'caseSensitive');\n    this.caseFirst = configValueFromParam(caseFirst, ['upper', 'lower', 'false'], 'caseFirst');\n    this.ignorePunctuation = configValueFromParam(ignorePunctuation, 'boolean', 'ignorePunctuation');\n    this.chooseAddressMappingPolicy = chooseAddressMappingPolicy !== null && chooseAddressMappingPolicy !== void 0 ? chooseAddressMappingPolicy : Config.defaultConfig.chooseAddressMappingPolicy;\n    this.dateFormats = [...configValueFromParamCheck(dateFormats, Array.isArray, 'array', 'dateFormats')];\n    this.timeFormats = [...configValueFromParamCheck(timeFormats, Array.isArray, 'array', 'timeFormats')];\n    this.functionArgSeparator = configValueFromParam(functionArgSeparator, 'string', 'functionArgSeparator');\n    this.decimalSeparator = configValueFromParam(decimalSeparator, ['.', ','], 'decimalSeparator');\n    this.language = configValueFromParam(language, 'string', 'language');\n    this.ignoreWhiteSpace = configValueFromParam(ignoreWhiteSpace, ['standard', 'any'], 'ignoreWhiteSpace');\n    this.licenseKey = configValueFromParam(licenseKey, 'string', 'licenseKey');\n    this.thousandSeparator = configValueFromParam(thousandSeparator, ['', ',', ' ', '.'], 'thousandSeparator');\n    this.arrayColumnSeparator = configValueFromParam(arrayColumnSeparator, [',', ';'], 'arrayColumnSeparator');\n    this.arrayRowSeparator = configValueFromParam(arrayRowSeparator, [';', '|'], 'arrayRowSeparator');\n    this.localeLang = configValueFromParam(localeLang, 'string', 'localeLang');\n    this.functionPlugins = [...(functionPlugins !== null && functionPlugins !== void 0 ? functionPlugins : Config.defaultConfig.functionPlugins)];\n    this.smartRounding = configValueFromParam(smartRounding, 'boolean', 'smartRounding');\n    this.evaluateNullToZero = configValueFromParam(evaluateNullToZero, 'boolean', 'evaluateNullToZero');\n    this.nullYear = configValueFromParam(nullYear, 'number', 'nullYear');\n    validateNumberToBeAtLeast(this.nullYear, 'nullYear', 0);\n    validateNumberToBeAtMost(this.nullYear, 'nullYear', 100);\n    this.precisionRounding = configValueFromParam(precisionRounding, 'number', 'precisionRounding');\n    validateNumberToBeAtLeast(this.precisionRounding, 'precisionRounding', 0);\n    this.precisionEpsilon = configValueFromParam(precisionEpsilon, 'number', 'precisionEpsilon');\n    validateNumberToBeAtLeast(this.precisionEpsilon, 'precisionEpsilon', 0);\n    this.useColumnIndex = configValueFromParam(useColumnIndex, 'boolean', 'useColumnIndex');\n    this.useStats = configValueFromParam(useStats, 'boolean', 'useStats');\n    this.parseDateTime = configValueFromParam(parseDateTime, 'function', 'parseDateTime');\n    this.stringifyDateTime = configValueFromParam(stringifyDateTime, 'function', 'stringifyDateTime');\n    this.stringifyDuration = configValueFromParam(stringifyDuration, 'function', 'stringifyDuration');\n    this.translationPackage = HyperFormula.getLanguage(this.language);\n    this.errorMapping = this.translationPackage.buildErrorMapping();\n    this.nullDate = configValueFromParamCheck(nullDate, instanceOfSimpleDate, 'IDate', 'nullDate');\n    this.leapYear1900 = configValueFromParam(leapYear1900, 'boolean', 'leapYear1900');\n    this.undoLimit = configValueFromParam(undoLimit, 'number', 'undoLimit');\n    this.useRegularExpressions = configValueFromParam(useRegularExpressions, 'boolean', 'useRegularExpressions');\n    this.useWildcards = configValueFromParam(useWildcards, 'boolean', 'useWildcards');\n    this.matchWholeCell = configValueFromParam(matchWholeCell, 'boolean', 'matchWholeCell');\n    validateNumberToBeAtLeast(this.undoLimit, 'undoLimit', 0);\n    this.maxRows = configValueFromParam(maxRows, 'number', 'maxRows');\n    validateNumberToBeAtLeast(this.maxRows, 'maxRows', 1);\n    this.maxColumns = configValueFromParam(maxColumns, 'number', 'maxColumns');\n    this.currencySymbol = this.setupCurrencySymbol(currencySymbol);\n    validateNumberToBeAtLeast(this.maxColumns, 'maxColumns', 1);\n    this.context = context;\n    privatePool.set(this, {\n      licenseKeyValidityState: checkLicenseKeyValidity(this.licenseKey)\n    });\n    configCheckIfParametersNotInConflict({\n      value: this.decimalSeparator,\n      name: 'decimalSeparator'\n    }, {\n      value: this.functionArgSeparator,\n      name: 'functionArgSeparator'\n    }, {\n      value: this.thousandSeparator,\n      name: 'thousandSeparator'\n    });\n    configCheckIfParametersNotInConflict({\n      value: this.arrayRowSeparator,\n      name: 'arrayRowSeparator'\n    }, {\n      value: this.arrayColumnSeparator,\n      name: 'arrayColumnSeparator'\n    });\n  }\n  setupCurrencySymbol(currencySymbol) {\n    const valueAfterCheck = [...configValueFromParamCheck(currencySymbol, Array.isArray, 'array', 'currencySymbol')];\n    valueAfterCheck.forEach(val => {\n      if (typeof val !== 'string') {\n        throw new ExpectedValueOfTypeError('string[]', 'currencySymbol');\n      }\n      if (val === '') {\n        throw new ConfigValueEmpty('currencySymbol');\n      }\n    });\n    return valueAfterCheck;\n  }\n  /**\r\n   * Proxied property to its private counterpart. This makes the property\r\n   * as accessible as the other Config options but without ability to change the value.\r\n   *\r\n   * @internal\r\n   */\n  get licenseKeyValidityState() {\n    return privatePool.get(this).licenseKeyValidityState;\n  }\n  getConfig() {\n    return getFullConfigFromPartial(this);\n  }\n  mergeConfig(init) {\n    const mergedConfig = Object.assign({}, this.getConfig(), init);\n    Config.warnDeprecatedOptions(init);\n    return new Config(mergedConfig, false);\n  }\n  static warnDeprecatedOptions(options) {\n    // an example of deprecation warning\n    // Config.warnDeprecatedIfUsed(options.binarySearchThreshold, 'binarySearchThreshold', '1.1')\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static warnDeprecatedIfUsed(inputValue, paramName, fromVersion, replacementName) {\n    if (inputValue !== undefined) {\n      if (replacementName === undefined) {\n        console.warn(`${paramName} option is deprecated since ${fromVersion}`);\n      } else {\n        console.warn(`${paramName} option is deprecated since ${fromVersion}, please use ${replacementName}`);\n      }\n    }\n  }\n}\nConfig.defaultConfig = {\n  accentSensitive: false,\n  currencySymbol: ['$'],\n  caseSensitive: false,\n  caseFirst: 'lower',\n  context: undefined,\n  chooseAddressMappingPolicy: new AlwaysDense(),\n  dateFormats: ['DD/MM/YYYY', 'DD/MM/YY'],\n  decimalSeparator: '.',\n  evaluateNullToZero: false,\n  functionArgSeparator: ',',\n  functionPlugins: [],\n  ignorePunctuation: false,\n  language: 'enGB',\n  ignoreWhiteSpace: 'standard',\n  licenseKey: '',\n  leapYear1900: false,\n  localeLang: 'en',\n  matchWholeCell: true,\n  arrayColumnSeparator: ',',\n  arrayRowSeparator: ';',\n  maxRows: 40000,\n  maxColumns: 18278,\n  nullYear: 30,\n  nullDate: {\n    year: 1899,\n    month: 12,\n    day: 30\n  },\n  parseDateTime: defaultParseToDateTime,\n  precisionEpsilon: 1e-13,\n  precisionRounding: 10,\n  smartRounding: true,\n  stringifyDateTime: defaultStringifyDateTime,\n  stringifyDuration: defaultStringifyDuration,\n  timeFormats: ['hh:mm', 'hh:mm:ss.sss'],\n  thousandSeparator: '',\n  undoLimit: 20,\n  useRegularExpressions: false,\n  useWildcards: true,\n  useColumnIndex: false,\n  useStats: false,\n  useArrayArithmetic: false\n};\nfunction getFullConfigFromPartial(partialConfig) {\n  var _a;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const ret = {};\n  for (const key in Config.defaultConfig) {\n    const val = (_a = partialConfig[key]) !== null && _a !== void 0 ? _a : Config.defaultConfig[key];\n    if (Array.isArray(val)) {\n      ret[key] = [...val];\n    } else {\n      ret[key] = val;\n    }\n  }\n  return ret;\n}\nexport function getDefaultConfig() {\n  return getFullConfigFromPartial({});\n}","map":{"version":3,"names":["configCheckIfParametersNotInConflict","configValueFromParam","configValueFromParamCheck","validateNumberToBeAtLeast","validateNumberToBeAtMost","defaultParseToDateTime","instanceOfSimpleDate","AlwaysDense","ConfigValueEmpty","ExpectedValueOfTypeError","defaultStringifyDateTime","defaultStringifyDuration","checkLicenseKeyValidity","HyperFormula","privatePool","WeakMap","Config","constructor","options","showDeprecatedWarns","accentSensitive","caseSensitive","caseFirst","chooseAddressMappingPolicy","context","currencySymbol","dateFormats","decimalSeparator","evaluateNullToZero","functionArgSeparator","functionPlugins","ignorePunctuation","leapYear1900","localeLang","language","ignoreWhiteSpace","licenseKey","matchWholeCell","arrayColumnSeparator","arrayRowSeparator","maxRows","maxColumns","nullYear","nullDate","parseDateTime","precisionEpsilon","precisionRounding","stringifyDateTime","stringifyDuration","smartRounding","timeFormats","thousandSeparator","useArrayArithmetic","useStats","undoLimit","useColumnIndex","useRegularExpressions","useWildcards","warnDeprecatedOptions","defaultConfig","Array","isArray","translationPackage","getLanguage","errorMapping","buildErrorMapping","setupCurrencySymbol","set","licenseKeyValidityState","value","name","valueAfterCheck","forEach","val","get","getConfig","getFullConfigFromPartial","mergeConfig","init","mergedConfig","Object","assign","warnDeprecatedIfUsed","inputValue","paramName","fromVersion","replacementName","undefined","console","warn","year","month","day","partialConfig","_a","ret","key","getDefaultConfig"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/Config.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { configCheckIfParametersNotInConflict, configValueFromParam, configValueFromParamCheck, validateNumberToBeAtLeast, validateNumberToBeAtMost } from \"./ArgumentSanitization.mjs\";\nimport { defaultParseToDateTime } from \"./DateTimeDefault.mjs\";\nimport { instanceOfSimpleDate } from \"./DateTimeHelper.mjs\";\nimport { AlwaysDense } from \"./DependencyGraph/AddressMapping/ChooseAddressMappingPolicy.mjs\";\nimport { ConfigValueEmpty, ExpectedValueOfTypeError } from \"./errors.mjs\";\nimport { defaultStringifyDateTime, defaultStringifyDuration } from \"./format/format.mjs\";\nimport { checkLicenseKeyValidity } from \"./helpers/licenseKeyValidator.mjs\";\nimport { HyperFormula } from \"./HyperFormula.mjs\";\nconst privatePool = new WeakMap();\nexport class Config {\n  constructor(options = {}, showDeprecatedWarns = true) {\n    const {\n      accentSensitive,\n      caseSensitive,\n      caseFirst,\n      chooseAddressMappingPolicy,\n      context,\n      currencySymbol,\n      dateFormats,\n      decimalSeparator,\n      evaluateNullToZero,\n      functionArgSeparator,\n      functionPlugins,\n      ignorePunctuation,\n      leapYear1900,\n      localeLang,\n      language,\n      ignoreWhiteSpace,\n      licenseKey,\n      matchWholeCell,\n      arrayColumnSeparator,\n      arrayRowSeparator,\n      maxRows,\n      maxColumns,\n      nullYear,\n      nullDate,\n      parseDateTime,\n      precisionEpsilon,\n      precisionRounding,\n      stringifyDateTime,\n      stringifyDuration,\n      smartRounding,\n      timeFormats,\n      thousandSeparator,\n      useArrayArithmetic,\n      useStats,\n      undoLimit,\n      useColumnIndex,\n      useRegularExpressions,\n      useWildcards\n    } = options;\n    if (showDeprecatedWarns) {\n      Config.warnDeprecatedOptions(options);\n    }\n    this.useArrayArithmetic = configValueFromParam(useArrayArithmetic, 'boolean', 'useArrayArithmetic');\n    this.accentSensitive = configValueFromParam(accentSensitive, 'boolean', 'accentSensitive');\n    this.caseSensitive = configValueFromParam(caseSensitive, 'boolean', 'caseSensitive');\n    this.caseFirst = configValueFromParam(caseFirst, ['upper', 'lower', 'false'], 'caseFirst');\n    this.ignorePunctuation = configValueFromParam(ignorePunctuation, 'boolean', 'ignorePunctuation');\n    this.chooseAddressMappingPolicy = chooseAddressMappingPolicy !== null && chooseAddressMappingPolicy !== void 0 ? chooseAddressMappingPolicy : Config.defaultConfig.chooseAddressMappingPolicy;\n    this.dateFormats = [...configValueFromParamCheck(dateFormats, Array.isArray, 'array', 'dateFormats')];\n    this.timeFormats = [...configValueFromParamCheck(timeFormats, Array.isArray, 'array', 'timeFormats')];\n    this.functionArgSeparator = configValueFromParam(functionArgSeparator, 'string', 'functionArgSeparator');\n    this.decimalSeparator = configValueFromParam(decimalSeparator, ['.', ','], 'decimalSeparator');\n    this.language = configValueFromParam(language, 'string', 'language');\n    this.ignoreWhiteSpace = configValueFromParam(ignoreWhiteSpace, ['standard', 'any'], 'ignoreWhiteSpace');\n    this.licenseKey = configValueFromParam(licenseKey, 'string', 'licenseKey');\n    this.thousandSeparator = configValueFromParam(thousandSeparator, ['', ',', ' ', '.'], 'thousandSeparator');\n    this.arrayColumnSeparator = configValueFromParam(arrayColumnSeparator, [',', ';'], 'arrayColumnSeparator');\n    this.arrayRowSeparator = configValueFromParam(arrayRowSeparator, [';', '|'], 'arrayRowSeparator');\n    this.localeLang = configValueFromParam(localeLang, 'string', 'localeLang');\n    this.functionPlugins = [...(functionPlugins !== null && functionPlugins !== void 0 ? functionPlugins : Config.defaultConfig.functionPlugins)];\n    this.smartRounding = configValueFromParam(smartRounding, 'boolean', 'smartRounding');\n    this.evaluateNullToZero = configValueFromParam(evaluateNullToZero, 'boolean', 'evaluateNullToZero');\n    this.nullYear = configValueFromParam(nullYear, 'number', 'nullYear');\n    validateNumberToBeAtLeast(this.nullYear, 'nullYear', 0);\n    validateNumberToBeAtMost(this.nullYear, 'nullYear', 100);\n    this.precisionRounding = configValueFromParam(precisionRounding, 'number', 'precisionRounding');\n    validateNumberToBeAtLeast(this.precisionRounding, 'precisionRounding', 0);\n    this.precisionEpsilon = configValueFromParam(precisionEpsilon, 'number', 'precisionEpsilon');\n    validateNumberToBeAtLeast(this.precisionEpsilon, 'precisionEpsilon', 0);\n    this.useColumnIndex = configValueFromParam(useColumnIndex, 'boolean', 'useColumnIndex');\n    this.useStats = configValueFromParam(useStats, 'boolean', 'useStats');\n    this.parseDateTime = configValueFromParam(parseDateTime, 'function', 'parseDateTime');\n    this.stringifyDateTime = configValueFromParam(stringifyDateTime, 'function', 'stringifyDateTime');\n    this.stringifyDuration = configValueFromParam(stringifyDuration, 'function', 'stringifyDuration');\n    this.translationPackage = HyperFormula.getLanguage(this.language);\n    this.errorMapping = this.translationPackage.buildErrorMapping();\n    this.nullDate = configValueFromParamCheck(nullDate, instanceOfSimpleDate, 'IDate', 'nullDate');\n    this.leapYear1900 = configValueFromParam(leapYear1900, 'boolean', 'leapYear1900');\n    this.undoLimit = configValueFromParam(undoLimit, 'number', 'undoLimit');\n    this.useRegularExpressions = configValueFromParam(useRegularExpressions, 'boolean', 'useRegularExpressions');\n    this.useWildcards = configValueFromParam(useWildcards, 'boolean', 'useWildcards');\n    this.matchWholeCell = configValueFromParam(matchWholeCell, 'boolean', 'matchWholeCell');\n    validateNumberToBeAtLeast(this.undoLimit, 'undoLimit', 0);\n    this.maxRows = configValueFromParam(maxRows, 'number', 'maxRows');\n    validateNumberToBeAtLeast(this.maxRows, 'maxRows', 1);\n    this.maxColumns = configValueFromParam(maxColumns, 'number', 'maxColumns');\n    this.currencySymbol = this.setupCurrencySymbol(currencySymbol);\n    validateNumberToBeAtLeast(this.maxColumns, 'maxColumns', 1);\n    this.context = context;\n    privatePool.set(this, {\n      licenseKeyValidityState: checkLicenseKeyValidity(this.licenseKey)\n    });\n    configCheckIfParametersNotInConflict({\n      value: this.decimalSeparator,\n      name: 'decimalSeparator'\n    }, {\n      value: this.functionArgSeparator,\n      name: 'functionArgSeparator'\n    }, {\n      value: this.thousandSeparator,\n      name: 'thousandSeparator'\n    });\n    configCheckIfParametersNotInConflict({\n      value: this.arrayRowSeparator,\n      name: 'arrayRowSeparator'\n    }, {\n      value: this.arrayColumnSeparator,\n      name: 'arrayColumnSeparator'\n    });\n  }\n  setupCurrencySymbol(currencySymbol) {\n    const valueAfterCheck = [...configValueFromParamCheck(currencySymbol, Array.isArray, 'array', 'currencySymbol')];\n    valueAfterCheck.forEach(val => {\n      if (typeof val !== 'string') {\n        throw new ExpectedValueOfTypeError('string[]', 'currencySymbol');\n      }\n      if (val === '') {\n        throw new ConfigValueEmpty('currencySymbol');\n      }\n    });\n    return valueAfterCheck;\n  }\n  /**\r\n   * Proxied property to its private counterpart. This makes the property\r\n   * as accessible as the other Config options but without ability to change the value.\r\n   *\r\n   * @internal\r\n   */\n  get licenseKeyValidityState() {\n    return privatePool.get(this).licenseKeyValidityState;\n  }\n  getConfig() {\n    return getFullConfigFromPartial(this);\n  }\n  mergeConfig(init) {\n    const mergedConfig = Object.assign({}, this.getConfig(), init);\n    Config.warnDeprecatedOptions(init);\n    return new Config(mergedConfig, false);\n  }\n  static warnDeprecatedOptions(options) {\n    // an example of deprecation warning\n    // Config.warnDeprecatedIfUsed(options.binarySearchThreshold, 'binarySearchThreshold', '1.1')\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static warnDeprecatedIfUsed(inputValue, paramName, fromVersion, replacementName) {\n    if (inputValue !== undefined) {\n      if (replacementName === undefined) {\n        console.warn(`${paramName} option is deprecated since ${fromVersion}`);\n      } else {\n        console.warn(`${paramName} option is deprecated since ${fromVersion}, please use ${replacementName}`);\n      }\n    }\n  }\n}\nConfig.defaultConfig = {\n  accentSensitive: false,\n  currencySymbol: ['$'],\n  caseSensitive: false,\n  caseFirst: 'lower',\n  context: undefined,\n  chooseAddressMappingPolicy: new AlwaysDense(),\n  dateFormats: ['DD/MM/YYYY', 'DD/MM/YY'],\n  decimalSeparator: '.',\n  evaluateNullToZero: false,\n  functionArgSeparator: ',',\n  functionPlugins: [],\n  ignorePunctuation: false,\n  language: 'enGB',\n  ignoreWhiteSpace: 'standard',\n  licenseKey: '',\n  leapYear1900: false,\n  localeLang: 'en',\n  matchWholeCell: true,\n  arrayColumnSeparator: ',',\n  arrayRowSeparator: ';',\n  maxRows: 40000,\n  maxColumns: 18278,\n  nullYear: 30,\n  nullDate: {\n    year: 1899,\n    month: 12,\n    day: 30\n  },\n  parseDateTime: defaultParseToDateTime,\n  precisionEpsilon: 1e-13,\n  precisionRounding: 10,\n  smartRounding: true,\n  stringifyDateTime: defaultStringifyDateTime,\n  stringifyDuration: defaultStringifyDuration,\n  timeFormats: ['hh:mm', 'hh:mm:ss.sss'],\n  thousandSeparator: '',\n  undoLimit: 20,\n  useRegularExpressions: false,\n  useWildcards: true,\n  useColumnIndex: false,\n  useStats: false,\n  useArrayArithmetic: false\n};\nfunction getFullConfigFromPartial(partialConfig) {\n  var _a;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const ret = {};\n  for (const key in Config.defaultConfig) {\n    const val = (_a = partialConfig[key]) !== null && _a !== void 0 ? _a : Config.defaultConfig[key];\n    if (Array.isArray(val)) {\n      ret[key] = [...val];\n    } else {\n      ret[key] = val;\n    }\n  }\n  return ret;\n}\nexport function getDefaultConfig() {\n  return getFullConfigFromPartial({});\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}