{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class MathPlugin extends FunctionPlugin {\n  fact(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FACT'), arg => {\n      arg = Math.trunc(arg);\n      let ret = 1;\n      for (let i = 1; i <= arg; i++) {\n        ret *= i;\n      }\n      return ret;\n    });\n  }\n  factdouble(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FACTDOUBLE'), arg => {\n      arg = Math.trunc(arg);\n      let ret = 1;\n      for (let i = arg; i >= 1; i -= 2) {\n        ret *= i;\n      }\n      return ret;\n    });\n  }\n  combin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COMBIN'), (n, m) => {\n      if (m > n) {\n        return new CellError(ErrorType.NUM, ErrorMessage.WrongOrder);\n      }\n      n = Math.trunc(n);\n      m = Math.trunc(m);\n      return combin(n, m);\n    });\n  }\n  combina(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COMBINA'), (n, m) => {\n      n = Math.trunc(n);\n      m = Math.trunc(m);\n      if (n + m - 1 >= 1030) {\n        //Product #2 does not enforce this\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      if (n === 0 && m === 0) {\n        return 1;\n      }\n      return combin(n + m - 1, m);\n    });\n  }\n  gcd(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GCD'), (...args) => {\n      const processedArgs = this.arithmeticHelper.coerceNumbersCoerceRangesDropNulls(args);\n      if (processedArgs instanceof CellError) {\n        return processedArgs;\n      }\n      let ret = 0;\n      for (const val of processedArgs) {\n        if (val < 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n        ret = binaryGCD(ret, Math.trunc(val));\n      }\n      if (ret > Number.MAX_SAFE_INTEGER) {\n        //inconsistency with product #1\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      return ret;\n    });\n  }\n  lcm(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LCM'), (...args) => {\n      const processedArgs = this.arithmeticHelper.coerceNumbersCoerceRangesDropNulls(args);\n      if (processedArgs instanceof CellError) {\n        return processedArgs;\n      }\n      let ret = 1;\n      for (const val of processedArgs) {\n        if (val < 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n        ret = binaryLCM(ret, Math.trunc(val));\n      }\n      if (ret > Number.MAX_SAFE_INTEGER) {\n        //inconsistency with product #1\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      return ret;\n    });\n  }\n  mround(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MROUND'), (nom, denom) => {\n      if (denom === 0) {\n        return 0;\n      }\n      if (nom > 0 && denom < 0 || nom < 0 && denom > 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.DistinctSigns);\n      }\n      return Math.round(nom / denom) * denom;\n    });\n  }\n  multinomial(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MULTINOMIAL'), (...args) => {\n      let n = 0;\n      let ans = 1;\n      for (let arg of args) {\n        if (arg < 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n        arg = Math.trunc(arg);\n        for (let i = 1; i <= arg; i++) {\n          ans *= (n + i) / i;\n        }\n        n += arg;\n      }\n      return Math.round(ans);\n    });\n  }\n  quotient(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('QUOTIENT'), (nom, denom) => {\n      if (denom === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return Math.trunc(nom / denom);\n    });\n  }\n  seriessum(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SERIESSUM'), (x, n, m, range) => {\n      const coefs = this.arithmeticHelper.manyToOnlyNumbersDropNulls(range.valuesFromTopLeftCorner());\n      if (coefs instanceof CellError) {\n        return coefs;\n      }\n      let ret = 0;\n      coefs.reverse();\n      for (const coef of coefs) {\n        ret *= Math.pow(x, m);\n        ret += coef;\n      }\n      return ret * Math.pow(x, n);\n    });\n  }\n  sign(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SIGN'), arg => {\n      if (arg > 0) {\n        return 1;\n      } else if (arg < 0) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n  }\n  sumx2my2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMX2MY2'), (rangeX, rangeY) => {\n      const valsX = rangeX.valuesFromTopLeftCorner();\n      const valsY = rangeY.valuesFromTopLeftCorner();\n      if (valsX.length !== valsY.length) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const n = valsX.length;\n      let ret = 0;\n      for (let i = 0; i < n; i++) {\n        const valX = valsX[i];\n        const valY = valsY[i];\n        if (valX instanceof CellError) {\n          return valX;\n        }\n        if (valY instanceof CellError) {\n          return valY;\n        }\n        if (typeof valX === 'number' && typeof valY === 'number') {\n          ret += Math.pow(valX, 2) - Math.pow(valY, 2);\n        }\n      }\n      return ret;\n    });\n  }\n  sumx2py2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMX2PY2'), (rangeX, rangeY) => {\n      const valsX = rangeX.valuesFromTopLeftCorner();\n      const valsY = rangeY.valuesFromTopLeftCorner();\n      if (valsX.length !== valsY.length) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const n = valsX.length;\n      let ret = 0;\n      for (let i = 0; i < n; i++) {\n        const valX = valsX[i];\n        const valY = valsY[i];\n        if (valX instanceof CellError) {\n          return valX;\n        }\n        if (valY instanceof CellError) {\n          return valY;\n        }\n        if (typeof valX === 'number' && typeof valY === 'number') {\n          ret += Math.pow(valX, 2) + Math.pow(valY, 2);\n        }\n      }\n      return ret;\n    });\n  }\n  sumxmy2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMXMY2'), (rangeX, rangeY) => {\n      const valsX = rangeX.valuesFromTopLeftCorner();\n      const valsY = rangeY.valuesFromTopLeftCorner();\n      if (valsX.length !== valsY.length) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const n = valsX.length;\n      let ret = 0;\n      for (let i = 0; i < n; i++) {\n        const valX = valsX[i];\n        const valY = valsY[i];\n        if (valX instanceof CellError) {\n          return valX;\n        }\n        if (valY instanceof CellError) {\n          return valY;\n        }\n        if (typeof valX === 'number' && typeof valY === 'number') {\n          ret += Math.pow(valX - valY, 2);\n        }\n      }\n      return ret;\n    });\n  }\n}\nMathPlugin.implementedFunctions = {\n  'FACT': {\n    method: 'fact',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 170\n    }]\n  },\n  'FACTDOUBLE': {\n    method: 'factdouble',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 288\n    }]\n  },\n  'COMBIN': {\n    method: 'combin',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      lessThan: 1030\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'COMBINA': {\n    method: 'combina',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'GCD': {\n    method: 'gcd',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'LCM': {\n    method: 'lcm',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'MROUND': {\n    method: 'mround',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'MULTINOMIAL': {\n    method: 'multinomial',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    repeatLastArgs: 1,\n    expandRanges: true\n  },\n  'QUOTIENT': {\n    method: 'quotient',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'SERIESSUM': {\n    method: 'seriessum',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SIGN': {\n    method: 'sign',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'SUMX2MY2': {\n    method: 'sumx2my2',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SUMX2PY2': {\n    method: 'sumx2py2',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SUMXMY2': {\n    method: 'sumxmy2',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  }\n};\nfunction combin(n, m) {\n  if (2 * m > n) {\n    m = n - m;\n  }\n  let ret = 1;\n  for (let i = 1; i <= m; i++) {\n    ret *= (n - m + i) / i;\n  }\n  return Math.round(ret);\n}\nfunction binaryGCD(a, b) {\n  if (a < b) {\n    [a, b] = [b, a];\n  }\n  while (b > 0) {\n    [a, b] = [b, a % b];\n  }\n  return a;\n}\nfunction binaryLCM(a, b) {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * (b / binaryGCD(a, b));\n}","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","FunctionArgumentType","FunctionPlugin","MathPlugin","fact","ast","state","runFunction","args","metadata","arg","Math","trunc","ret","i","factdouble","combin","n","m","NUM","WrongOrder","combina","ValueLarge","gcd","processedArgs","arithmeticHelper","coerceNumbersCoerceRangesDropNulls","val","ValueSmall","binaryGCD","Number","MAX_SAFE_INTEGER","lcm","binaryLCM","mround","nom","denom","DistinctSigns","round","multinomial","ans","quotient","DIV_BY_ZERO","seriessum","x","range","coefs","manyToOnlyNumbersDropNulls","valuesFromTopLeftCorner","reverse","coef","pow","sign","sumx2my2","rangeX","rangeY","valsX","valsY","length","NA","EqualLength","valX","valY","sumx2py2","sumxmy2","implementedFunctions","method","parameters","argumentType","NUMBER","minValue","maxValue","lessThan","ANY","repeatLastArgs","expandRanges","RANGE","a","b"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/MathPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class MathPlugin extends FunctionPlugin {\n  fact(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FACT'), arg => {\n      arg = Math.trunc(arg);\n      let ret = 1;\n      for (let i = 1; i <= arg; i++) {\n        ret *= i;\n      }\n      return ret;\n    });\n  }\n  factdouble(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FACTDOUBLE'), arg => {\n      arg = Math.trunc(arg);\n      let ret = 1;\n      for (let i = arg; i >= 1; i -= 2) {\n        ret *= i;\n      }\n      return ret;\n    });\n  }\n  combin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COMBIN'), (n, m) => {\n      if (m > n) {\n        return new CellError(ErrorType.NUM, ErrorMessage.WrongOrder);\n      }\n      n = Math.trunc(n);\n      m = Math.trunc(m);\n      return combin(n, m);\n    });\n  }\n  combina(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COMBINA'), (n, m) => {\n      n = Math.trunc(n);\n      m = Math.trunc(m);\n      if (n + m - 1 >= 1030) {\n        //Product #2 does not enforce this\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      if (n === 0 && m === 0) {\n        return 1;\n      }\n      return combin(n + m - 1, m);\n    });\n  }\n  gcd(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GCD'), (...args) => {\n      const processedArgs = this.arithmeticHelper.coerceNumbersCoerceRangesDropNulls(args);\n      if (processedArgs instanceof CellError) {\n        return processedArgs;\n      }\n      let ret = 0;\n      for (const val of processedArgs) {\n        if (val < 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n        ret = binaryGCD(ret, Math.trunc(val));\n      }\n      if (ret > Number.MAX_SAFE_INTEGER) {\n        //inconsistency with product #1\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      return ret;\n    });\n  }\n  lcm(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LCM'), (...args) => {\n      const processedArgs = this.arithmeticHelper.coerceNumbersCoerceRangesDropNulls(args);\n      if (processedArgs instanceof CellError) {\n        return processedArgs;\n      }\n      let ret = 1;\n      for (const val of processedArgs) {\n        if (val < 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n        ret = binaryLCM(ret, Math.trunc(val));\n      }\n      if (ret > Number.MAX_SAFE_INTEGER) {\n        //inconsistency with product #1\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      return ret;\n    });\n  }\n  mround(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MROUND'), (nom, denom) => {\n      if (denom === 0) {\n        return 0;\n      }\n      if (nom > 0 && denom < 0 || nom < 0 && denom > 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.DistinctSigns);\n      }\n      return Math.round(nom / denom) * denom;\n    });\n  }\n  multinomial(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MULTINOMIAL'), (...args) => {\n      let n = 0;\n      let ans = 1;\n      for (let arg of args) {\n        if (arg < 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n        arg = Math.trunc(arg);\n        for (let i = 1; i <= arg; i++) {\n          ans *= (n + i) / i;\n        }\n        n += arg;\n      }\n      return Math.round(ans);\n    });\n  }\n  quotient(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('QUOTIENT'), (nom, denom) => {\n      if (denom === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return Math.trunc(nom / denom);\n    });\n  }\n  seriessum(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SERIESSUM'), (x, n, m, range) => {\n      const coefs = this.arithmeticHelper.manyToOnlyNumbersDropNulls(range.valuesFromTopLeftCorner());\n      if (coefs instanceof CellError) {\n        return coefs;\n      }\n      let ret = 0;\n      coefs.reverse();\n      for (const coef of coefs) {\n        ret *= Math.pow(x, m);\n        ret += coef;\n      }\n      return ret * Math.pow(x, n);\n    });\n  }\n  sign(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SIGN'), arg => {\n      if (arg > 0) {\n        return 1;\n      } else if (arg < 0) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n  }\n  sumx2my2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMX2MY2'), (rangeX, rangeY) => {\n      const valsX = rangeX.valuesFromTopLeftCorner();\n      const valsY = rangeY.valuesFromTopLeftCorner();\n      if (valsX.length !== valsY.length) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const n = valsX.length;\n      let ret = 0;\n      for (let i = 0; i < n; i++) {\n        const valX = valsX[i];\n        const valY = valsY[i];\n        if (valX instanceof CellError) {\n          return valX;\n        }\n        if (valY instanceof CellError) {\n          return valY;\n        }\n        if (typeof valX === 'number' && typeof valY === 'number') {\n          ret += Math.pow(valX, 2) - Math.pow(valY, 2);\n        }\n      }\n      return ret;\n    });\n  }\n  sumx2py2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMX2PY2'), (rangeX, rangeY) => {\n      const valsX = rangeX.valuesFromTopLeftCorner();\n      const valsY = rangeY.valuesFromTopLeftCorner();\n      if (valsX.length !== valsY.length) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const n = valsX.length;\n      let ret = 0;\n      for (let i = 0; i < n; i++) {\n        const valX = valsX[i];\n        const valY = valsY[i];\n        if (valX instanceof CellError) {\n          return valX;\n        }\n        if (valY instanceof CellError) {\n          return valY;\n        }\n        if (typeof valX === 'number' && typeof valY === 'number') {\n          ret += Math.pow(valX, 2) + Math.pow(valY, 2);\n        }\n      }\n      return ret;\n    });\n  }\n  sumxmy2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMXMY2'), (rangeX, rangeY) => {\n      const valsX = rangeX.valuesFromTopLeftCorner();\n      const valsY = rangeY.valuesFromTopLeftCorner();\n      if (valsX.length !== valsY.length) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const n = valsX.length;\n      let ret = 0;\n      for (let i = 0; i < n; i++) {\n        const valX = valsX[i];\n        const valY = valsY[i];\n        if (valX instanceof CellError) {\n          return valX;\n        }\n        if (valY instanceof CellError) {\n          return valY;\n        }\n        if (typeof valX === 'number' && typeof valY === 'number') {\n          ret += Math.pow(valX - valY, 2);\n        }\n      }\n      return ret;\n    });\n  }\n}\nMathPlugin.implementedFunctions = {\n  'FACT': {\n    method: 'fact',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 170\n    }]\n  },\n  'FACTDOUBLE': {\n    method: 'factdouble',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      maxValue: 288\n    }]\n  },\n  'COMBIN': {\n    method: 'combin',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0,\n      lessThan: 1030\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'COMBINA': {\n    method: 'combina',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 0\n    }]\n  },\n  'GCD': {\n    method: 'gcd',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'LCM': {\n    method: 'lcm',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'MROUND': {\n    method: 'mround',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'MULTINOMIAL': {\n    method: 'multinomial',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    repeatLastArgs: 1,\n    expandRanges: true\n  },\n  'QUOTIENT': {\n    method: 'quotient',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'SERIESSUM': {\n    method: 'seriessum',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SIGN': {\n    method: 'sign',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'SUMX2MY2': {\n    method: 'sumx2my2',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SUMX2PY2': {\n    method: 'sumx2py2',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SUMXMY2': {\n    method: 'sumxmy2',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  }\n};\nfunction combin(n, m) {\n  if (2 * m > n) {\n    m = n - m;\n  }\n  let ret = 1;\n  for (let i = 1; i <= m; i++) {\n    ret *= (n - m + i) / i;\n  }\n  return Math.round(ret);\n}\nfunction binaryGCD(a, b) {\n  if (a < b) {\n    [a, b] = [b, a];\n  }\n  while (b > 0) {\n    [a, b] = [b, a % b];\n  }\n  return a;\n}\nfunction binaryLCM(a, b) {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * (b / binaryGCD(a, b));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}