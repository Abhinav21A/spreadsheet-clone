{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { AbsoluteCellRange } from \"../../AbsoluteCellRange.mjs\";\nimport { CellError, ErrorType, simpleCellAddress } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { RowSearchStrategy } from \"../../Lookup/RowSearchStrategy.mjs\";\nimport { StatType } from \"../../statistics/index.mjs\";\nimport { zeroIfEmpty } from \"../ArithmeticHelper.mjs\";\nimport { SimpleRangeValue } from \"../../SimpleRangeValue.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nimport { ArraySize } from \"../../ArraySize.mjs\";\nexport class LookupPlugin extends FunctionPlugin {\n  constructor() {\n    super(...arguments);\n    this.rowSearch = new RowSearchStrategy(this.dependencyGraph);\n  }\n  /**\r\n   * Corresponds to VLOOKUP(key, range, index, [sorted])\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  vlookup(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('VLOOKUP'), (key, rangeValue, index, sorted) => {\n      const range = rangeValue.range;\n      if (range === undefined) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n      }\n      if (index < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      if (index > range.width()) {\n        return new CellError(ErrorType.REF, ErrorMessage.IndexLarge);\n      }\n      const searchOptions = {\n        ordering: sorted ? 'asc' : 'none',\n        ifNoMatch: sorted ? 'returnLowerBound' : 'returnNotFound'\n      };\n      return this.doVlookup(zeroIfEmpty(key), rangeValue, index - 1, searchOptions);\n    });\n  }\n  /**\r\n   * Corresponds to HLOOKUP(key, range, index, [sorted])\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  hlookup(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HLOOKUP'), (key, rangeValue, index, sorted) => {\n      const range = rangeValue.range;\n      if (range === undefined) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n      }\n      if (index < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      if (index > range.height()) {\n        return new CellError(ErrorType.REF, ErrorMessage.IndexLarge);\n      }\n      const searchOptions = {\n        ordering: sorted ? 'asc' : 'none',\n        ifNoMatch: sorted ? 'returnLowerBound' : 'returnNotFound'\n      };\n      return this.doHlookup(zeroIfEmpty(key), rangeValue, index - 1, searchOptions);\n    });\n  }\n  /**\r\n   * Corresponds to XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  xlookup(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('XLOOKUP'), (key, lookupRangeValue, returnRangeValue, notFoundFlag, matchMode, searchMode) => {\n      if (![0, -1, 1, 2].includes(matchMode)) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.BadMode);\n      }\n      if (![1, -1, 2, -2].includes(searchMode)) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.BadMode);\n      }\n      const lookupRange = lookupRangeValue instanceof SimpleRangeValue ? lookupRangeValue : SimpleRangeValue.fromScalar(lookupRangeValue);\n      const returnRange = returnRangeValue instanceof SimpleRangeValue ? returnRangeValue : SimpleRangeValue.fromScalar(returnRangeValue);\n      const isWildcardMatchMode = matchMode === 2;\n      const searchOptions = {\n        ordering: searchMode === 2 ? 'asc' : searchMode === -2 ? 'desc' : 'none',\n        returnOccurrence: searchMode === -1 ? 'last' : 'first',\n        ifNoMatch: matchMode === -1 ? 'returnLowerBound' : matchMode === 1 ? 'returnUpperBound' : 'returnNotFound'\n      };\n      return this.doXlookup(zeroIfEmpty(key), lookupRange, returnRange, notFoundFlag, isWildcardMatchMode, searchOptions);\n    });\n  }\n  xlookupArraySize(ast) {\n    var _a, _b;\n    const lookupRange = (_a = ast === null || ast === void 0 ? void 0 : ast.args) === null || _a === void 0 ? void 0 : _a[1];\n    const returnRange = (_b = ast === null || ast === void 0 ? void 0 : ast.args) === null || _b === void 0 ? void 0 : _b[2];\n    if ((lookupRange === null || lookupRange === void 0 ? void 0 : lookupRange.start) == null || (lookupRange === null || lookupRange === void 0 ? void 0 : lookupRange.end) == null || (returnRange === null || returnRange === void 0 ? void 0 : returnRange.start) == null || (returnRange === null || returnRange === void 0 ? void 0 : returnRange.end) == null) {\n      return ArraySize.error();\n    }\n    const lookupRangeHeight = lookupRange.end.row - lookupRange.start.row + 1;\n    const lookupRangeWidth = lookupRange.end.col - lookupRange.start.col + 1;\n    const returnRangeHeight = returnRange.end.row - returnRange.start.row + 1;\n    const returnRangeWidth = returnRange.end.col - returnRange.start.col + 1;\n    const isVerticalSearch = lookupRangeWidth === 1 && returnRangeHeight === lookupRangeHeight;\n    const isHorizontalSearch = lookupRangeHeight === 1 && returnRangeWidth === lookupRangeWidth;\n    if (!isVerticalSearch && !isHorizontalSearch) {\n      return ArraySize.error();\n    }\n    if (isVerticalSearch) {\n      return new ArraySize(returnRangeWidth, 1);\n    }\n    return new ArraySize(1, returnRangeHeight);\n  }\n  match(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MATCH'), (key, rangeValue, type) => {\n      return this.doMatch(zeroIfEmpty(key), rangeValue, type);\n    });\n  }\n  searchInRange(key, range, isWildcardMatchMode, searchOptions, searchStrategy) {\n    if (isWildcardMatchMode && typeof key === 'string' && this.arithmeticHelper.requiresRegex(key)) {\n      return searchStrategy.advancedFind(this.arithmeticHelper.eqMatcherFunction(key), range, {\n        returnOccurrence: searchOptions.returnOccurrence\n      });\n    }\n    return searchStrategy.find(key, range, searchOptions);\n  }\n  doVlookup(key, rangeValue, index, searchOptions) {\n    this.dependencyGraph.stats.start(StatType.VLOOKUP);\n    const range = rangeValue.range;\n    let searchedRange;\n    if (range === undefined) {\n      searchedRange = SimpleRangeValue.onlyValues(rangeValue.data.map(arg => [arg[0]]));\n    } else {\n      searchedRange = SimpleRangeValue.onlyRange(AbsoluteCellRange.spanFrom(range.start, 1, range.height()), this.dependencyGraph);\n    }\n    const rowIndex = this.searchInRange(key, searchedRange, searchOptions.ordering === 'none', searchOptions, this.columnSearch);\n    this.dependencyGraph.stats.end(StatType.VLOOKUP);\n    if (rowIndex === -1) {\n      return new CellError(ErrorType.NA, ErrorMessage.ValueNotFound);\n    }\n    let value;\n    if (range === undefined) {\n      value = rangeValue.data[rowIndex][index];\n    } else {\n      const address = simpleCellAddress(range.sheet, range.start.col + index, range.start.row + rowIndex);\n      value = this.dependencyGraph.getCellValue(address);\n    }\n    if (value instanceof SimpleRangeValue) {\n      return new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n    }\n    return value;\n  }\n  doHlookup(key, rangeValue, index, searchOptions) {\n    const range = rangeValue.range;\n    let searchedRange;\n    if (range === undefined) {\n      searchedRange = SimpleRangeValue.onlyValues([rangeValue.data[0]]);\n    } else {\n      searchedRange = SimpleRangeValue.onlyRange(AbsoluteCellRange.spanFrom(range.start, range.width(), 1), this.dependencyGraph);\n    }\n    const colIndex = this.searchInRange(key, searchedRange, searchOptions.ordering === 'none', searchOptions, this.rowSearch);\n    if (colIndex === -1) {\n      return new CellError(ErrorType.NA, ErrorMessage.ValueNotFound);\n    }\n    let value;\n    if (range === undefined) {\n      value = rangeValue.data[index][colIndex];\n    } else {\n      const address = simpleCellAddress(range.sheet, range.start.col + colIndex, range.start.row + index);\n      value = this.dependencyGraph.getCellValue(address);\n    }\n    if (value instanceof SimpleRangeValue) {\n      return new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n    }\n    return value;\n  }\n  doXlookup(key, lookupRange, returnRange, notFoundFlag, isWildcardMatchMode, searchOptions) {\n    const isVerticalSearch = lookupRange.width() === 1 && returnRange.height() === lookupRange.height();\n    const isHorizontalSearch = lookupRange.height() === 1 && returnRange.width() === lookupRange.width();\n    if (!isVerticalSearch && !isHorizontalSearch) {\n      return new CellError(ErrorType.VALUE, ErrorMessage.WrongDimension);\n    }\n    const searchStrategy = isVerticalSearch ? this.columnSearch : this.rowSearch;\n    const indexFound = this.searchInRange(key, lookupRange, isWildcardMatchMode, searchOptions, searchStrategy);\n    if (indexFound === -1) {\n      return notFoundFlag == ErrorType.NA ? new CellError(ErrorType.NA, ErrorMessage.ValueNotFound) : notFoundFlag;\n    }\n    const returnValues = isVerticalSearch ? [returnRange.data[indexFound]] : returnRange.data.map(row => [row[indexFound]]);\n    return SimpleRangeValue.onlyValues(returnValues);\n  }\n  doMatch(key, rangeValue, type) {\n    if (![-1, 0, 1].includes(type)) {\n      return new CellError(ErrorType.VALUE, ErrorMessage.BadMode);\n    }\n    if (rangeValue.width() > 1 && rangeValue.height() > 1) {\n      return new CellError(ErrorType.NA);\n    }\n    const searchStrategy = rangeValue.width() === 1 ? this.columnSearch : this.rowSearch;\n    const searchOptions = type === 0 ? {\n      ordering: 'none',\n      ifNoMatch: 'returnNotFound'\n    } : {\n      ordering: type === -1 ? 'desc' : 'asc',\n      ifNoMatch: type === -1 ? 'returnUpperBound' : 'returnLowerBound'\n    };\n    const index = searchStrategy.find(key, rangeValue, searchOptions);\n    if (index === -1) {\n      return new CellError(ErrorType.NA, ErrorMessage.ValueNotFound);\n    }\n    return index + 1;\n  }\n}\nLookupPlugin.implementedFunctions = {\n  'VLOOKUP': {\n    method: 'vlookup',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN,\n      defaultValue: true\n    }]\n  },\n  'HLOOKUP': {\n    method: 'hlookup',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN,\n      defaultValue: true\n    }]\n  },\n  'XLOOKUP': {\n    method: 'xlookup',\n    arraySizeMethod: 'xlookupArraySize',\n    parameters: [\n    // lookup_value\n    {\n      argumentType: FunctionArgumentType.NOERROR\n    },\n    // lookup_array\n    {\n      argumentType: FunctionArgumentType.RANGE\n    },\n    // return_array\n    {\n      argumentType: FunctionArgumentType.RANGE\n    },\n    // [if_not_found]\n    {\n      argumentType: FunctionArgumentType.SCALAR,\n      optionalArg: true,\n      defaultValue: ErrorType.NA\n    },\n    // [match_mode]\n    {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      defaultValue: 0\n    },\n    // [search_mode]\n    {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      defaultValue: 1\n    }]\n  },\n  'MATCH': {\n    method: 'match',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  }\n};","map":{"version":3,"names":["AbsoluteCellRange","CellError","ErrorType","simpleCellAddress","ErrorMessage","RowSearchStrategy","StatType","zeroIfEmpty","SimpleRangeValue","FunctionArgumentType","FunctionPlugin","ArraySize","LookupPlugin","constructor","arguments","rowSearch","dependencyGraph","vlookup","ast","state","runFunction","args","metadata","key","rangeValue","index","sorted","range","undefined","VALUE","WrongType","LessThanOne","width","REF","IndexLarge","searchOptions","ordering","ifNoMatch","doVlookup","hlookup","height","doHlookup","xlookup","lookupRangeValue","returnRangeValue","notFoundFlag","matchMode","searchMode","includes","BadMode","lookupRange","fromScalar","returnRange","isWildcardMatchMode","returnOccurrence","doXlookup","xlookupArraySize","_a","_b","start","end","error","lookupRangeHeight","row","lookupRangeWidth","col","returnRangeHeight","returnRangeWidth","isVerticalSearch","isHorizontalSearch","match","type","doMatch","searchInRange","searchStrategy","arithmeticHelper","requiresRegex","advancedFind","eqMatcherFunction","find","stats","VLOOKUP","searchedRange","onlyValues","data","map","arg","onlyRange","spanFrom","rowIndex","columnSearch","NA","ValueNotFound","value","address","sheet","getCellValue","colIndex","WrongDimension","indexFound","returnValues","implementedFunctions","method","parameters","argumentType","NOERROR","RANGE","NUMBER","BOOLEAN","defaultValue","arraySizeMethod","SCALAR","optionalArg"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/LookupPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { AbsoluteCellRange } from \"../../AbsoluteCellRange.mjs\";\nimport { CellError, ErrorType, simpleCellAddress } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { RowSearchStrategy } from \"../../Lookup/RowSearchStrategy.mjs\";\nimport { StatType } from \"../../statistics/index.mjs\";\nimport { zeroIfEmpty } from \"../ArithmeticHelper.mjs\";\nimport { SimpleRangeValue } from \"../../SimpleRangeValue.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nimport { ArraySize } from \"../../ArraySize.mjs\";\nexport class LookupPlugin extends FunctionPlugin {\n  constructor() {\n    super(...arguments);\n    this.rowSearch = new RowSearchStrategy(this.dependencyGraph);\n  }\n  /**\r\n   * Corresponds to VLOOKUP(key, range, index, [sorted])\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  vlookup(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('VLOOKUP'), (key, rangeValue, index, sorted) => {\n      const range = rangeValue.range;\n      if (range === undefined) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n      }\n      if (index < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      if (index > range.width()) {\n        return new CellError(ErrorType.REF, ErrorMessage.IndexLarge);\n      }\n      const searchOptions = {\n        ordering: sorted ? 'asc' : 'none',\n        ifNoMatch: sorted ? 'returnLowerBound' : 'returnNotFound'\n      };\n      return this.doVlookup(zeroIfEmpty(key), rangeValue, index - 1, searchOptions);\n    });\n  }\n  /**\r\n   * Corresponds to HLOOKUP(key, range, index, [sorted])\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  hlookup(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HLOOKUP'), (key, rangeValue, index, sorted) => {\n      const range = rangeValue.range;\n      if (range === undefined) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n      }\n      if (index < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      if (index > range.height()) {\n        return new CellError(ErrorType.REF, ErrorMessage.IndexLarge);\n      }\n      const searchOptions = {\n        ordering: sorted ? 'asc' : 'none',\n        ifNoMatch: sorted ? 'returnLowerBound' : 'returnNotFound'\n      };\n      return this.doHlookup(zeroIfEmpty(key), rangeValue, index - 1, searchOptions);\n    });\n  }\n  /**\r\n   * Corresponds to XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  xlookup(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('XLOOKUP'), (key, lookupRangeValue, returnRangeValue, notFoundFlag, matchMode, searchMode) => {\n      if (![0, -1, 1, 2].includes(matchMode)) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.BadMode);\n      }\n      if (![1, -1, 2, -2].includes(searchMode)) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.BadMode);\n      }\n      const lookupRange = lookupRangeValue instanceof SimpleRangeValue ? lookupRangeValue : SimpleRangeValue.fromScalar(lookupRangeValue);\n      const returnRange = returnRangeValue instanceof SimpleRangeValue ? returnRangeValue : SimpleRangeValue.fromScalar(returnRangeValue);\n      const isWildcardMatchMode = matchMode === 2;\n      const searchOptions = {\n        ordering: searchMode === 2 ? 'asc' : searchMode === -2 ? 'desc' : 'none',\n        returnOccurrence: searchMode === -1 ? 'last' : 'first',\n        ifNoMatch: matchMode === -1 ? 'returnLowerBound' : matchMode === 1 ? 'returnUpperBound' : 'returnNotFound'\n      };\n      return this.doXlookup(zeroIfEmpty(key), lookupRange, returnRange, notFoundFlag, isWildcardMatchMode, searchOptions);\n    });\n  }\n  xlookupArraySize(ast) {\n    var _a, _b;\n    const lookupRange = (_a = ast === null || ast === void 0 ? void 0 : ast.args) === null || _a === void 0 ? void 0 : _a[1];\n    const returnRange = (_b = ast === null || ast === void 0 ? void 0 : ast.args) === null || _b === void 0 ? void 0 : _b[2];\n    if ((lookupRange === null || lookupRange === void 0 ? void 0 : lookupRange.start) == null || (lookupRange === null || lookupRange === void 0 ? void 0 : lookupRange.end) == null || (returnRange === null || returnRange === void 0 ? void 0 : returnRange.start) == null || (returnRange === null || returnRange === void 0 ? void 0 : returnRange.end) == null) {\n      return ArraySize.error();\n    }\n    const lookupRangeHeight = lookupRange.end.row - lookupRange.start.row + 1;\n    const lookupRangeWidth = lookupRange.end.col - lookupRange.start.col + 1;\n    const returnRangeHeight = returnRange.end.row - returnRange.start.row + 1;\n    const returnRangeWidth = returnRange.end.col - returnRange.start.col + 1;\n    const isVerticalSearch = lookupRangeWidth === 1 && returnRangeHeight === lookupRangeHeight;\n    const isHorizontalSearch = lookupRangeHeight === 1 && returnRangeWidth === lookupRangeWidth;\n    if (!isVerticalSearch && !isHorizontalSearch) {\n      return ArraySize.error();\n    }\n    if (isVerticalSearch) {\n      return new ArraySize(returnRangeWidth, 1);\n    }\n    return new ArraySize(1, returnRangeHeight);\n  }\n  match(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MATCH'), (key, rangeValue, type) => {\n      return this.doMatch(zeroIfEmpty(key), rangeValue, type);\n    });\n  }\n  searchInRange(key, range, isWildcardMatchMode, searchOptions, searchStrategy) {\n    if (isWildcardMatchMode && typeof key === 'string' && this.arithmeticHelper.requiresRegex(key)) {\n      return searchStrategy.advancedFind(this.arithmeticHelper.eqMatcherFunction(key), range, {\n        returnOccurrence: searchOptions.returnOccurrence\n      });\n    }\n    return searchStrategy.find(key, range, searchOptions);\n  }\n  doVlookup(key, rangeValue, index, searchOptions) {\n    this.dependencyGraph.stats.start(StatType.VLOOKUP);\n    const range = rangeValue.range;\n    let searchedRange;\n    if (range === undefined) {\n      searchedRange = SimpleRangeValue.onlyValues(rangeValue.data.map(arg => [arg[0]]));\n    } else {\n      searchedRange = SimpleRangeValue.onlyRange(AbsoluteCellRange.spanFrom(range.start, 1, range.height()), this.dependencyGraph);\n    }\n    const rowIndex = this.searchInRange(key, searchedRange, searchOptions.ordering === 'none', searchOptions, this.columnSearch);\n    this.dependencyGraph.stats.end(StatType.VLOOKUP);\n    if (rowIndex === -1) {\n      return new CellError(ErrorType.NA, ErrorMessage.ValueNotFound);\n    }\n    let value;\n    if (range === undefined) {\n      value = rangeValue.data[rowIndex][index];\n    } else {\n      const address = simpleCellAddress(range.sheet, range.start.col + index, range.start.row + rowIndex);\n      value = this.dependencyGraph.getCellValue(address);\n    }\n    if (value instanceof SimpleRangeValue) {\n      return new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n    }\n    return value;\n  }\n  doHlookup(key, rangeValue, index, searchOptions) {\n    const range = rangeValue.range;\n    let searchedRange;\n    if (range === undefined) {\n      searchedRange = SimpleRangeValue.onlyValues([rangeValue.data[0]]);\n    } else {\n      searchedRange = SimpleRangeValue.onlyRange(AbsoluteCellRange.spanFrom(range.start, range.width(), 1), this.dependencyGraph);\n    }\n    const colIndex = this.searchInRange(key, searchedRange, searchOptions.ordering === 'none', searchOptions, this.rowSearch);\n    if (colIndex === -1) {\n      return new CellError(ErrorType.NA, ErrorMessage.ValueNotFound);\n    }\n    let value;\n    if (range === undefined) {\n      value = rangeValue.data[index][colIndex];\n    } else {\n      const address = simpleCellAddress(range.sheet, range.start.col + colIndex, range.start.row + index);\n      value = this.dependencyGraph.getCellValue(address);\n    }\n    if (value instanceof SimpleRangeValue) {\n      return new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n    }\n    return value;\n  }\n  doXlookup(key, lookupRange, returnRange, notFoundFlag, isWildcardMatchMode, searchOptions) {\n    const isVerticalSearch = lookupRange.width() === 1 && returnRange.height() === lookupRange.height();\n    const isHorizontalSearch = lookupRange.height() === 1 && returnRange.width() === lookupRange.width();\n    if (!isVerticalSearch && !isHorizontalSearch) {\n      return new CellError(ErrorType.VALUE, ErrorMessage.WrongDimension);\n    }\n    const searchStrategy = isVerticalSearch ? this.columnSearch : this.rowSearch;\n    const indexFound = this.searchInRange(key, lookupRange, isWildcardMatchMode, searchOptions, searchStrategy);\n    if (indexFound === -1) {\n      return notFoundFlag == ErrorType.NA ? new CellError(ErrorType.NA, ErrorMessage.ValueNotFound) : notFoundFlag;\n    }\n    const returnValues = isVerticalSearch ? [returnRange.data[indexFound]] : returnRange.data.map(row => [row[indexFound]]);\n    return SimpleRangeValue.onlyValues(returnValues);\n  }\n  doMatch(key, rangeValue, type) {\n    if (![-1, 0, 1].includes(type)) {\n      return new CellError(ErrorType.VALUE, ErrorMessage.BadMode);\n    }\n    if (rangeValue.width() > 1 && rangeValue.height() > 1) {\n      return new CellError(ErrorType.NA);\n    }\n    const searchStrategy = rangeValue.width() === 1 ? this.columnSearch : this.rowSearch;\n    const searchOptions = type === 0 ? {\n      ordering: 'none',\n      ifNoMatch: 'returnNotFound'\n    } : {\n      ordering: type === -1 ? 'desc' : 'asc',\n      ifNoMatch: type === -1 ? 'returnUpperBound' : 'returnLowerBound'\n    };\n    const index = searchStrategy.find(key, rangeValue, searchOptions);\n    if (index === -1) {\n      return new CellError(ErrorType.NA, ErrorMessage.ValueNotFound);\n    }\n    return index + 1;\n  }\n}\nLookupPlugin.implementedFunctions = {\n  'VLOOKUP': {\n    method: 'vlookup',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN,\n      defaultValue: true\n    }]\n  },\n  'HLOOKUP': {\n    method: 'hlookup',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.BOOLEAN,\n      defaultValue: true\n    }]\n  },\n  'XLOOKUP': {\n    method: 'xlookup',\n    arraySizeMethod: 'xlookupArraySize',\n    parameters: [\n    // lookup_value\n    {\n      argumentType: FunctionArgumentType.NOERROR\n    },\n    // lookup_array\n    {\n      argumentType: FunctionArgumentType.RANGE\n    },\n    // return_array\n    {\n      argumentType: FunctionArgumentType.RANGE\n    },\n    // [if_not_found]\n    {\n      argumentType: FunctionArgumentType.SCALAR,\n      optionalArg: true,\n      defaultValue: ErrorType.NA\n    },\n    // [match_mode]\n    {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      defaultValue: 0\n    },\n    // [search_mode]\n    {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true,\n      defaultValue: 1\n    }]\n  },\n  'MATCH': {\n    method: 'match',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}