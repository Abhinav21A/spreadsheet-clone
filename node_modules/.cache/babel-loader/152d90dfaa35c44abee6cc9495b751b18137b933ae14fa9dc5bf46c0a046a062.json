{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { HyperFormula } from \"../../HyperFormula.mjs\";\nimport { FunctionPlugin } from \"./FunctionPlugin.mjs\";\nconst LICENSE_STATUS_MAP = new Map([['gpl-v3', 1], [\"missing\" /* MISSING */, 2], [\"invalid\" /* INVALID */, 3], [\"expired\" /* EXPIRED */, 4]]);\nexport class VersionPlugin extends FunctionPlugin {\n  version(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('VERSION'), () => {\n      const {\n        licenseKeyValidityState: validityState,\n        licenseKey\n      } = this.config;\n      let status;\n      if (LICENSE_STATUS_MAP.has(licenseKey)) {\n        status = LICENSE_STATUS_MAP.get(licenseKey);\n      } else if (LICENSE_STATUS_MAP.has(validityState)) {\n        status = LICENSE_STATUS_MAP.get(validityState);\n      } else if (validityState === \"valid\" /* VALID */) {\n        status = licenseKey.slice(-5);\n      }\n      return `HyperFormula v${HyperFormula.version}, ${status}`;\n    });\n  }\n}\nVersionPlugin.implementedFunctions = {\n  'VERSION': {\n    method: 'version',\n    parameters: []\n  }\n};","map":{"version":3,"names":["HyperFormula","FunctionPlugin","LICENSE_STATUS_MAP","Map","VersionPlugin","version","ast","state","runFunction","args","metadata","licenseKeyValidityState","validityState","licenseKey","config","status","has","get","slice","implementedFunctions","method","parameters"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/VersionPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { HyperFormula } from \"../../HyperFormula.mjs\";\nimport { FunctionPlugin } from \"./FunctionPlugin.mjs\";\nconst LICENSE_STATUS_MAP = new Map([['gpl-v3', 1], [\"missing\" /* MISSING */, 2], [\"invalid\" /* INVALID */, 3], [\"expired\" /* EXPIRED */, 4]]);\nexport class VersionPlugin extends FunctionPlugin {\n  version(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('VERSION'), () => {\n      const {\n        licenseKeyValidityState: validityState,\n        licenseKey\n      } = this.config;\n      let status;\n      if (LICENSE_STATUS_MAP.has(licenseKey)) {\n        status = LICENSE_STATUS_MAP.get(licenseKey);\n      } else if (LICENSE_STATUS_MAP.has(validityState)) {\n        status = LICENSE_STATUS_MAP.get(validityState);\n      } else if (validityState === \"valid\" /* VALID */) {\n        status = licenseKey.slice(-5);\n      }\n      return `HyperFormula v${HyperFormula.version}, ${status}`;\n    });\n  }\n}\nVersionPlugin.implementedFunctions = {\n  'VERSION': {\n    method: 'version',\n    parameters: []\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AAC7I,OAAO,MAAMC,aAAa,SAASH,cAAc,CAAC;EAChDI,OAAOA,CAACC,GAAG,EAAEC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM;MACvE,MAAM;QACJC,uBAAuB,EAAEC,aAAa;QACtCC;MACF,CAAC,GAAG,IAAI,CAACC,MAAM;MACf,IAAIC,MAAM;MACV,IAAIb,kBAAkB,CAACc,GAAG,CAACH,UAAU,CAAC,EAAE;QACtCE,MAAM,GAAGb,kBAAkB,CAACe,GAAG,CAACJ,UAAU,CAAC;MAC7C,CAAC,MAAM,IAAIX,kBAAkB,CAACc,GAAG,CAACJ,aAAa,CAAC,EAAE;QAChDG,MAAM,GAAGb,kBAAkB,CAACe,GAAG,CAACL,aAAa,CAAC;MAChD,CAAC,MAAM,IAAIA,aAAa,KAAK,OAAO,CAAC,aAAa;QAChDG,MAAM,GAAGF,UAAU,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/B;MACA,OAAO,iBAAiBlB,YAAY,CAACK,OAAO,KAAKU,MAAM,EAAE;IAC3D,CAAC,CAAC;EACJ;AACF;AACAX,aAAa,CAACe,oBAAoB,GAAG;EACnC,SAAS,EAAE;IACTC,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}