{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { ABSOLUTE_OPERATOR, ALL_DIGITS_ARRAY, ALL_UNICODE_LETTERS_ARRAY, CELL_REFERENCE_WITH_NEXT_CHARACTER_PATTERN } from \"./parser-consts.mjs\";\n/**\r\n * Helper class for recognizing CellReference token in text\r\n */\nexport class CellReferenceMatcher {\n  constructor() {\n    this.POSSIBLE_START_CHARACTERS = [...ALL_UNICODE_LETTERS_ARRAY, ...ALL_DIGITS_ARRAY, ABSOLUTE_OPERATOR, \"'\", '_'];\n    this.cellReferenceRegexp = new RegExp(CELL_REFERENCE_WITH_NEXT_CHARACTER_PATTERN, 'y');\n  }\n  /**\r\n   * Method used by the lexer to recognize CellReference token in text\r\n   *\r\n   * Note: using 'y' sticky flag for a named expression which is not supported on IE11...\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\r\n   */\n  match(text, startOffset) {\n    this.cellReferenceRegexp.lastIndex = startOffset;\n    const execResult = this.cellReferenceRegexp.exec(text + '@');\n    if (execResult == null || execResult[1] == null) {\n      return null;\n    }\n    execResult[0] = execResult[1];\n    return execResult;\n  }\n}","map":{"version":3,"names":["ABSOLUTE_OPERATOR","ALL_DIGITS_ARRAY","ALL_UNICODE_LETTERS_ARRAY","CELL_REFERENCE_WITH_NEXT_CHARACTER_PATTERN","CellReferenceMatcher","constructor","POSSIBLE_START_CHARACTERS","cellReferenceRegexp","RegExp","match","text","startOffset","lastIndex","execResult","exec"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/parser/CellReferenceMatcher.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { ABSOLUTE_OPERATOR, ALL_DIGITS_ARRAY, ALL_UNICODE_LETTERS_ARRAY, CELL_REFERENCE_WITH_NEXT_CHARACTER_PATTERN } from \"./parser-consts.mjs\";\n/**\r\n * Helper class for recognizing CellReference token in text\r\n */\nexport class CellReferenceMatcher {\n  constructor() {\n    this.POSSIBLE_START_CHARACTERS = [...ALL_UNICODE_LETTERS_ARRAY, ...ALL_DIGITS_ARRAY, ABSOLUTE_OPERATOR, \"'\", '_'];\n    this.cellReferenceRegexp = new RegExp(CELL_REFERENCE_WITH_NEXT_CHARACTER_PATTERN, 'y');\n  }\n  /**\r\n   * Method used by the lexer to recognize CellReference token in text\r\n   *\r\n   * Note: using 'y' sticky flag for a named expression which is not supported on IE11...\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\r\n   */\n  match(text, startOffset) {\n    this.cellReferenceRegexp.lastIndex = startOffset;\n    const execResult = this.cellReferenceRegexp.exec(text + '@');\n    if (execResult == null || execResult[1] == null) {\n      return null;\n    }\n    execResult[0] = execResult[1];\n    return execResult;\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,EAAEC,gBAAgB,EAAEC,yBAAyB,EAAEC,0CAA0C,QAAQ,qBAAqB;AAChJ;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,CAAC;EAChCC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,yBAAyB,GAAG,CAAC,GAAGJ,yBAAyB,EAAE,GAAGD,gBAAgB,EAAED,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC;IACjH,IAAI,CAACO,mBAAmB,GAAG,IAAIC,MAAM,CAACL,0CAA0C,EAAE,GAAG,CAAC;EACxF;EACA;AACF;AACA;AACA;AACA;AACA;EACEM,KAAKA,CAACC,IAAI,EAAEC,WAAW,EAAE;IACvB,IAAI,CAACJ,mBAAmB,CAACK,SAAS,GAAGD,WAAW;IAChD,MAAME,UAAU,GAAG,IAAI,CAACN,mBAAmB,CAACO,IAAI,CAACJ,IAAI,GAAG,GAAG,CAAC;IAC5D,IAAIG,UAAU,IAAI,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MAC/C,OAAO,IAAI;IACb;IACAA,UAAU,CAAC,CAAC,CAAC,GAAGA,UAAU,CAAC,CAAC,CAAC;IAC7B,OAAOA,UAAU;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}