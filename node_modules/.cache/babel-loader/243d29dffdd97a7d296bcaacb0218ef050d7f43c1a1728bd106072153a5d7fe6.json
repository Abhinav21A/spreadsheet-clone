{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { ALL_UNICODE_LETTERS_ARRAY, NAMED_EXPRESSION_PATTERN, R1C1_CELL_REFERENCE_PATTERN } from \"./parser-consts.mjs\";\n/**\r\n * Helper class for recognizing NamedExpression token in text\r\n */\nexport class NamedExpressionMatcher {\n  constructor() {\n    this.POSSIBLE_START_CHARACTERS = [...ALL_UNICODE_LETTERS_ARRAY, '_'];\n    this.namedExpressionRegexp = new RegExp(NAMED_EXPRESSION_PATTERN, 'y');\n    this.r1c1CellRefRegexp = new RegExp(`^${R1C1_CELL_REFERENCE_PATTERN}$`);\n  }\n  /**\r\n   * Method used by the lexer to recognize NamedExpression token in text\r\n   *\r\n   * Note: using 'y' sticky flag for a named expression which is not supported on IE11...\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\r\n   */\n  match(text, startOffset) {\n    this.namedExpressionRegexp.lastIndex = startOffset;\n    const execResult = this.namedExpressionRegexp.exec(text);\n    if (execResult == null || execResult[0] == null) {\n      return null;\n    }\n    if (this.r1c1CellRefRegexp.test(execResult[0])) {\n      return null;\n    }\n    return execResult;\n  }\n}","map":{"version":3,"names":["ALL_UNICODE_LETTERS_ARRAY","NAMED_EXPRESSION_PATTERN","R1C1_CELL_REFERENCE_PATTERN","NamedExpressionMatcher","constructor","POSSIBLE_START_CHARACTERS","namedExpressionRegexp","RegExp","r1c1CellRefRegexp","match","text","startOffset","lastIndex","execResult","exec","test"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/parser/NamedExpressionMatcher.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { ALL_UNICODE_LETTERS_ARRAY, NAMED_EXPRESSION_PATTERN, R1C1_CELL_REFERENCE_PATTERN } from \"./parser-consts.mjs\";\n/**\r\n * Helper class for recognizing NamedExpression token in text\r\n */\nexport class NamedExpressionMatcher {\n  constructor() {\n    this.POSSIBLE_START_CHARACTERS = [...ALL_UNICODE_LETTERS_ARRAY, '_'];\n    this.namedExpressionRegexp = new RegExp(NAMED_EXPRESSION_PATTERN, 'y');\n    this.r1c1CellRefRegexp = new RegExp(`^${R1C1_CELL_REFERENCE_PATTERN}$`);\n  }\n  /**\r\n   * Method used by the lexer to recognize NamedExpression token in text\r\n   *\r\n   * Note: using 'y' sticky flag for a named expression which is not supported on IE11...\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\r\n   */\n  match(text, startOffset) {\n    this.namedExpressionRegexp.lastIndex = startOffset;\n    const execResult = this.namedExpressionRegexp.exec(text);\n    if (execResult == null || execResult[0] == null) {\n      return null;\n    }\n    if (this.r1c1CellRefRegexp.test(execResult[0])) {\n      return null;\n    }\n    return execResult;\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,yBAAyB,EAAEC,wBAAwB,EAAEC,2BAA2B,QAAQ,qBAAqB;AACtH;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,CAAC;EAClCC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,yBAAyB,GAAG,CAAC,GAAGL,yBAAyB,EAAE,GAAG,CAAC;IACpE,IAAI,CAACM,qBAAqB,GAAG,IAAIC,MAAM,CAACN,wBAAwB,EAAE,GAAG,CAAC;IACtE,IAAI,CAACO,iBAAiB,GAAG,IAAID,MAAM,CAAC,IAAIL,2BAA2B,GAAG,CAAC;EACzE;EACA;AACF;AACA;AACA;AACA;AACA;EACEO,KAAKA,CAACC,IAAI,EAAEC,WAAW,EAAE;IACvB,IAAI,CAACL,qBAAqB,CAACM,SAAS,GAAGD,WAAW;IAClD,MAAME,UAAU,GAAG,IAAI,CAACP,qBAAqB,CAACQ,IAAI,CAACJ,IAAI,CAAC;IACxD,IAAIG,UAAU,IAAI,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MAC/C,OAAO,IAAI;IACb;IACA,IAAI,IAAI,CAACL,iBAAiB,CAACO,IAAI,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;MAC9C,OAAO,IAAI;IACb;IACA,OAAOA,UAAU;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}