{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\n/**\r\n * Interpreter plugin containing text-specific functions\r\n */\nexport class TextPlugin extends FunctionPlugin {\n  /**\r\n   * Corresponds to CONCATENATE(value1, [value2, ...])\r\n   *\r\n   * Concatenates provided arguments to one string.\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  concatenate(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CONCATENATE'), (...args) => {\n      return ''.concat(...args);\n    });\n  }\n  /**\r\n   * Corresponds to SPLIT(string, index)\r\n   *\r\n   * Splits provided string using space separator and returns chunk at zero-based position specified by second argument\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  split(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SPLIT'), (stringToSplit, indexToUse) => {\n      const splittedString = stringToSplit.split(' ');\n      if (indexToUse >= splittedString.length || indexToUse < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.IndexBounds);\n      }\n      return splittedString[indexToUse];\n    });\n  }\n  len(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LEN'), arg => {\n      return arg.length;\n    });\n  }\n  lower(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LOWER'), arg => {\n      return arg.toLowerCase();\n    });\n  }\n  trim(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TRIM'), arg => {\n      return arg.replace(/^ +| +$/g, '').replace(/ +/g, ' ');\n    });\n  }\n  proper(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PROPER'), arg => {\n      return arg.replace(/\\p{L}+/gu, word => word.charAt(0).toUpperCase() + word.substring(1).toLowerCase());\n    });\n  }\n  clean(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CLEAN'), arg => {\n      // eslint-disable-next-line no-control-regex\n      return arg.replace(/[\\u0000-\\u001F]/g, '');\n    });\n  }\n  exact(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('EXACT'), (left, right) => {\n      return left === right;\n    });\n  }\n  rept(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('REPT'), (text, count) => {\n      if (count < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeCount);\n      }\n      return text.repeat(count);\n    });\n  }\n  right(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RIGHT'), (text, length) => {\n      if (length < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeLength);\n      } else if (length === 0) {\n        return '';\n      }\n      return text.slice(-length);\n    });\n  }\n  left(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LEFT'), (text, length) => {\n      if (length < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeLength);\n      }\n      return text.slice(0, length);\n    });\n  }\n  mid(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MID'), (text, startPosition, numberOfChars) => {\n      if (startPosition < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      if (numberOfChars < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeLength);\n      }\n      return text.substring(startPosition - 1, startPosition + numberOfChars - 1);\n    });\n  }\n  replace(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('REPLACE'), (text, startPosition, numberOfChars, newText) => {\n      if (startPosition < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      if (numberOfChars < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeLength);\n      }\n      return text.substring(0, startPosition - 1) + newText + text.substring(startPosition + numberOfChars - 1);\n    });\n  }\n  search(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SEARCH'), (pattern, text, startIndex) => {\n      if (startIndex < 1 || startIndex > text.length) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LengthBounds);\n      }\n      const normalizedPattern = pattern.toLowerCase();\n      const normalizedText = text.substring(startIndex - 1).toLowerCase();\n      const index = this.arithmeticHelper.requiresRegex(normalizedPattern) ? this.arithmeticHelper.searchString(normalizedPattern, normalizedText) : normalizedText.indexOf(normalizedPattern);\n      return index > -1 ? index + startIndex : new CellError(ErrorType.VALUE, ErrorMessage.PatternNotFound);\n    });\n  }\n  substitute(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUBSTITUTE'), (text, searchString, replacementString, occurrenceNum) => {\n      const escapedSearchString = this.escapeRegExpSpecialCharacters(searchString);\n      const searchRegExp = new RegExp(escapedSearchString, 'g');\n      if (occurrenceNum === undefined) {\n        return text.replace(searchRegExp, replacementString);\n      }\n      if (occurrenceNum < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      let match;\n      let i = 0;\n      while ((match = searchRegExp.exec(text)) !== null) {\n        if (occurrenceNum === ++i) {\n          return text.substring(0, match.index) + replacementString + text.substring(searchRegExp.lastIndex);\n        }\n      }\n      return text;\n    });\n  }\n  find(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FIND'), (pattern, text, startIndex) => {\n      if (startIndex < 1 || startIndex > text.length) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.IndexBounds);\n      }\n      const shiftedText = text.substring(startIndex - 1);\n      const index = shiftedText.indexOf(pattern) + startIndex;\n      return index > 0 ? index : new CellError(ErrorType.VALUE, ErrorMessage.PatternNotFound);\n    });\n  }\n  t(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T'), arg => {\n      if (arg instanceof CellError) {\n        return arg;\n      }\n      return typeof arg === 'string' ? arg : '';\n    });\n  }\n  upper(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('UPPER'), arg => {\n      return arg.toUpperCase();\n    });\n  }\n  escapeRegExpSpecialCharacters(text) {\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}\nTextPlugin.implementedFunctions = {\n  'CONCATENATE': {\n    method: 'concatenate',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }],\n    repeatLastArgs: 1,\n    expandRanges: true\n  },\n  'EXACT': {\n    method: 'exact',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'SPLIT': {\n    method: 'split',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'LEN': {\n    method: 'len',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'LOWER': {\n    method: 'lower',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'MID': {\n    method: 'mid',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'TRIM': {\n    method: 'trim',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'T': {\n    method: 't',\n    parameters: [{\n      argumentType: FunctionArgumentType.SCALAR\n    }]\n  },\n  'PROPER': {\n    method: 'proper',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'CLEAN': {\n    method: 'clean',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'REPT': {\n    method: 'rept',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'RIGHT': {\n    method: 'right',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'LEFT': {\n    method: 'left',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'REPLACE': {\n    method: 'replace',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'SEARCH': {\n    method: 'search',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'SUBSTITUTE': {\n    method: 'substitute',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true\n    }]\n  },\n  'FIND': {\n    method: 'find',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'UPPER': {\n    method: 'upper',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  }\n};","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","FunctionArgumentType","FunctionPlugin","TextPlugin","concatenate","ast","state","runFunction","args","metadata","concat","split","stringToSplit","indexToUse","splittedString","length","VALUE","IndexBounds","len","arg","lower","toLowerCase","trim","replace","proper","word","charAt","toUpperCase","substring","clean","exact","left","right","rept","text","count","NegativeCount","repeat","NegativeLength","slice","mid","startPosition","numberOfChars","LessThanOne","newText","search","pattern","startIndex","LengthBounds","normalizedPattern","normalizedText","index","arithmeticHelper","requiresRegex","searchString","indexOf","PatternNotFound","substitute","replacementString","occurrenceNum","escapedSearchString","escapeRegExpSpecialCharacters","searchRegExp","RegExp","undefined","match","i","exec","lastIndex","find","shiftedText","t","upper","implementedFunctions","method","parameters","argumentType","STRING","repeatLastArgs","expandRanges","NUMBER","SCALAR","defaultValue","optionalArg"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/TextPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\n/**\r\n * Interpreter plugin containing text-specific functions\r\n */\nexport class TextPlugin extends FunctionPlugin {\n  /**\r\n   * Corresponds to CONCATENATE(value1, [value2, ...])\r\n   *\r\n   * Concatenates provided arguments to one string.\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  concatenate(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CONCATENATE'), (...args) => {\n      return ''.concat(...args);\n    });\n  }\n  /**\r\n   * Corresponds to SPLIT(string, index)\r\n   *\r\n   * Splits provided string using space separator and returns chunk at zero-based position specified by second argument\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  split(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SPLIT'), (stringToSplit, indexToUse) => {\n      const splittedString = stringToSplit.split(' ');\n      if (indexToUse >= splittedString.length || indexToUse < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.IndexBounds);\n      }\n      return splittedString[indexToUse];\n    });\n  }\n  len(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LEN'), arg => {\n      return arg.length;\n    });\n  }\n  lower(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LOWER'), arg => {\n      return arg.toLowerCase();\n    });\n  }\n  trim(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TRIM'), arg => {\n      return arg.replace(/^ +| +$/g, '').replace(/ +/g, ' ');\n    });\n  }\n  proper(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('PROPER'), arg => {\n      return arg.replace(/\\p{L}+/gu, word => word.charAt(0).toUpperCase() + word.substring(1).toLowerCase());\n    });\n  }\n  clean(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CLEAN'), arg => {\n      // eslint-disable-next-line no-control-regex\n      return arg.replace(/[\\u0000-\\u001F]/g, '');\n    });\n  }\n  exact(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('EXACT'), (left, right) => {\n      return left === right;\n    });\n  }\n  rept(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('REPT'), (text, count) => {\n      if (count < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeCount);\n      }\n      return text.repeat(count);\n    });\n  }\n  right(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RIGHT'), (text, length) => {\n      if (length < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeLength);\n      } else if (length === 0) {\n        return '';\n      }\n      return text.slice(-length);\n    });\n  }\n  left(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LEFT'), (text, length) => {\n      if (length < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeLength);\n      }\n      return text.slice(0, length);\n    });\n  }\n  mid(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MID'), (text, startPosition, numberOfChars) => {\n      if (startPosition < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      if (numberOfChars < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeLength);\n      }\n      return text.substring(startPosition - 1, startPosition + numberOfChars - 1);\n    });\n  }\n  replace(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('REPLACE'), (text, startPosition, numberOfChars, newText) => {\n      if (startPosition < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      if (numberOfChars < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.NegativeLength);\n      }\n      return text.substring(0, startPosition - 1) + newText + text.substring(startPosition + numberOfChars - 1);\n    });\n  }\n  search(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SEARCH'), (pattern, text, startIndex) => {\n      if (startIndex < 1 || startIndex > text.length) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LengthBounds);\n      }\n      const normalizedPattern = pattern.toLowerCase();\n      const normalizedText = text.substring(startIndex - 1).toLowerCase();\n      const index = this.arithmeticHelper.requiresRegex(normalizedPattern) ? this.arithmeticHelper.searchString(normalizedPattern, normalizedText) : normalizedText.indexOf(normalizedPattern);\n      return index > -1 ? index + startIndex : new CellError(ErrorType.VALUE, ErrorMessage.PatternNotFound);\n    });\n  }\n  substitute(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUBSTITUTE'), (text, searchString, replacementString, occurrenceNum) => {\n      const escapedSearchString = this.escapeRegExpSpecialCharacters(searchString);\n      const searchRegExp = new RegExp(escapedSearchString, 'g');\n      if (occurrenceNum === undefined) {\n        return text.replace(searchRegExp, replacementString);\n      }\n      if (occurrenceNum < 1) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n      }\n      let match;\n      let i = 0;\n      while ((match = searchRegExp.exec(text)) !== null) {\n        if (occurrenceNum === ++i) {\n          return text.substring(0, match.index) + replacementString + text.substring(searchRegExp.lastIndex);\n        }\n      }\n      return text;\n    });\n  }\n  find(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('FIND'), (pattern, text, startIndex) => {\n      if (startIndex < 1 || startIndex > text.length) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.IndexBounds);\n      }\n      const shiftedText = text.substring(startIndex - 1);\n      const index = shiftedText.indexOf(pattern) + startIndex;\n      return index > 0 ? index : new CellError(ErrorType.VALUE, ErrorMessage.PatternNotFound);\n    });\n  }\n  t(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T'), arg => {\n      if (arg instanceof CellError) {\n        return arg;\n      }\n      return typeof arg === 'string' ? arg : '';\n    });\n  }\n  upper(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('UPPER'), arg => {\n      return arg.toUpperCase();\n    });\n  }\n  escapeRegExpSpecialCharacters(text) {\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}\nTextPlugin.implementedFunctions = {\n  'CONCATENATE': {\n    method: 'concatenate',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }],\n    repeatLastArgs: 1,\n    expandRanges: true\n  },\n  'EXACT': {\n    method: 'exact',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'SPLIT': {\n    method: 'split',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'LEN': {\n    method: 'len',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'LOWER': {\n    method: 'lower',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'MID': {\n    method: 'mid',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'TRIM': {\n    method: 'trim',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'T': {\n    method: 't',\n    parameters: [{\n      argumentType: FunctionArgumentType.SCALAR\n    }]\n  },\n  'PROPER': {\n    method: 'proper',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'CLEAN': {\n    method: 'clean',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'REPT': {\n    method: 'rept',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'RIGHT': {\n    method: 'right',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'LEFT': {\n    method: 'left',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'REPLACE': {\n    method: 'replace',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'SEARCH': {\n    method: 'search',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'SUBSTITUTE': {\n    method: 'substitute',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true\n    }]\n  },\n  'FIND': {\n    method: 'find',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.STRING\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'UPPER': {\n    method: 'upper',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}