{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\n/**\r\n * Represents vertex bound to range\r\n */\nexport class RangeVertex {\n  constructor(range) {\n    this.range = range;\n    this.functionCache = new Map();\n    this.criterionFunctionCache = new Map();\n    this.dependentCacheRanges = new Set();\n    this.bruteForce = false;\n  }\n  get start() {\n    return this.range.start;\n  }\n  get end() {\n    return this.range.end;\n  }\n  get sheet() {\n    return this.range.start.sheet;\n  }\n  /**\r\n   * Returns cached value stored for given function\r\n   *\r\n   * @param functionName - name of the function\r\n   */\n  getFunctionValue(functionName) {\n    return this.functionCache.get(functionName);\n  }\n  /**\r\n   * Stores cached value for given function\r\n   *\r\n   * @param functionName - name of the function\r\n   * @param value - cached value\r\n   */\n  setFunctionValue(functionName, value) {\n    this.functionCache.set(functionName, value);\n  }\n  /**\r\n   * Returns cached value for given cache key and criterion text representation\r\n   *\r\n   * @param cacheKey - key to retrieve from the cache\r\n   * @param criterionString - criterion text (ex. '<=5')\r\n   */\n  getCriterionFunctionValue(cacheKey, criterionString) {\n    var _a;\n    return (_a = this.getCriterionFunctionValues(cacheKey).get(criterionString)) === null || _a === void 0 ? void 0 : _a[0];\n  }\n  /**\r\n   * Returns all cached values stored for given criterion function\r\n   *\r\n   * @param cacheKey - key to retrieve from the cache\r\n   */\n  getCriterionFunctionValues(cacheKey) {\n    var _a;\n    return (_a = this.criterionFunctionCache.get(cacheKey)) !== null && _a !== void 0 ? _a : new Map();\n  }\n  /**\r\n   * Stores all values for given criterion function\r\n   *\r\n   * @param cacheKey - key to store in the cache\r\n   * @param values - map with values\r\n   */\n  setCriterionFunctionValues(cacheKey, values) {\n    this.criterionFunctionCache.set(cacheKey, values);\n  }\n  addDependentCacheRange(dependentRange) {\n    if (dependentRange !== this) {\n      this.dependentCacheRanges.add(dependentRange);\n    }\n  }\n  /**\r\n   * Clears function cache\r\n   */\n  clearCache() {\n    this.functionCache.clear();\n    this.criterionFunctionCache.clear();\n    this.dependentCacheRanges.forEach(range => range.criterionFunctionCache.clear());\n    this.dependentCacheRanges.clear();\n  }\n  /**\r\n   * Returns start of the range (it's top-left corner)\r\n   */\n  getStart() {\n    return this.start;\n  }\n  /**\r\n   * Returns end of the range (it's bottom-right corner)\r\n   */\n  getEnd() {\n    return this.end;\n  }\n}","map":{"version":3,"names":["RangeVertex","constructor","range","functionCache","Map","criterionFunctionCache","dependentCacheRanges","Set","bruteForce","start","end","sheet","getFunctionValue","functionName","get","setFunctionValue","value","set","getCriterionFunctionValue","cacheKey","criterionString","_a","getCriterionFunctionValues","setCriterionFunctionValues","values","addDependentCacheRange","dependentRange","add","clearCache","clear","forEach","getStart","getEnd"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/DependencyGraph/RangeVertex.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\n/**\r\n * Represents vertex bound to range\r\n */\nexport class RangeVertex {\n  constructor(range) {\n    this.range = range;\n    this.functionCache = new Map();\n    this.criterionFunctionCache = new Map();\n    this.dependentCacheRanges = new Set();\n    this.bruteForce = false;\n  }\n  get start() {\n    return this.range.start;\n  }\n  get end() {\n    return this.range.end;\n  }\n  get sheet() {\n    return this.range.start.sheet;\n  }\n  /**\r\n   * Returns cached value stored for given function\r\n   *\r\n   * @param functionName - name of the function\r\n   */\n  getFunctionValue(functionName) {\n    return this.functionCache.get(functionName);\n  }\n  /**\r\n   * Stores cached value for given function\r\n   *\r\n   * @param functionName - name of the function\r\n   * @param value - cached value\r\n   */\n  setFunctionValue(functionName, value) {\n    this.functionCache.set(functionName, value);\n  }\n  /**\r\n   * Returns cached value for given cache key and criterion text representation\r\n   *\r\n   * @param cacheKey - key to retrieve from the cache\r\n   * @param criterionString - criterion text (ex. '<=5')\r\n   */\n  getCriterionFunctionValue(cacheKey, criterionString) {\n    var _a;\n    return (_a = this.getCriterionFunctionValues(cacheKey).get(criterionString)) === null || _a === void 0 ? void 0 : _a[0];\n  }\n  /**\r\n   * Returns all cached values stored for given criterion function\r\n   *\r\n   * @param cacheKey - key to retrieve from the cache\r\n   */\n  getCriterionFunctionValues(cacheKey) {\n    var _a;\n    return (_a = this.criterionFunctionCache.get(cacheKey)) !== null && _a !== void 0 ? _a : new Map();\n  }\n  /**\r\n   * Stores all values for given criterion function\r\n   *\r\n   * @param cacheKey - key to store in the cache\r\n   * @param values - map with values\r\n   */\n  setCriterionFunctionValues(cacheKey, values) {\n    this.criterionFunctionCache.set(cacheKey, values);\n  }\n  addDependentCacheRange(dependentRange) {\n    if (dependentRange !== this) {\n      this.dependentCacheRanges.add(dependentRange);\n    }\n  }\n  /**\r\n   * Clears function cache\r\n   */\n  clearCache() {\n    this.functionCache.clear();\n    this.criterionFunctionCache.clear();\n    this.dependentCacheRanges.forEach(range => range.criterionFunctionCache.clear());\n    this.dependentCacheRanges.clear();\n  }\n  /**\r\n   * Returns start of the range (it's top-left corner)\r\n   */\n  getStart() {\n    return this.start;\n  }\n  /**\r\n   * Returns end of the range (it's bottom-right corner)\r\n   */\n  getEnd() {\n    return this.end;\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,CAAC;EACvBC,WAAWA,CAACC,KAAK,EAAE;IACjB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC9B,IAAI,CAACC,sBAAsB,GAAG,IAAID,GAAG,CAAC,CAAC;IACvC,IAAI,CAACE,oBAAoB,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrC,IAAI,CAACC,UAAU,GAAG,KAAK;EACzB;EACA,IAAIC,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACP,KAAK,CAACO,KAAK;EACzB;EACA,IAAIC,GAAGA,CAAA,EAAG;IACR,OAAO,IAAI,CAACR,KAAK,CAACQ,GAAG;EACvB;EACA,IAAIC,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACT,KAAK,CAACO,KAAK,CAACE,KAAK;EAC/B;EACA;AACF;AACA;AACA;AACA;EACEC,gBAAgBA,CAACC,YAAY,EAAE;IAC7B,OAAO,IAAI,CAACV,aAAa,CAACW,GAAG,CAACD,YAAY,CAAC;EAC7C;EACA;AACF;AACA;AACA;AACA;AACA;EACEE,gBAAgBA,CAACF,YAAY,EAAEG,KAAK,EAAE;IACpC,IAAI,CAACb,aAAa,CAACc,GAAG,CAACJ,YAAY,EAAEG,KAAK,CAAC;EAC7C;EACA;AACF;AACA;AACA;AACA;AACA;EACEE,yBAAyBA,CAACC,QAAQ,EAAEC,eAAe,EAAE;IACnD,IAAIC,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAACC,0BAA0B,CAACH,QAAQ,CAAC,CAACL,GAAG,CAACM,eAAe,CAAC,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC;EACzH;EACA;AACF;AACA;AACA;AACA;EACEC,0BAA0BA,CAACH,QAAQ,EAAE;IACnC,IAAIE,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAAChB,sBAAsB,CAACS,GAAG,CAACK,QAAQ,CAAC,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAIjB,GAAG,CAAC,CAAC;EACpG;EACA;AACF;AACA;AACA;AACA;AACA;EACEmB,0BAA0BA,CAACJ,QAAQ,EAAEK,MAAM,EAAE;IAC3C,IAAI,CAACnB,sBAAsB,CAACY,GAAG,CAACE,QAAQ,EAAEK,MAAM,CAAC;EACnD;EACAC,sBAAsBA,CAACC,cAAc,EAAE;IACrC,IAAIA,cAAc,KAAK,IAAI,EAAE;MAC3B,IAAI,CAACpB,oBAAoB,CAACqB,GAAG,CAACD,cAAc,CAAC;IAC/C;EACF;EACA;AACF;AACA;EACEE,UAAUA,CAAA,EAAG;IACX,IAAI,CAACzB,aAAa,CAAC0B,KAAK,CAAC,CAAC;IAC1B,IAAI,CAACxB,sBAAsB,CAACwB,KAAK,CAAC,CAAC;IACnC,IAAI,CAACvB,oBAAoB,CAACwB,OAAO,CAAC5B,KAAK,IAAIA,KAAK,CAACG,sBAAsB,CAACwB,KAAK,CAAC,CAAC,CAAC;IAChF,IAAI,CAACvB,oBAAoB,CAACuB,KAAK,CAAC,CAAC;EACnC;EACA;AACF;AACA;EACEE,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACtB,KAAK;EACnB;EACA;AACF;AACA;EACEuB,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACtB,GAAG;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}