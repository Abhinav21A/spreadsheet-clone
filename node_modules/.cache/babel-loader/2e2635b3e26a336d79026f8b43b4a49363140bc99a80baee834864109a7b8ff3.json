{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError } from \"../../Cell.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\n/**\r\n * Interpreter plugin containing COUNTUNIQUE function\r\n */\nexport class CountUniquePlugin extends FunctionPlugin {\n  /**\r\n   * Corresponds to COUNTUNIQUE(Number1, Number2, ...).\r\n   *\r\n   * Returns number of unique numbers from arguments\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  countunique(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COUNTUNIQUE'), (...args) => {\n      const valuesSet = new Set();\n      const errorsSet = new Set();\n      for (const scalarValue of args) {\n        if (scalarValue instanceof CellError) {\n          errorsSet.add(scalarValue.type);\n        } else if (scalarValue !== '') {\n          valuesSet.add(scalarValue);\n        }\n      }\n      return valuesSet.size + errorsSet.size;\n    });\n  }\n}\nCountUniquePlugin.implementedFunctions = {\n  'COUNTUNIQUE': {\n    method: 'countunique',\n    parameters: [{\n      argumentType: FunctionArgumentType.SCALAR\n    }],\n    repeatLastArgs: 1,\n    expandRanges: true\n  }\n};","map":{"version":3,"names":["CellError","FunctionArgumentType","FunctionPlugin","CountUniquePlugin","countunique","ast","state","runFunction","args","metadata","valuesSet","Set","errorsSet","scalarValue","add","type","size","implementedFunctions","method","parameters","argumentType","SCALAR","repeatLastArgs","expandRanges"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/CountUniquePlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError } from \"../../Cell.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\n/**\r\n * Interpreter plugin containing COUNTUNIQUE function\r\n */\nexport class CountUniquePlugin extends FunctionPlugin {\n  /**\r\n   * Corresponds to COUNTUNIQUE(Number1, Number2, ...).\r\n   *\r\n   * Returns number of unique numbers from arguments\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  countunique(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COUNTUNIQUE'), (...args) => {\n      const valuesSet = new Set();\n      const errorsSet = new Set();\n      for (const scalarValue of args) {\n        if (scalarValue instanceof CellError) {\n          errorsSet.add(scalarValue.type);\n        } else if (scalarValue !== '') {\n          valuesSet.add(scalarValue);\n        }\n      }\n      return valuesSet.size + errorsSet.size;\n    });\n  }\n}\nCountUniquePlugin.implementedFunctions = {\n  'COUNTUNIQUE': {\n    method: 'countunique',\n    parameters: [{\n      argumentType: FunctionArgumentType.SCALAR\n    }],\n    repeatLastArgs: 1,\n    expandRanges: true\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,sBAAsB;AAC3E;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,SAASD,cAAc,CAAC;EACpD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC,GAAGD,IAAI,KAAK;MAClF,MAAME,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC3B,MAAMC,SAAS,GAAG,IAAID,GAAG,CAAC,CAAC;MAC3B,KAAK,MAAME,WAAW,IAAIL,IAAI,EAAE;QAC9B,IAAIK,WAAW,YAAYb,SAAS,EAAE;UACpCY,SAAS,CAACE,GAAG,CAACD,WAAW,CAACE,IAAI,CAAC;QACjC,CAAC,MAAM,IAAIF,WAAW,KAAK,EAAE,EAAE;UAC7BH,SAAS,CAACI,GAAG,CAACD,WAAW,CAAC;QAC5B;MACF;MACA,OAAOH,SAAS,CAACM,IAAI,GAAGJ,SAAS,CAACI,IAAI;IACxC,CAAC,CAAC;EACJ;AACF;AACAb,iBAAiB,CAACc,oBAAoB,GAAG;EACvC,aAAa,EAAE;IACbC,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAEnB,oBAAoB,CAACoB;IACrC,CAAC,CAAC;IACFC,cAAc,EAAE,CAAC;IACjBC,YAAY,EAAE;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}