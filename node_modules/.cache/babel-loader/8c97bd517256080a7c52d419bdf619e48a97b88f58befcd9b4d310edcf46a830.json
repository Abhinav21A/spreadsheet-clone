{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { getRawValue } from \"../InterpreterValue.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class RomanPlugin extends FunctionPlugin {\n  roman(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ROMAN'), (val, mode) => {\n      val = Math.trunc(val);\n      if (mode === false) {\n        mode = 4;\n      } else if (mode === true) {\n        mode = 0;\n      }\n      mode = getRawValue(this.coerceScalarToNumberOrError(mode));\n      if (mode instanceof CellError) {\n        return mode;\n      }\n      mode = Math.trunc(mode);\n      if (mode < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ValueSmall);\n      }\n      if (mode > 4) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ValueLarge);\n      }\n      return romanMode(val, mode);\n    });\n  }\n  arabic(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ARABIC'), inputString => {\n      inputString = inputString.trim().toUpperCase();\n      let minusSign = false;\n      if (inputString.startsWith('-')) {\n        inputString = inputString.slice(1);\n        minusSign = true;\n        if (inputString === '') {\n          return new CellError(ErrorType.VALUE, ErrorMessage.InvalidRoman);\n        }\n      }\n      const work = {\n        input: inputString,\n        acc: 0\n      };\n      eatToken(work, {\n        token: 'MMM',\n        val: 3000\n      }, {\n        token: 'MM',\n        val: 2000\n      }, {\n        token: 'M',\n        val: 1000\n      });\n      eatToken(work, {\n        token: 'IM',\n        val: 999\n      }, {\n        token: 'VM',\n        val: 995\n      }, {\n        token: 'XM',\n        val: 990\n      }, {\n        token: 'LM',\n        val: 950\n      }, {\n        token: 'CM',\n        val: 900\n      });\n      eatToken(work, {\n        token: 'D',\n        val: 500\n      }, {\n        token: 'ID',\n        val: 499\n      }, {\n        token: 'VD',\n        val: 495\n      }, {\n        token: 'XD',\n        val: 490\n      }, {\n        token: 'LD',\n        val: 450\n      }, {\n        token: 'CD',\n        val: 400\n      });\n      eatToken(work, {\n        token: 'CCC',\n        val: 300\n      }, {\n        token: 'CC',\n        val: 200\n      }, {\n        token: 'C',\n        val: 100\n      });\n      eatToken(work, {\n        token: 'IC',\n        val: 99\n      }, {\n        token: 'VC',\n        val: 95\n      }, {\n        token: 'XC',\n        val: 90\n      });\n      eatToken(work, {\n        token: 'L',\n        val: 50\n      }, {\n        token: 'IL',\n        val: 49\n      }, {\n        token: 'VL',\n        val: 45\n      }, {\n        token: 'XL',\n        val: 40\n      });\n      eatToken(work, {\n        token: 'XXX',\n        val: 30\n      }, {\n        token: 'XX',\n        val: 20\n      }, {\n        token: 'X',\n        val: 10\n      });\n      eatToken(work, {\n        token: 'IX',\n        val: 9\n      });\n      eatToken(work, {\n        token: 'V',\n        val: 5\n      }, {\n        token: 'IV',\n        val: 4\n      });\n      eatToken(work, {\n        token: 'III',\n        val: 3\n      }, {\n        token: 'II',\n        val: 2\n      }, {\n        token: 'I',\n        val: 1\n      });\n      if (work.input !== '') {\n        return new CellError(ErrorType.VALUE, ErrorMessage.InvalidRoman);\n      } else {\n        return minusSign ? -work.acc : work.acc;\n      }\n    });\n  }\n}\nRomanPlugin.implementedFunctions = {\n  'ROMAN': {\n    method: 'roman',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1,\n      lessThan: 4000\n    }, {\n      argumentType: FunctionArgumentType.NOERROR,\n      optionalArg: true,\n      defaultValue: 0\n    }]\n  },\n  'ARABIC': {\n    method: 'arabic',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  }\n};\nfunction eatToken(inputAcc, ...tokens) {\n  for (const token of tokens) {\n    if (inputAcc.input.startsWith(token.token)) {\n      inputAcc.input = inputAcc.input.slice(token.token.length);\n      inputAcc.acc += token.val;\n      break;\n    }\n  }\n}\nfunction romanMode(input, mode) {\n  const work = {\n    val: input % 1000,\n    acc: 'M'.repeat(Math.floor(input / 1000))\n  };\n  if (mode === 4) {\n    absorb(work, 'IM', 999, 1000);\n    absorb(work, 'ID', 499, 500);\n  }\n  if (mode >= 3) {\n    absorb(work, 'VM', 995, 1000);\n    absorb(work, 'VD', 495, 500);\n  }\n  if (mode >= 2) {\n    absorb(work, 'XM', 990, 1000);\n    absorb(work, 'XD', 490, 500);\n  }\n  if (mode >= 1) {\n    absorb(work, 'LM', 950, 1000);\n    absorb(work, 'LD', 450, 500);\n  }\n  absorb(work, 'CM', 900, 1000);\n  absorb(work, 'CD', 400, 500);\n  absorb(work, 'D', 500, 900);\n  work.acc += 'C'.repeat(Math.floor(work.val / 100));\n  work.val %= 100;\n  if (mode >= 2) {\n    absorb(work, 'IC', 99, 100);\n    absorb(work, 'IL', 49, 50);\n  }\n  if (mode >= 1) {\n    absorb(work, 'VC', 95, 100);\n    absorb(work, 'VL', 45, 50);\n  }\n  absorb(work, 'XC', 90, 100);\n  absorb(work, 'XL', 40, 50);\n  absorb(work, 'L', 50, 90);\n  work.acc += 'X'.repeat(Math.floor(work.val / 10));\n  work.val %= 10;\n  absorb(work, 'IX', 9, 10);\n  absorb(work, 'IV', 4, 5);\n  absorb(work, 'V', 5, 9);\n  work.acc += 'I'.repeat(work.val);\n  return work.acc;\n}\nfunction absorb(valAcc, token, lower, upper) {\n  if (valAcc.val >= lower && valAcc.val < upper) {\n    valAcc.val -= lower;\n    valAcc.acc += token;\n  }\n}","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","getRawValue","FunctionArgumentType","FunctionPlugin","RomanPlugin","roman","ast","state","runFunction","args","metadata","val","mode","Math","trunc","coerceScalarToNumberOrError","VALUE","ValueSmall","ValueLarge","romanMode","arabic","inputString","trim","toUpperCase","minusSign","startsWith","slice","InvalidRoman","work","input","acc","eatToken","token","implementedFunctions","method","parameters","argumentType","NUMBER","minValue","lessThan","NOERROR","optionalArg","defaultValue","STRING","inputAcc","tokens","length","repeat","floor","absorb","valAcc","lower","upper"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/RomanPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { getRawValue } from \"../InterpreterValue.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class RomanPlugin extends FunctionPlugin {\n  roman(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ROMAN'), (val, mode) => {\n      val = Math.trunc(val);\n      if (mode === false) {\n        mode = 4;\n      } else if (mode === true) {\n        mode = 0;\n      }\n      mode = getRawValue(this.coerceScalarToNumberOrError(mode));\n      if (mode instanceof CellError) {\n        return mode;\n      }\n      mode = Math.trunc(mode);\n      if (mode < 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ValueSmall);\n      }\n      if (mode > 4) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ValueLarge);\n      }\n      return romanMode(val, mode);\n    });\n  }\n  arabic(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ARABIC'), inputString => {\n      inputString = inputString.trim().toUpperCase();\n      let minusSign = false;\n      if (inputString.startsWith('-')) {\n        inputString = inputString.slice(1);\n        minusSign = true;\n        if (inputString === '') {\n          return new CellError(ErrorType.VALUE, ErrorMessage.InvalidRoman);\n        }\n      }\n      const work = {\n        input: inputString,\n        acc: 0\n      };\n      eatToken(work, {\n        token: 'MMM',\n        val: 3000\n      }, {\n        token: 'MM',\n        val: 2000\n      }, {\n        token: 'M',\n        val: 1000\n      });\n      eatToken(work, {\n        token: 'IM',\n        val: 999\n      }, {\n        token: 'VM',\n        val: 995\n      }, {\n        token: 'XM',\n        val: 990\n      }, {\n        token: 'LM',\n        val: 950\n      }, {\n        token: 'CM',\n        val: 900\n      });\n      eatToken(work, {\n        token: 'D',\n        val: 500\n      }, {\n        token: 'ID',\n        val: 499\n      }, {\n        token: 'VD',\n        val: 495\n      }, {\n        token: 'XD',\n        val: 490\n      }, {\n        token: 'LD',\n        val: 450\n      }, {\n        token: 'CD',\n        val: 400\n      });\n      eatToken(work, {\n        token: 'CCC',\n        val: 300\n      }, {\n        token: 'CC',\n        val: 200\n      }, {\n        token: 'C',\n        val: 100\n      });\n      eatToken(work, {\n        token: 'IC',\n        val: 99\n      }, {\n        token: 'VC',\n        val: 95\n      }, {\n        token: 'XC',\n        val: 90\n      });\n      eatToken(work, {\n        token: 'L',\n        val: 50\n      }, {\n        token: 'IL',\n        val: 49\n      }, {\n        token: 'VL',\n        val: 45\n      }, {\n        token: 'XL',\n        val: 40\n      });\n      eatToken(work, {\n        token: 'XXX',\n        val: 30\n      }, {\n        token: 'XX',\n        val: 20\n      }, {\n        token: 'X',\n        val: 10\n      });\n      eatToken(work, {\n        token: 'IX',\n        val: 9\n      });\n      eatToken(work, {\n        token: 'V',\n        val: 5\n      }, {\n        token: 'IV',\n        val: 4\n      });\n      eatToken(work, {\n        token: 'III',\n        val: 3\n      }, {\n        token: 'II',\n        val: 2\n      }, {\n        token: 'I',\n        val: 1\n      });\n      if (work.input !== '') {\n        return new CellError(ErrorType.VALUE, ErrorMessage.InvalidRoman);\n      } else {\n        return minusSign ? -work.acc : work.acc;\n      }\n    });\n  }\n}\nRomanPlugin.implementedFunctions = {\n  'ROMAN': {\n    method: 'roman',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1,\n      lessThan: 4000\n    }, {\n      argumentType: FunctionArgumentType.NOERROR,\n      optionalArg: true,\n      defaultValue: 0\n    }]\n  },\n  'ARABIC': {\n    method: 'arabic',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  }\n};\nfunction eatToken(inputAcc, ...tokens) {\n  for (const token of tokens) {\n    if (inputAcc.input.startsWith(token.token)) {\n      inputAcc.input = inputAcc.input.slice(token.token.length);\n      inputAcc.acc += token.val;\n      break;\n    }\n  }\n}\nfunction romanMode(input, mode) {\n  const work = {\n    val: input % 1000,\n    acc: 'M'.repeat(Math.floor(input / 1000))\n  };\n  if (mode === 4) {\n    absorb(work, 'IM', 999, 1000);\n    absorb(work, 'ID', 499, 500);\n  }\n  if (mode >= 3) {\n    absorb(work, 'VM', 995, 1000);\n    absorb(work, 'VD', 495, 500);\n  }\n  if (mode >= 2) {\n    absorb(work, 'XM', 990, 1000);\n    absorb(work, 'XD', 490, 500);\n  }\n  if (mode >= 1) {\n    absorb(work, 'LM', 950, 1000);\n    absorb(work, 'LD', 450, 500);\n  }\n  absorb(work, 'CM', 900, 1000);\n  absorb(work, 'CD', 400, 500);\n  absorb(work, 'D', 500, 900);\n  work.acc += 'C'.repeat(Math.floor(work.val / 100));\n  work.val %= 100;\n  if (mode >= 2) {\n    absorb(work, 'IC', 99, 100);\n    absorb(work, 'IL', 49, 50);\n  }\n  if (mode >= 1) {\n    absorb(work, 'VC', 95, 100);\n    absorb(work, 'VL', 45, 50);\n  }\n  absorb(work, 'XC', 90, 100);\n  absorb(work, 'XL', 40, 50);\n  absorb(work, 'L', 50, 90);\n  work.acc += 'X'.repeat(Math.floor(work.val / 10));\n  work.val %= 10;\n  absorb(work, 'IX', 9, 10);\n  absorb(work, 'IV', 4, 5);\n  absorb(work, 'V', 5, 9);\n  work.acc += 'I'.repeat(work.val);\n  return work.acc;\n}\nfunction absorb(valAcc, token, lower, upper) {\n  if (valAcc.val >= lower && valAcc.val < upper) {\n    valAcc.val -= lower;\n    valAcc.acc += token;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}