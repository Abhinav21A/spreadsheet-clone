{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { AbsoluteCellRange } from \"./AbsoluteCellRange.mjs\";\nimport { invalidSimpleCellAddress, simpleCellAddress } from \"./Cell.mjs\";\nimport { InvalidArgumentsError, SheetSizeLimitExceededError } from \"./errors.mjs\";\nvar ClipboardOperationType;\n(function (ClipboardOperationType) {\n  ClipboardOperationType[ClipboardOperationType[\"COPY\"] = 0] = \"COPY\";\n  ClipboardOperationType[ClipboardOperationType[\"CUT\"] = 1] = \"CUT\";\n})(ClipboardOperationType || (ClipboardOperationType = {}));\nexport var ClipboardCellType;\n(function (ClipboardCellType) {\n  ClipboardCellType[ClipboardCellType[\"VALUE\"] = 0] = \"VALUE\";\n  ClipboardCellType[ClipboardCellType[\"EMPTY\"] = 1] = \"EMPTY\";\n  ClipboardCellType[ClipboardCellType[\"FORMULA\"] = 2] = \"FORMULA\";\n  ClipboardCellType[ClipboardCellType[\"PARSING_ERROR\"] = 3] = \"PARSING_ERROR\";\n})(ClipboardCellType || (ClipboardCellType = {}));\nclass Clipboard {\n  constructor(sourceLeftCorner, width, height, type, content) {\n    this.sourceLeftCorner = sourceLeftCorner;\n    this.width = width;\n    this.height = height;\n    this.type = type;\n    this.content = content;\n  }\n  *getContent(leftCorner) {\n    if (this.content === undefined) {\n      return;\n    } else {\n      for (let y = 0; y < this.height; ++y) {\n        for (let x = 0; x < this.width; ++x) {\n          yield [simpleCellAddress(leftCorner.sheet, leftCorner.col + x, leftCorner.row + y), this.content[y][x]];\n        }\n      }\n    }\n  }\n}\nexport class ClipboardOperations {\n  constructor(config, dependencyGraph, operations) {\n    this.dependencyGraph = dependencyGraph;\n    this.operations = operations;\n    this.maxRows = config.maxRows;\n    this.maxColumns = config.maxColumns;\n  }\n  cut(leftCorner, width, height) {\n    this.clipboard = new Clipboard(leftCorner, width, height, ClipboardOperationType.CUT);\n  }\n  copy(leftCorner, width, height) {\n    const content = [];\n    for (let y = 0; y < height; ++y) {\n      content[y] = [];\n      for (let x = 0; x < width; ++x) {\n        const clipboardCell = this.operations.getClipboardCell(simpleCellAddress(leftCorner.sheet, leftCorner.col + x, leftCorner.row + y));\n        content[y].push(clipboardCell);\n      }\n    }\n    this.clipboard = new Clipboard(leftCorner, width, height, ClipboardOperationType.COPY, content);\n  }\n  abortCut() {\n    if (this.clipboard && this.clipboard.type === ClipboardOperationType.CUT) {\n      this.clear();\n    }\n  }\n  clear() {\n    this.clipboard = undefined;\n  }\n  ensureItIsPossibleToCopyPaste(destinationLeftCorner) {\n    if (this.clipboard === undefined) {\n      return;\n    }\n    if (invalidSimpleCellAddress(destinationLeftCorner) || !this.dependencyGraph.sheetMapping.hasSheetWithId(destinationLeftCorner.sheet)) {\n      throw new InvalidArgumentsError('a valid target address.');\n    }\n    const targetRange = AbsoluteCellRange.spanFrom(destinationLeftCorner, this.clipboard.width, this.clipboard.height);\n    if (targetRange.exceedsSheetSizeLimits(this.maxColumns, this.maxRows)) {\n      throw new SheetSizeLimitExceededError();\n    }\n    if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(targetRange)) {\n      throw new Error('It is not possible to paste onto an array');\n    }\n  }\n  isCutClipboard() {\n    return this.clipboard !== undefined && this.clipboard.type === ClipboardOperationType.CUT;\n  }\n  isCopyClipboard() {\n    return this.clipboard !== undefined && this.clipboard.type === ClipboardOperationType.COPY;\n  }\n}","map":{"version":3,"names":["AbsoluteCellRange","invalidSimpleCellAddress","simpleCellAddress","InvalidArgumentsError","SheetSizeLimitExceededError","ClipboardOperationType","ClipboardCellType","Clipboard","constructor","sourceLeftCorner","width","height","type","content","getContent","leftCorner","undefined","y","x","sheet","col","row","ClipboardOperations","config","dependencyGraph","operations","maxRows","maxColumns","cut","clipboard","CUT","copy","clipboardCell","getClipboardCell","push","COPY","abortCut","clear","ensureItIsPossibleToCopyPaste","destinationLeftCorner","sheetMapping","hasSheetWithId","targetRange","spanFrom","exceedsSheetSizeLimits","arrayMapping","isFormulaArrayInRange","Error","isCutClipboard","isCopyClipboard"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/ClipboardOperations.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { AbsoluteCellRange } from \"./AbsoluteCellRange.mjs\";\nimport { invalidSimpleCellAddress, simpleCellAddress } from \"./Cell.mjs\";\nimport { InvalidArgumentsError, SheetSizeLimitExceededError } from \"./errors.mjs\";\nvar ClipboardOperationType;\n(function (ClipboardOperationType) {\n  ClipboardOperationType[ClipboardOperationType[\"COPY\"] = 0] = \"COPY\";\n  ClipboardOperationType[ClipboardOperationType[\"CUT\"] = 1] = \"CUT\";\n})(ClipboardOperationType || (ClipboardOperationType = {}));\nexport var ClipboardCellType;\n(function (ClipboardCellType) {\n  ClipboardCellType[ClipboardCellType[\"VALUE\"] = 0] = \"VALUE\";\n  ClipboardCellType[ClipboardCellType[\"EMPTY\"] = 1] = \"EMPTY\";\n  ClipboardCellType[ClipboardCellType[\"FORMULA\"] = 2] = \"FORMULA\";\n  ClipboardCellType[ClipboardCellType[\"PARSING_ERROR\"] = 3] = \"PARSING_ERROR\";\n})(ClipboardCellType || (ClipboardCellType = {}));\nclass Clipboard {\n  constructor(sourceLeftCorner, width, height, type, content) {\n    this.sourceLeftCorner = sourceLeftCorner;\n    this.width = width;\n    this.height = height;\n    this.type = type;\n    this.content = content;\n  }\n  *getContent(leftCorner) {\n    if (this.content === undefined) {\n      return;\n    } else {\n      for (let y = 0; y < this.height; ++y) {\n        for (let x = 0; x < this.width; ++x) {\n          yield [simpleCellAddress(leftCorner.sheet, leftCorner.col + x, leftCorner.row + y), this.content[y][x]];\n        }\n      }\n    }\n  }\n}\nexport class ClipboardOperations {\n  constructor(config, dependencyGraph, operations) {\n    this.dependencyGraph = dependencyGraph;\n    this.operations = operations;\n    this.maxRows = config.maxRows;\n    this.maxColumns = config.maxColumns;\n  }\n  cut(leftCorner, width, height) {\n    this.clipboard = new Clipboard(leftCorner, width, height, ClipboardOperationType.CUT);\n  }\n  copy(leftCorner, width, height) {\n    const content = [];\n    for (let y = 0; y < height; ++y) {\n      content[y] = [];\n      for (let x = 0; x < width; ++x) {\n        const clipboardCell = this.operations.getClipboardCell(simpleCellAddress(leftCorner.sheet, leftCorner.col + x, leftCorner.row + y));\n        content[y].push(clipboardCell);\n      }\n    }\n    this.clipboard = new Clipboard(leftCorner, width, height, ClipboardOperationType.COPY, content);\n  }\n  abortCut() {\n    if (this.clipboard && this.clipboard.type === ClipboardOperationType.CUT) {\n      this.clear();\n    }\n  }\n  clear() {\n    this.clipboard = undefined;\n  }\n  ensureItIsPossibleToCopyPaste(destinationLeftCorner) {\n    if (this.clipboard === undefined) {\n      return;\n    }\n    if (invalidSimpleCellAddress(destinationLeftCorner) || !this.dependencyGraph.sheetMapping.hasSheetWithId(destinationLeftCorner.sheet)) {\n      throw new InvalidArgumentsError('a valid target address.');\n    }\n    const targetRange = AbsoluteCellRange.spanFrom(destinationLeftCorner, this.clipboard.width, this.clipboard.height);\n    if (targetRange.exceedsSheetSizeLimits(this.maxColumns, this.maxRows)) {\n      throw new SheetSizeLimitExceededError();\n    }\n    if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(targetRange)) {\n      throw new Error('It is not possible to paste onto an array');\n    }\n  }\n  isCutClipboard() {\n    return this.clipboard !== undefined && this.clipboard.type === ClipboardOperationType.CUT;\n  }\n  isCopyClipboard() {\n    return this.clipboard !== undefined && this.clipboard.type === ClipboardOperationType.COPY;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}