{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { getRawValue, isExtendedNumber } from \"../InterpreterValue.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class SumprodPlugin extends FunctionPlugin {\n  sumproduct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMPRODUCT'), (...args) => {\n      const width = args[0].width();\n      const height = args[0].height();\n      for (const arg of args) {\n        if (arg.width() !== width || arg.height() !== height) {\n          return new CellError(ErrorType.VALUE, ErrorMessage.EqualLength);\n        }\n      }\n      let ret = 0;\n      const iterators = args.map(arg => arg.iterateValuesFromTopLeftCorner());\n      for (let i = 0; i < width * height; i++) {\n        let acc = 1;\n        for (const it of iterators) {\n          const val = it.next().value;\n          if (val instanceof CellError) {\n            return val;\n          }\n          const coercedVal = this.coerceScalarToNumberOrError(val);\n          if (isExtendedNumber(coercedVal)) {\n            acc *= getRawValue(coercedVal);\n          } else {\n            acc = 0;\n          }\n        }\n        ret += acc;\n      }\n      return ret;\n    });\n  }\n}\nSumprodPlugin.implementedFunctions = {\n  'SUMPRODUCT': {\n    method: 'sumproduct',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }],\n    repeatLastArgs: 1\n  }\n};","map":{"version":3,"names":["CellError","ErrorType","ErrorMessage","getRawValue","isExtendedNumber","FunctionArgumentType","FunctionPlugin","SumprodPlugin","sumproduct","ast","state","runFunction","args","metadata","width","height","arg","VALUE","EqualLength","ret","iterators","map","iterateValuesFromTopLeftCorner","i","acc","it","val","next","value","coercedVal","coerceScalarToNumberOrError","implementedFunctions","method","parameters","argumentType","RANGE","repeatLastArgs"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/interpreter/plugin/SumprodPlugin.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from \"../../Cell.mjs\";\nimport { ErrorMessage } from \"../../error-message.mjs\";\nimport { getRawValue, isExtendedNumber } from \"../InterpreterValue.mjs\";\nimport { FunctionArgumentType, FunctionPlugin } from \"./FunctionPlugin.mjs\";\nexport class SumprodPlugin extends FunctionPlugin {\n  sumproduct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMPRODUCT'), (...args) => {\n      const width = args[0].width();\n      const height = args[0].height();\n      for (const arg of args) {\n        if (arg.width() !== width || arg.height() !== height) {\n          return new CellError(ErrorType.VALUE, ErrorMessage.EqualLength);\n        }\n      }\n      let ret = 0;\n      const iterators = args.map(arg => arg.iterateValuesFromTopLeftCorner());\n      for (let i = 0; i < width * height; i++) {\n        let acc = 1;\n        for (const it of iterators) {\n          const val = it.next().value;\n          if (val instanceof CellError) {\n            return val;\n          }\n          const coercedVal = this.coerceScalarToNumberOrError(val);\n          if (isExtendedNumber(coercedVal)) {\n            acc *= getRawValue(coercedVal);\n          } else {\n            acc = 0;\n          }\n        }\n        ret += acc;\n      }\n      return ret;\n    });\n  }\n}\nSumprodPlugin.implementedFunctions = {\n  'SUMPRODUCT': {\n    method: 'sumproduct',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }],\n    repeatLastArgs: 1\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AACrD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,yBAAyB;AACvE,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,sBAAsB;AAC3E,OAAO,MAAMC,aAAa,SAASD,cAAc,CAAC;EAChDE,UAAUA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACrB,OAAO,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,IAAI,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,GAAGD,IAAI,KAAK;MACjF,MAAME,KAAK,GAAGF,IAAI,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC;MAC7B,MAAMC,MAAM,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC;MAC/B,KAAK,MAAMC,GAAG,IAAIJ,IAAI,EAAE;QACtB,IAAII,GAAG,CAACF,KAAK,CAAC,CAAC,KAAKA,KAAK,IAAIE,GAAG,CAACD,MAAM,CAAC,CAAC,KAAKA,MAAM,EAAE;UACpD,OAAO,IAAIf,SAAS,CAACC,SAAS,CAACgB,KAAK,EAAEf,YAAY,CAACgB,WAAW,CAAC;QACjE;MACF;MACA,IAAIC,GAAG,GAAG,CAAC;MACX,MAAMC,SAAS,GAAGR,IAAI,CAACS,GAAG,CAACL,GAAG,IAAIA,GAAG,CAACM,8BAA8B,CAAC,CAAC,CAAC;MACvE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,GAAGC,MAAM,EAAEQ,CAAC,EAAE,EAAE;QACvC,IAAIC,GAAG,GAAG,CAAC;QACX,KAAK,MAAMC,EAAE,IAAIL,SAAS,EAAE;UAC1B,MAAMM,GAAG,GAAGD,EAAE,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK;UAC3B,IAAIF,GAAG,YAAY1B,SAAS,EAAE;YAC5B,OAAO0B,GAAG;UACZ;UACA,MAAMG,UAAU,GAAG,IAAI,CAACC,2BAA2B,CAACJ,GAAG,CAAC;UACxD,IAAItB,gBAAgB,CAACyB,UAAU,CAAC,EAAE;YAChCL,GAAG,IAAIrB,WAAW,CAAC0B,UAAU,CAAC;UAChC,CAAC,MAAM;YACLL,GAAG,GAAG,CAAC;UACT;QACF;QACAL,GAAG,IAAIK,GAAG;MACZ;MACA,OAAOL,GAAG;IACZ,CAAC,CAAC;EACJ;AACF;AACAZ,aAAa,CAACwB,oBAAoB,GAAG;EACnC,YAAY,EAAE;IACZC,MAAM,EAAE,YAAY;IACpBC,UAAU,EAAE,CAAC;MACXC,YAAY,EAAE7B,oBAAoB,CAAC8B;IACrC,CAAC,CAAC;IACFC,cAAc,EAAE;EAClB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}