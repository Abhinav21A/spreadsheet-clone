{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { ArraySizePredictor } from \"./ArraySize.mjs\";\nimport { CellContentParser } from \"./CellContentParser.mjs\";\nimport { ClipboardOperations } from \"./ClipboardOperations.mjs\";\nimport { Config } from \"./Config.mjs\";\nimport { CrudOperations } from \"./CrudOperations.mjs\";\nimport { DateTimeHelper } from \"./DateTimeHelper.mjs\";\nimport { DependencyGraph } from \"./DependencyGraph/index.mjs\";\nimport { SheetSizeLimitExceededError } from \"./errors.mjs\";\nimport { Evaluator } from \"./Evaluator.mjs\";\nimport { Exporter } from \"./Exporter.mjs\";\nimport { GraphBuilder } from \"./GraphBuilder.mjs\";\nimport { UIElement } from \"./i18n/index.mjs\";\nimport { ArithmeticHelper } from \"./interpreter/ArithmeticHelper.mjs\";\nimport { FunctionRegistry } from \"./interpreter/FunctionRegistry.mjs\";\nimport { Interpreter } from \"./interpreter/Interpreter.mjs\";\nimport { LazilyTransformingAstService } from \"./LazilyTransformingAstService.mjs\";\nimport { buildColumnSearchStrategy } from \"./Lookup/SearchStrategy.mjs\";\nimport { NamedExpressions } from \"./NamedExpressions.mjs\";\nimport { NumberLiteralHelper } from \"./NumberLiteralHelper.mjs\";\nimport { Operations } from \"./Operations.mjs\";\nimport { buildLexerConfig, ParserWithCaching, Unparser } from \"./parser/index.mjs\";\nimport { Serialization } from \"./Serialization.mjs\";\nimport { findBoundaries, validateAsSheet } from \"./Sheet.mjs\";\nimport { EmptyStatistics, Statistics, StatType } from \"./statistics/index.mjs\";\nimport { UndoRedo } from \"./UndoRedo.mjs\";\nexport class BuildEngineFactory {\n  static buildFromSheets(sheets, configInput = {}, namedExpressions = []) {\n    const config = new Config(configInput);\n    return this.buildEngine(config, sheets, namedExpressions);\n  }\n  static buildFromSheet(sheet, configInput = {}, namedExpressions = []) {\n    const config = new Config(configInput);\n    const newsheetprefix = config.translationPackage.getUITranslation(UIElement.NEW_SHEET_PREFIX) + '1';\n    return this.buildEngine(config, {\n      [newsheetprefix]: sheet\n    }, namedExpressions);\n  }\n  static buildEmpty(configInput = {}, namedExpressions = []) {\n    return this.buildEngine(new Config(configInput), {}, namedExpressions);\n  }\n  static rebuildWithConfig(config, sheets, namedExpressions, stats) {\n    return this.buildEngine(config, sheets, namedExpressions, stats);\n  }\n  static buildEngine(config, sheets = {}, inputNamedExpressions = [], stats = config.useStats ? new Statistics() : new EmptyStatistics()) {\n    stats.start(StatType.BUILD_ENGINE_TOTAL);\n    const namedExpressions = new NamedExpressions();\n    const functionRegistry = new FunctionRegistry(config);\n    const lazilyTransformingAstService = new LazilyTransformingAstService(stats);\n    const dependencyGraph = DependencyGraph.buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats);\n    const columnSearch = buildColumnSearchStrategy(dependencyGraph, config, stats);\n    const sheetMapping = dependencyGraph.sheetMapping;\n    const addressMapping = dependencyGraph.addressMapping;\n    for (const sheetName in sheets) {\n      if (Object.prototype.hasOwnProperty.call(sheets, sheetName)) {\n        const sheet = sheets[sheetName];\n        validateAsSheet(sheet);\n        const boundaries = findBoundaries(sheet);\n        if (boundaries.height > config.maxRows || boundaries.width > config.maxColumns) {\n          throw new SheetSizeLimitExceededError();\n        }\n        const sheetId = sheetMapping.addSheet(sheetName);\n        addressMapping.autoAddSheet(sheetId, boundaries);\n      }\n    }\n    const parser = new ParserWithCaching(config, functionRegistry, sheetMapping.get);\n    lazilyTransformingAstService.parser = parser;\n    const unparser = new Unparser(config, buildLexerConfig(config), sheetMapping.fetchDisplayName, namedExpressions);\n    const dateTimeHelper = new DateTimeHelper(config);\n    const numberLiteralHelper = new NumberLiteralHelper(config);\n    const arithmeticHelper = new ArithmeticHelper(config, dateTimeHelper, numberLiteralHelper);\n    const cellContentParser = new CellContentParser(config, dateTimeHelper, numberLiteralHelper);\n    const arraySizePredictor = new ArraySizePredictor(config, functionRegistry);\n    const operations = new Operations(config, dependencyGraph, columnSearch, cellContentParser, parser, stats, lazilyTransformingAstService, namedExpressions, arraySizePredictor);\n    const undoRedo = new UndoRedo(config, operations);\n    lazilyTransformingAstService.undoRedo = undoRedo;\n    const clipboardOperations = new ClipboardOperations(config, dependencyGraph, operations);\n    const crudOperations = new CrudOperations(config, operations, undoRedo, clipboardOperations, dependencyGraph, columnSearch, parser, cellContentParser, lazilyTransformingAstService, namedExpressions);\n    inputNamedExpressions.forEach(entry => {\n      crudOperations.ensureItIsPossibleToAddNamedExpression(entry.name, entry.expression, entry.scope);\n      crudOperations.operations.addNamedExpression(entry.name, entry.expression, entry.scope, entry.options);\n    });\n    const exporter = new Exporter(config, namedExpressions, sheetMapping.fetchDisplayName, lazilyTransformingAstService);\n    const serialization = new Serialization(dependencyGraph, unparser, exporter);\n    const interpreter = new Interpreter(config, dependencyGraph, columnSearch, stats, arithmeticHelper, functionRegistry, namedExpressions, serialization, arraySizePredictor, dateTimeHelper);\n    stats.measure(StatType.GRAPH_BUILD, () => {\n      const graphBuilder = new GraphBuilder(dependencyGraph, columnSearch, parser, cellContentParser, stats, arraySizePredictor);\n      graphBuilder.buildGraph(sheets, stats);\n    });\n    const evaluator = new Evaluator(config, stats, interpreter, lazilyTransformingAstService, dependencyGraph, columnSearch);\n    evaluator.run();\n    stats.end(StatType.BUILD_ENGINE_TOTAL);\n    return {\n      config,\n      stats,\n      dependencyGraph,\n      columnSearch,\n      parser,\n      unparser,\n      cellContentParser,\n      evaluator,\n      lazilyTransformingAstService,\n      crudOperations,\n      exporter,\n      namedExpressions,\n      serialization,\n      functionRegistry\n    };\n  }\n}","map":{"version":3,"names":["ArraySizePredictor","CellContentParser","ClipboardOperations","Config","CrudOperations","DateTimeHelper","DependencyGraph","SheetSizeLimitExceededError","Evaluator","Exporter","GraphBuilder","UIElement","ArithmeticHelper","FunctionRegistry","Interpreter","LazilyTransformingAstService","buildColumnSearchStrategy","NamedExpressions","NumberLiteralHelper","Operations","buildLexerConfig","ParserWithCaching","Unparser","Serialization","findBoundaries","validateAsSheet","EmptyStatistics","Statistics","StatType","UndoRedo","BuildEngineFactory","buildFromSheets","sheets","configInput","namedExpressions","config","buildEngine","buildFromSheet","sheet","newsheetprefix","translationPackage","getUITranslation","NEW_SHEET_PREFIX","buildEmpty","rebuildWithConfig","stats","inputNamedExpressions","useStats","start","BUILD_ENGINE_TOTAL","functionRegistry","lazilyTransformingAstService","dependencyGraph","columnSearch","sheetMapping","addressMapping","sheetName","Object","prototype","hasOwnProperty","call","boundaries","height","maxRows","width","maxColumns","sheetId","addSheet","autoAddSheet","parser","get","unparser","fetchDisplayName","dateTimeHelper","numberLiteralHelper","arithmeticHelper","cellContentParser","arraySizePredictor","operations","undoRedo","clipboardOperations","crudOperations","forEach","entry","ensureItIsPossibleToAddNamedExpression","name","expression","scope","addNamedExpression","options","exporter","serialization","interpreter","measure","GRAPH_BUILD","graphBuilder","buildGraph","evaluator","run","end"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/BuildEngineFactory.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { ArraySizePredictor } from \"./ArraySize.mjs\";\nimport { CellContentParser } from \"./CellContentParser.mjs\";\nimport { ClipboardOperations } from \"./ClipboardOperations.mjs\";\nimport { Config } from \"./Config.mjs\";\nimport { CrudOperations } from \"./CrudOperations.mjs\";\nimport { DateTimeHelper } from \"./DateTimeHelper.mjs\";\nimport { DependencyGraph } from \"./DependencyGraph/index.mjs\";\nimport { SheetSizeLimitExceededError } from \"./errors.mjs\";\nimport { Evaluator } from \"./Evaluator.mjs\";\nimport { Exporter } from \"./Exporter.mjs\";\nimport { GraphBuilder } from \"./GraphBuilder.mjs\";\nimport { UIElement } from \"./i18n/index.mjs\";\nimport { ArithmeticHelper } from \"./interpreter/ArithmeticHelper.mjs\";\nimport { FunctionRegistry } from \"./interpreter/FunctionRegistry.mjs\";\nimport { Interpreter } from \"./interpreter/Interpreter.mjs\";\nimport { LazilyTransformingAstService } from \"./LazilyTransformingAstService.mjs\";\nimport { buildColumnSearchStrategy } from \"./Lookup/SearchStrategy.mjs\";\nimport { NamedExpressions } from \"./NamedExpressions.mjs\";\nimport { NumberLiteralHelper } from \"./NumberLiteralHelper.mjs\";\nimport { Operations } from \"./Operations.mjs\";\nimport { buildLexerConfig, ParserWithCaching, Unparser } from \"./parser/index.mjs\";\nimport { Serialization } from \"./Serialization.mjs\";\nimport { findBoundaries, validateAsSheet } from \"./Sheet.mjs\";\nimport { EmptyStatistics, Statistics, StatType } from \"./statistics/index.mjs\";\nimport { UndoRedo } from \"./UndoRedo.mjs\";\nexport class BuildEngineFactory {\n  static buildFromSheets(sheets, configInput = {}, namedExpressions = []) {\n    const config = new Config(configInput);\n    return this.buildEngine(config, sheets, namedExpressions);\n  }\n  static buildFromSheet(sheet, configInput = {}, namedExpressions = []) {\n    const config = new Config(configInput);\n    const newsheetprefix = config.translationPackage.getUITranslation(UIElement.NEW_SHEET_PREFIX) + '1';\n    return this.buildEngine(config, {\n      [newsheetprefix]: sheet\n    }, namedExpressions);\n  }\n  static buildEmpty(configInput = {}, namedExpressions = []) {\n    return this.buildEngine(new Config(configInput), {}, namedExpressions);\n  }\n  static rebuildWithConfig(config, sheets, namedExpressions, stats) {\n    return this.buildEngine(config, sheets, namedExpressions, stats);\n  }\n  static buildEngine(config, sheets = {}, inputNamedExpressions = [], stats = config.useStats ? new Statistics() : new EmptyStatistics()) {\n    stats.start(StatType.BUILD_ENGINE_TOTAL);\n    const namedExpressions = new NamedExpressions();\n    const functionRegistry = new FunctionRegistry(config);\n    const lazilyTransformingAstService = new LazilyTransformingAstService(stats);\n    const dependencyGraph = DependencyGraph.buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats);\n    const columnSearch = buildColumnSearchStrategy(dependencyGraph, config, stats);\n    const sheetMapping = dependencyGraph.sheetMapping;\n    const addressMapping = dependencyGraph.addressMapping;\n    for (const sheetName in sheets) {\n      if (Object.prototype.hasOwnProperty.call(sheets, sheetName)) {\n        const sheet = sheets[sheetName];\n        validateAsSheet(sheet);\n        const boundaries = findBoundaries(sheet);\n        if (boundaries.height > config.maxRows || boundaries.width > config.maxColumns) {\n          throw new SheetSizeLimitExceededError();\n        }\n        const sheetId = sheetMapping.addSheet(sheetName);\n        addressMapping.autoAddSheet(sheetId, boundaries);\n      }\n    }\n    const parser = new ParserWithCaching(config, functionRegistry, sheetMapping.get);\n    lazilyTransformingAstService.parser = parser;\n    const unparser = new Unparser(config, buildLexerConfig(config), sheetMapping.fetchDisplayName, namedExpressions);\n    const dateTimeHelper = new DateTimeHelper(config);\n    const numberLiteralHelper = new NumberLiteralHelper(config);\n    const arithmeticHelper = new ArithmeticHelper(config, dateTimeHelper, numberLiteralHelper);\n    const cellContentParser = new CellContentParser(config, dateTimeHelper, numberLiteralHelper);\n    const arraySizePredictor = new ArraySizePredictor(config, functionRegistry);\n    const operations = new Operations(config, dependencyGraph, columnSearch, cellContentParser, parser, stats, lazilyTransformingAstService, namedExpressions, arraySizePredictor);\n    const undoRedo = new UndoRedo(config, operations);\n    lazilyTransformingAstService.undoRedo = undoRedo;\n    const clipboardOperations = new ClipboardOperations(config, dependencyGraph, operations);\n    const crudOperations = new CrudOperations(config, operations, undoRedo, clipboardOperations, dependencyGraph, columnSearch, parser, cellContentParser, lazilyTransformingAstService, namedExpressions);\n    inputNamedExpressions.forEach(entry => {\n      crudOperations.ensureItIsPossibleToAddNamedExpression(entry.name, entry.expression, entry.scope);\n      crudOperations.operations.addNamedExpression(entry.name, entry.expression, entry.scope, entry.options);\n    });\n    const exporter = new Exporter(config, namedExpressions, sheetMapping.fetchDisplayName, lazilyTransformingAstService);\n    const serialization = new Serialization(dependencyGraph, unparser, exporter);\n    const interpreter = new Interpreter(config, dependencyGraph, columnSearch, stats, arithmeticHelper, functionRegistry, namedExpressions, serialization, arraySizePredictor, dateTimeHelper);\n    stats.measure(StatType.GRAPH_BUILD, () => {\n      const graphBuilder = new GraphBuilder(dependencyGraph, columnSearch, parser, cellContentParser, stats, arraySizePredictor);\n      graphBuilder.buildGraph(sheets, stats);\n    });\n    const evaluator = new Evaluator(config, stats, interpreter, lazilyTransformingAstService, dependencyGraph, columnSearch);\n    evaluator.run();\n    stats.end(StatType.BUILD_ENGINE_TOTAL);\n    return {\n      config,\n      stats,\n      dependencyGraph,\n      columnSearch,\n      parser,\n      unparser,\n      cellContentParser,\n      evaluator,\n      lazilyTransformingAstService,\n      crudOperations,\n      exporter,\n      namedExpressions,\n      serialization,\n      functionRegistry\n    };\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}