{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError } from \"../Cell.mjs\";\nexport const parsingError = (type, message) => ({\n  type,\n  message\n});\n/**\r\n * Represents types of parsing errors.\r\n */\nexport var ParsingErrorType;\n(function (ParsingErrorType) {\n  ParsingErrorType[\"LexingError\"] = \"LexingError\";\n  ParsingErrorType[\"ParserError\"] = \"ParsingError\";\n  ParsingErrorType[\"StaticOffsetError\"] = \"StaticOffsetError\";\n  ParsingErrorType[\"StaticOffsetOutOfRangeError\"] = \"StaticOffsetOutOfRangeError\";\n  ParsingErrorType[\"RangeOffsetNotAllowed\"] = \"RangeOffsetNotAllowed\";\n  ParsingErrorType[\"InvalidRangeSize\"] = \"InvalidRangeSize\";\n})(ParsingErrorType || (ParsingErrorType = {}));\nexport var AstNodeType;\n(function (AstNodeType) {\n  AstNodeType[\"EMPTY\"] = \"EMPTY\";\n  AstNodeType[\"NUMBER\"] = \"NUMBER\";\n  AstNodeType[\"STRING\"] = \"STRING\";\n  AstNodeType[\"MINUS_UNARY_OP\"] = \"MINUS_UNARY_OP\";\n  AstNodeType[\"PLUS_UNARY_OP\"] = \"PLUS_UNARY_OP\";\n  AstNodeType[\"PERCENT_OP\"] = \"PERCENT_OP\";\n  AstNodeType[\"CONCATENATE_OP\"] = \"CONCATENATE_OP\";\n  AstNodeType[\"EQUALS_OP\"] = \"EQUALS_OP\";\n  AstNodeType[\"NOT_EQUAL_OP\"] = \"NOT_EQUAL_OP\";\n  AstNodeType[\"GREATER_THAN_OP\"] = \"GREATER_THAN_OP\";\n  AstNodeType[\"LESS_THAN_OP\"] = \"LESS_THAN_OP\";\n  AstNodeType[\"GREATER_THAN_OR_EQUAL_OP\"] = \"GREATER_THAN_OR_EQUAL_OP\";\n  AstNodeType[\"LESS_THAN_OR_EQUAL_OP\"] = \"LESS_THAN_OR_EQUAL_OP\";\n  AstNodeType[\"PLUS_OP\"] = \"PLUS_OP\";\n  AstNodeType[\"MINUS_OP\"] = \"MINUS_OP\";\n  AstNodeType[\"TIMES_OP\"] = \"TIMES_OP\";\n  AstNodeType[\"DIV_OP\"] = \"DIV_OP\";\n  AstNodeType[\"POWER_OP\"] = \"POWER_OP\";\n  AstNodeType[\"FUNCTION_CALL\"] = \"FUNCTION_CALL\";\n  AstNodeType[\"NAMED_EXPRESSION\"] = \"NAMED_EXPRESSION\";\n  AstNodeType[\"PARENTHESIS\"] = \"PARENTHESES\";\n  AstNodeType[\"CELL_REFERENCE\"] = \"CELL_REFERENCE\";\n  AstNodeType[\"CELL_RANGE\"] = \"CELL_RANGE\";\n  AstNodeType[\"COLUMN_RANGE\"] = \"COLUMN_RANGE\";\n  AstNodeType[\"ROW_RANGE\"] = \"ROW_RANGE\";\n  AstNodeType[\"ERROR\"] = \"ERROR\";\n  AstNodeType[\"ERROR_WITH_RAW_INPUT\"] = \"ERROR_WITH_RAW_INPUT\";\n  AstNodeType[\"ARRAY\"] = \"ARRAY\";\n})(AstNodeType || (AstNodeType = {}));\nexport var RangeSheetReferenceType;\n(function (RangeSheetReferenceType) {\n  RangeSheetReferenceType[RangeSheetReferenceType[\"RELATIVE\"] = 0] = \"RELATIVE\";\n  RangeSheetReferenceType[RangeSheetReferenceType[\"START_ABSOLUTE\"] = 1] = \"START_ABSOLUTE\";\n  RangeSheetReferenceType[RangeSheetReferenceType[\"BOTH_ABSOLUTE\"] = 2] = \"BOTH_ABSOLUTE\";\n})(RangeSheetReferenceType || (RangeSheetReferenceType = {}));\nexport const buildEmptyArgAst = leadingWhitespace => ({\n  type: AstNodeType.EMPTY,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildNumberAst = (value, leadingWhitespace) => ({\n  type: AstNodeType.NUMBER,\n  value: value,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildStringAst = token => {\n  var _a;\n  return {\n    type: AstNodeType.STRING,\n    value: token.image.slice(1, -1),\n    leadingWhitespace: (_a = token.leadingWhitespace) === null || _a === void 0 ? void 0 : _a.image\n  };\n};\nexport const buildCellReferenceAst = (reference, leadingWhitespace) => ({\n  type: AstNodeType.CELL_REFERENCE,\n  reference,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildCellRangeAst = (start, end, sheetReferenceType, leadingWhitespace) => {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.CELL_RANGE,\n    start,\n    end,\n    sheetReferenceType,\n    leadingWhitespace\n  };\n};\nexport const buildColumnRangeAst = (start, end, sheetReferenceType, leadingWhitespace) => {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.COLUMN_RANGE,\n    start,\n    end,\n    sheetReferenceType,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport const buildRowRangeAst = (start, end, sheetReferenceType, leadingWhitespace) => {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.ROW_RANGE,\n    start,\n    end,\n    sheetReferenceType,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport const buildConcatenateOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.CONCATENATE_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildEqualsOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.EQUALS_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildNotEqualOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.NOT_EQUAL_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildGreaterThanOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.GREATER_THAN_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildLessThanOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.LESS_THAN_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildGreaterThanOrEqualOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.GREATER_THAN_OR_EQUAL_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildLessThanOrEqualOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.LESS_THAN_OR_EQUAL_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildPlusOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.PLUS_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildMinusOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.MINUS_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildTimesOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.TIMES_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildDivOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.DIV_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildPowerOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.POWER_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildMinusUnaryOpAst = (value, leadingWhitespace) => ({\n  type: AstNodeType.MINUS_UNARY_OP,\n  value,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildPlusUnaryOpAst = (value, leadingWhitespace) => ({\n  type: AstNodeType.PLUS_UNARY_OP,\n  value,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildPercentOpAst = (value, leadingWhitespace) => ({\n  type: AstNodeType.PERCENT_OP,\n  value,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildProcedureAst = (procedureName, args, leadingWhitespace, internalWhitespace, hyperlink) => ({\n  type: AstNodeType.FUNCTION_CALL,\n  procedureName,\n  args,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n  internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image,\n  hyperlink\n});\nexport const buildArrayAst = (args, leadingWhitespace, internalWhitespace) => ({\n  type: AstNodeType.ARRAY,\n  args,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n  internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n});\nexport const buildNamedExpressionAst = (expressionName, leadingWhitespace) => ({\n  type: AstNodeType.NAMED_EXPRESSION,\n  expressionName,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildParenthesisAst = (expression, leadingWhitespace, internalWhitespace) => ({\n  type: AstNodeType.PARENTHESIS,\n  expression,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n  internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n});\nexport const buildCellErrorAst = (error, leadingWhitespace) => ({\n  type: AstNodeType.ERROR,\n  error,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildErrorWithRawInputAst = (rawInput, error, leadingWhitespace) => ({\n  type: AstNodeType.ERROR_WITH_RAW_INPUT,\n  error,\n  rawInput,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildParsingErrorAst = () => ({\n  type: AstNodeType.ERROR,\n  error: CellError.parsingError()\n});\nfunction assertRangeConsistency(start, end, sheetReferenceType) {\n  if (start.sheet !== undefined && end.sheet === undefined || start.sheet === undefined && end.sheet !== undefined) {\n    throw new Error('Start address inconsistent with end address');\n  }\n  if (start.sheet === undefined && sheetReferenceType !== RangeSheetReferenceType.RELATIVE || start.sheet !== undefined && sheetReferenceType === RangeSheetReferenceType.RELATIVE) {\n    throw new Error('Sheet address inconsistent with sheet reference type');\n  }\n}\nexport function imageWithWhitespace(image, leadingWhitespace) {\n  return (leadingWhitespace !== null && leadingWhitespace !== void 0 ? leadingWhitespace : '') + image;\n}","map":{"version":3,"names":["CellError","parsingError","type","message","ParsingErrorType","AstNodeType","RangeSheetReferenceType","buildEmptyArgAst","leadingWhitespace","EMPTY","image","buildNumberAst","value","NUMBER","buildStringAst","token","_a","STRING","slice","buildCellReferenceAst","reference","CELL_REFERENCE","buildCellRangeAst","start","end","sheetReferenceType","assertRangeConsistency","CELL_RANGE","buildColumnRangeAst","COLUMN_RANGE","buildRowRangeAst","ROW_RANGE","buildConcatenateOpAst","left","right","CONCATENATE_OP","buildEqualsOpAst","EQUALS_OP","buildNotEqualOpAst","NOT_EQUAL_OP","buildGreaterThanOpAst","GREATER_THAN_OP","buildLessThanOpAst","LESS_THAN_OP","buildGreaterThanOrEqualOpAst","GREATER_THAN_OR_EQUAL_OP","buildLessThanOrEqualOpAst","LESS_THAN_OR_EQUAL_OP","buildPlusOpAst","PLUS_OP","buildMinusOpAst","MINUS_OP","buildTimesOpAst","TIMES_OP","buildDivOpAst","DIV_OP","buildPowerOpAst","POWER_OP","buildMinusUnaryOpAst","MINUS_UNARY_OP","buildPlusUnaryOpAst","PLUS_UNARY_OP","buildPercentOpAst","PERCENT_OP","buildProcedureAst","procedureName","args","internalWhitespace","hyperlink","FUNCTION_CALL","buildArrayAst","ARRAY","buildNamedExpressionAst","expressionName","NAMED_EXPRESSION","buildParenthesisAst","expression","PARENTHESIS","buildCellErrorAst","error","ERROR","buildErrorWithRawInputAst","rawInput","ERROR_WITH_RAW_INPUT","buildParsingErrorAst","sheet","undefined","Error","RELATIVE","imageWithWhitespace"],"sources":["C:/spreadsheet-clone/node_modules/hyperformula/es/parser/Ast.mjs"],"sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2025 Handsoncode. All rights reserved.\r\n */\nimport { CellError } from \"../Cell.mjs\";\nexport const parsingError = (type, message) => ({\n  type,\n  message\n});\n/**\r\n * Represents types of parsing errors.\r\n */\nexport var ParsingErrorType;\n(function (ParsingErrorType) {\n  ParsingErrorType[\"LexingError\"] = \"LexingError\";\n  ParsingErrorType[\"ParserError\"] = \"ParsingError\";\n  ParsingErrorType[\"StaticOffsetError\"] = \"StaticOffsetError\";\n  ParsingErrorType[\"StaticOffsetOutOfRangeError\"] = \"StaticOffsetOutOfRangeError\";\n  ParsingErrorType[\"RangeOffsetNotAllowed\"] = \"RangeOffsetNotAllowed\";\n  ParsingErrorType[\"InvalidRangeSize\"] = \"InvalidRangeSize\";\n})(ParsingErrorType || (ParsingErrorType = {}));\nexport var AstNodeType;\n(function (AstNodeType) {\n  AstNodeType[\"EMPTY\"] = \"EMPTY\";\n  AstNodeType[\"NUMBER\"] = \"NUMBER\";\n  AstNodeType[\"STRING\"] = \"STRING\";\n  AstNodeType[\"MINUS_UNARY_OP\"] = \"MINUS_UNARY_OP\";\n  AstNodeType[\"PLUS_UNARY_OP\"] = \"PLUS_UNARY_OP\";\n  AstNodeType[\"PERCENT_OP\"] = \"PERCENT_OP\";\n  AstNodeType[\"CONCATENATE_OP\"] = \"CONCATENATE_OP\";\n  AstNodeType[\"EQUALS_OP\"] = \"EQUALS_OP\";\n  AstNodeType[\"NOT_EQUAL_OP\"] = \"NOT_EQUAL_OP\";\n  AstNodeType[\"GREATER_THAN_OP\"] = \"GREATER_THAN_OP\";\n  AstNodeType[\"LESS_THAN_OP\"] = \"LESS_THAN_OP\";\n  AstNodeType[\"GREATER_THAN_OR_EQUAL_OP\"] = \"GREATER_THAN_OR_EQUAL_OP\";\n  AstNodeType[\"LESS_THAN_OR_EQUAL_OP\"] = \"LESS_THAN_OR_EQUAL_OP\";\n  AstNodeType[\"PLUS_OP\"] = \"PLUS_OP\";\n  AstNodeType[\"MINUS_OP\"] = \"MINUS_OP\";\n  AstNodeType[\"TIMES_OP\"] = \"TIMES_OP\";\n  AstNodeType[\"DIV_OP\"] = \"DIV_OP\";\n  AstNodeType[\"POWER_OP\"] = \"POWER_OP\";\n  AstNodeType[\"FUNCTION_CALL\"] = \"FUNCTION_CALL\";\n  AstNodeType[\"NAMED_EXPRESSION\"] = \"NAMED_EXPRESSION\";\n  AstNodeType[\"PARENTHESIS\"] = \"PARENTHESES\";\n  AstNodeType[\"CELL_REFERENCE\"] = \"CELL_REFERENCE\";\n  AstNodeType[\"CELL_RANGE\"] = \"CELL_RANGE\";\n  AstNodeType[\"COLUMN_RANGE\"] = \"COLUMN_RANGE\";\n  AstNodeType[\"ROW_RANGE\"] = \"ROW_RANGE\";\n  AstNodeType[\"ERROR\"] = \"ERROR\";\n  AstNodeType[\"ERROR_WITH_RAW_INPUT\"] = \"ERROR_WITH_RAW_INPUT\";\n  AstNodeType[\"ARRAY\"] = \"ARRAY\";\n})(AstNodeType || (AstNodeType = {}));\nexport var RangeSheetReferenceType;\n(function (RangeSheetReferenceType) {\n  RangeSheetReferenceType[RangeSheetReferenceType[\"RELATIVE\"] = 0] = \"RELATIVE\";\n  RangeSheetReferenceType[RangeSheetReferenceType[\"START_ABSOLUTE\"] = 1] = \"START_ABSOLUTE\";\n  RangeSheetReferenceType[RangeSheetReferenceType[\"BOTH_ABSOLUTE\"] = 2] = \"BOTH_ABSOLUTE\";\n})(RangeSheetReferenceType || (RangeSheetReferenceType = {}));\nexport const buildEmptyArgAst = leadingWhitespace => ({\n  type: AstNodeType.EMPTY,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildNumberAst = (value, leadingWhitespace) => ({\n  type: AstNodeType.NUMBER,\n  value: value,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildStringAst = token => {\n  var _a;\n  return {\n    type: AstNodeType.STRING,\n    value: token.image.slice(1, -1),\n    leadingWhitespace: (_a = token.leadingWhitespace) === null || _a === void 0 ? void 0 : _a.image\n  };\n};\nexport const buildCellReferenceAst = (reference, leadingWhitespace) => ({\n  type: AstNodeType.CELL_REFERENCE,\n  reference,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildCellRangeAst = (start, end, sheetReferenceType, leadingWhitespace) => {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.CELL_RANGE,\n    start,\n    end,\n    sheetReferenceType,\n    leadingWhitespace\n  };\n};\nexport const buildColumnRangeAst = (start, end, sheetReferenceType, leadingWhitespace) => {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.COLUMN_RANGE,\n    start,\n    end,\n    sheetReferenceType,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport const buildRowRangeAst = (start, end, sheetReferenceType, leadingWhitespace) => {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.ROW_RANGE,\n    start,\n    end,\n    sheetReferenceType,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport const buildConcatenateOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.CONCATENATE_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildEqualsOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.EQUALS_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildNotEqualOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.NOT_EQUAL_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildGreaterThanOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.GREATER_THAN_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildLessThanOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.LESS_THAN_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildGreaterThanOrEqualOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.GREATER_THAN_OR_EQUAL_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildLessThanOrEqualOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.LESS_THAN_OR_EQUAL_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildPlusOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.PLUS_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildMinusOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.MINUS_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildTimesOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.TIMES_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildDivOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.DIV_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildPowerOpAst = (left, right, leadingWhitespace) => ({\n  type: AstNodeType.POWER_OP,\n  left,\n  right,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildMinusUnaryOpAst = (value, leadingWhitespace) => ({\n  type: AstNodeType.MINUS_UNARY_OP,\n  value,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildPlusUnaryOpAst = (value, leadingWhitespace) => ({\n  type: AstNodeType.PLUS_UNARY_OP,\n  value,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildPercentOpAst = (value, leadingWhitespace) => ({\n  type: AstNodeType.PERCENT_OP,\n  value,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildProcedureAst = (procedureName, args, leadingWhitespace, internalWhitespace, hyperlink) => ({\n  type: AstNodeType.FUNCTION_CALL,\n  procedureName,\n  args,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n  internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image,\n  hyperlink\n});\nexport const buildArrayAst = (args, leadingWhitespace, internalWhitespace) => ({\n  type: AstNodeType.ARRAY,\n  args,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n  internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n});\nexport const buildNamedExpressionAst = (expressionName, leadingWhitespace) => ({\n  type: AstNodeType.NAMED_EXPRESSION,\n  expressionName,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildParenthesisAst = (expression, leadingWhitespace, internalWhitespace) => ({\n  type: AstNodeType.PARENTHESIS,\n  expression,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n  internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n});\nexport const buildCellErrorAst = (error, leadingWhitespace) => ({\n  type: AstNodeType.ERROR,\n  error,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildErrorWithRawInputAst = (rawInput, error, leadingWhitespace) => ({\n  type: AstNodeType.ERROR_WITH_RAW_INPUT,\n  error,\n  rawInput,\n  leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n});\nexport const buildParsingErrorAst = () => ({\n  type: AstNodeType.ERROR,\n  error: CellError.parsingError()\n});\nfunction assertRangeConsistency(start, end, sheetReferenceType) {\n  if (start.sheet !== undefined && end.sheet === undefined || start.sheet === undefined && end.sheet !== undefined) {\n    throw new Error('Start address inconsistent with end address');\n  }\n  if (start.sheet === undefined && sheetReferenceType !== RangeSheetReferenceType.RELATIVE || start.sheet !== undefined && sheetReferenceType === RangeSheetReferenceType.RELATIVE) {\n    throw new Error('Sheet address inconsistent with sheet reference type');\n  }\n}\nexport function imageWithWhitespace(image, leadingWhitespace) {\n  return (leadingWhitespace !== null && leadingWhitespace !== void 0 ? leadingWhitespace : '') + image;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}